
admin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  00003232  000032c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080015c  0080015c  000033c2  2**0
                  ALLOC
  3 .stab         00002bbc  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106f  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <main>
      8a:	0c 94 17 19 	jmp	0x322e	; 0x322e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_Init>:
#include "UART/UART_Interface.h"
//#include "UART/UART_Cfg.h"

#define UART_F_CPU 8000000

void USART_Init( u32 baud ){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	6d 83       	std	Y+5, r22	; 0x05
     b5c:	7e 83       	std	Y+6, r23	; 0x06
     b5e:	8f 83       	std	Y+7, r24	; 0x07
     b60:	98 87       	std	Y+8, r25	; 0x08

	u32 UBRR;
		UBRR = ((UART_F_CPU / (16*baud)) - 1);
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	af 81       	ldd	r26, Y+7	; 0x07
     b68:	b8 85       	ldd	r27, Y+8	; 0x08
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	aa 1f       	adc	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	aa 1f       	adc	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	9c 01       	movw	r18, r24
     b8c:	ad 01       	movw	r20, r26
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	92 e1       	ldi	r25, 0x12	; 18
     b92:	aa e7       	ldi	r26, 0x7A	; 122
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 a3 18 	call	0x3146	; 0x3146 <__udivmodsi4>
     b9e:	da 01       	movw	r26, r20
     ba0:	c9 01       	movw	r24, r18
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	a1 09       	sbc	r26, r1
     ba6:	b1 09       	sbc	r27, r1
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	ab 83       	std	Y+3, r26	; 0x03
     bae:	bc 83       	std	Y+4, r27	; 0x04
		UBRRL= (u8) UBRR;
     bb0:	e9 e2       	ldi	r30, 0x29	; 41
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 83       	st	Z, r24
		UBRRH = (u8) ((UBRR >> 8) & (0b00001111));
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	ab 81       	ldd	r26, Y+3	; 0x03
     bc2:	bc 81       	ldd	r27, Y+4	; 0x04
     bc4:	89 2f       	mov	r24, r25
     bc6:	9a 2f       	mov	r25, r26
     bc8:	ab 2f       	mov	r26, r27
     bca:	bb 27       	eor	r27, r27
     bcc:	8f 70       	andi	r24, 0x0F	; 15
     bce:	80 83       	st	Z, r24

		UCSRB = (1<<RXEN)|(1<<TXEN);
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	88 e1       	ldi	r24, 0x18	; 24
     bd6:	80 83       	st	Z, r24
		UCSRC = (1<<URSEL)|(3<<UCSZ0);
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	86 e8       	ldi	r24, 0x86	; 134
     bde:	80 83       	st	Z, r24

}
     be0:	28 96       	adiw	r28, 0x08	; 8
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <Uart_WritePolling>:

void Uart_WritePolling(u8 data){
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSRA & (1 << UDRE)))	;
     bfe:	eb e2       	ldi	r30, 0x2B	; 43
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	80 72       	andi	r24, 0x20	; 32
     c0a:	90 70       	andi	r25, 0x00	; 0
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	b9 f3       	breq	.-18     	; 0xbfe <Uart_WritePolling+0xc>
	UDR = data;
     c10:	ec e2       	ldi	r30, 0x2C	; 44
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24
}
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <Uart_ReadPolling>:

u8 Uart_ReadPolling(){
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC)));
     c28:	eb e2       	ldi	r30, 0x2B	; 43
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	dc f7       	brge	.-10     	; 0xc28 <Uart_ReadPolling+0x8>
	return UDR;
     c32:	ec e2       	ldi	r30, 0x2C	; 44
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
}
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <SPI_init>:
#include "SPI/SPI_Cfg.h"

static void (*ptrr)(u8);

void SPI_init()
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,5);
     c46:	ad e2       	ldi	r26, 0x2D	; 45
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	ed e2       	ldi	r30, 0x2D	; 45
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	80 62       	ori	r24, 0x20	; 32
     c52:	8c 93       	st	X, r24

	#if SPI_Mode==Slave
			CLR_BIT(SPCR,4);

	#elif SPI_Mode==Master
			SET_BIT(SPCR,4);
     c54:	ad e2       	ldi	r26, 0x2D	; 45
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	ed e2       	ldi	r30, 0x2D	; 45
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 61       	ori	r24, 0x10	; 16
     c60:	8c 93       	st	X, r24

			#if SPI_Prescaler==_4_prescalar
				CLR_BIT(SPCR,0);
				CLR_BIT(SPCR,1);
			#elif SPI_Prescaler==_16_prescalar
				SET_BIT(SPCR,0);
     c62:	ad e2       	ldi	r26, 0x2D	; 45
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	ed e2       	ldi	r30, 0x2D	; 45
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
     c6e:	8c 93       	st	X, r24
				CLR_BIT(SPCR,1);
     c70:	ad e2       	ldi	r26, 0x2D	; 45
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ed e2       	ldi	r30, 0x2D	; 45
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8d 7f       	andi	r24, 0xFD	; 253
     c7c:	8c 93       	st	X, r24
			#endif

			#if SPI_x2Speed==Enable
				Set_BIT(SPSR,0);
			#elif SPI_x2Speed==Disable
				CLR_BIT(SPSR,0);
     c7e:	ae e2       	ldi	r26, 0x2E	; 46
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ee e2       	ldi	r30, 0x2E	; 46
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	8c 93       	st	X, r24
	#endif

	#if Clock_pol==Rising
		CLR_BIT(SPCR,3);
	#elif Clock_pol==falling
		SET_BIT(SPCR,3);
     c8c:	ad e2       	ldi	r26, 0x2D	; 45
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ed e2       	ldi	r30, 0x2D	; 45
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	88 60       	ori	r24, 0x08	; 8
     c98:	8c 93       	st	X, r24
	#endif

	#if Clock_phase==Sample
		CLR_BIT(SPCR,2);
	#elif Clock_phase==Setup
		SET_BIT(SPCR,2);
     c9a:	ad e2       	ldi	r26, 0x2D	; 45
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ed e2       	ldi	r30, 0x2D	; 45
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	84 60       	ori	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
	#endif

	SET_BIT(SPCR,6);	//SPI Enable
     ca8:	ad e2       	ldi	r26, 0x2D	; 45
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ed e2       	ldi	r30, 0x2D	; 45
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	8c 93       	st	X, r24
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <SPI_Enable_int>:

void SPI_Enable_int()
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,7);
     cc4:	ad e2       	ldi	r26, 0x2D	; 45
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ed e2       	ldi	r30, 0x2D	; 45
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 68       	ori	r24, 0x80	; 128
     cd0:	8c 93       	st	X, r24
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <SPI_Transceive>:

u8 SPI_Transceive(u8 data)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
	while(READ_BIT(SPSR,6));
     ce4:	ee e2       	ldi	r30, 0x2E	; 46
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 95       	swap	r24
     cec:	86 95       	lsr	r24
     cee:	86 95       	lsr	r24
     cf0:	83 70       	andi	r24, 0x03	; 3
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	88 23       	and	r24, r24
     cfc:	99 f7       	brne	.-26     	; 0xce4 <SPI_Transceive+0xc>
	SPDR=data;
     cfe:	ef e2       	ldi	r30, 0x2F	; 47
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,7));
     d06:	ee e2       	ldi	r30, 0x2E	; 46
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	dc f7       	brge	.-10     	; 0xd06 <SPI_Transceive+0x2e>
	return SPDR;
     d10:	ef e2       	ldi	r30, 0x2F	; 47
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
}
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <SPI_Send_data>:

void SPI_Send_data(u8 data)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
	while(1 == READ_BIT(SPSR,6));
     d2a:	ee e2       	ldi	r30, 0x2E	; 46
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	83 70       	andi	r24, 0x03	; 3
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	81 70       	andi	r24, 0x01	; 1
     d3e:	90 70       	andi	r25, 0x00	; 0
     d40:	88 23       	and	r24, r24
     d42:	99 f7       	brne	.-26     	; 0xd2a <SPI_Send_data+0xc>
	SPDR=data;
     d44:	ef e2       	ldi	r30, 0x2F	; 47
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	80 83       	st	Z, r24
}
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <SPI_Set_Callback>:


void SPI_Set_Callback(void (*ptrf)(u8))
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <SPI_Set_Callback+0x6>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
	ptrr=ptrf;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	90 93 5d 01 	sts	0x015D, r25
     d6a:	80 93 5c 01 	sts	0x015C, r24
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <__vector_12>:


ISR(SPI_STC_vect)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	ptrr(SPDR);
     da2:	e0 91 5c 01 	lds	r30, 0x015C
     da6:	f0 91 5d 01 	lds	r31, 0x015D
     daa:	af e2       	ldi	r26, 0x2F	; 47
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	8c 91       	ld	r24, X
     db0:	09 95       	icall
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <GIE_Enable>:
#include "MemMap.h"
#include "UTILS.h"
#include "GI/GI_Interface.h"

void GIE_Enable(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     de0:	af e5       	ldi	r26, 0x5F	; 95
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ef e5       	ldi	r30, 0x5F	; 95
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	8c 93       	st	X, r24
}
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <GIE_Disable>:

void GIE_Disable(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     dfc:	af e5       	ldi	r26, 0x5F	; 95
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ef e5       	ldi	r30, 0x5F	; 95
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	8c 93       	st	X, r24
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <DIO_InitPin>:
#include "DIO/DIO_Inteface.h"
#include "DIO/DIO_Private.h"
#include "DIO/DIO_Cfg.h"

static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type direction)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	28 97       	sbiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	6a 83       	std	Y+2, r22	; 0x02
	if(direction==OUTPUT)
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	88 23       	and	r24, r24
     e2c:	09 f0       	breq	.+2      	; 0xe30 <DIO_InitPin+0x20>
     e2e:	d9 c0       	rjmp	.+434    	; 0xfe2 <DIO_InitPin+0x1d2>
	{
		switch (pin/8)
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	86 95       	lsr	r24
     e34:	86 95       	lsr	r24
     e36:	86 95       	lsr	r24
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	38 87       	std	Y+8, r19	; 0x08
     e3e:	2f 83       	std	Y+7, r18	; 0x07
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <DIO_InitPin+0x3c>
     e4a:	44 c0       	rjmp	.+136    	; 0xed4 <DIO_InitPin+0xc4>
     e4c:	2f 81       	ldd	r18, Y+7	; 0x07
     e4e:	38 85       	ldd	r19, Y+8	; 0x08
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	2c f4       	brge	.+10     	; 0xe60 <DIO_InitPin+0x50>
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	71 f0       	breq	.+28     	; 0xe7a <DIO_InitPin+0x6a>
     e5e:	7e c2       	rjmp	.+1276   	; 0x135c <DIO_InitPin+0x54c>
     e60:	2f 81       	ldd	r18, Y+7	; 0x07
     e62:	38 85       	ldd	r19, Y+8	; 0x08
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_InitPin+0x5c>
     e6a:	61 c0       	rjmp	.+194    	; 0xf2e <DIO_InitPin+0x11e>
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	98 85       	ldd	r25, Y+8	; 0x08
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_InitPin+0x68>
     e76:	88 c0       	rjmp	.+272    	; 0xf88 <DIO_InitPin+0x178>
     e78:	71 c2       	rjmp	.+1250   	; 0x135c <DIO_InitPin+0x54c>
		{
			case PA :
			SET_BIT(DDRA,pin%8);
     e7a:	aa e3       	ldi	r26, 0x3A	; 58
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e3       	ldi	r30, 0x3A	; 58
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9c 01       	movw	r18, r24
     e8e:	27 70       	andi	r18, 0x07	; 7
     e90:	30 70       	andi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_InitPin+0x8c>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	2a 95       	dec	r18
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_InitPin+0x88>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
     ea4:	ab e3       	ldi	r26, 0x3B	; 59
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	eb e3       	ldi	r30, 0x3B	; 59
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 01       	movw	r18, r24
     eb8:	27 70       	andi	r18, 0x07	; 7
     eba:	30 70       	andi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_InitPin+0xb8>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_InitPin+0xb4>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	44 c2       	rjmp	.+1160   	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PB :
			SET_BIT(DDRB,pin%8);
     ed4:	a7 e3       	ldi	r26, 0x37	; 55
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e7 e3       	ldi	r30, 0x37	; 55
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 01       	movw	r18, r24
     ee8:	27 70       	andi	r18, 0x07	; 7
     eea:	30 70       	andi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_InitPin+0xe6>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	2a 95       	dec	r18
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_InitPin+0xe2>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	27 70       	andi	r18, 0x07	; 7
     f14:	30 70       	andi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_InitPin+0x112>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_InitPin+0x10e>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	17 c2       	rjmp	.+1070   	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PC :
			SET_BIT(DDRC,pin%8);
     f2e:	a4 e3       	ldi	r26, 0x34	; 52
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e4 e3       	ldi	r30, 0x34	; 52
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 01       	movw	r18, r24
     f42:	27 70       	andi	r18, 0x07	; 7
     f44:	30 70       	andi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_InitPin+0x140>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	2a 95       	dec	r18
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_InitPin+0x13c>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
     f58:	a5 e3       	ldi	r26, 0x35	; 53
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e3       	ldi	r30, 0x35	; 53
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	27 70       	andi	r18, 0x07	; 7
     f6e:	30 70       	andi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_InitPin+0x16c>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_InitPin+0x168>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	ea c1       	rjmp	.+980    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PD :
			SET_BIT(DDRD,pin%8);
     f88:	a1 e3       	ldi	r26, 0x31	; 49
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 01       	movw	r18, r24
     f9c:	27 70       	andi	r18, 0x07	; 7
     f9e:	30 70       	andi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_InitPin+0x19a>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	2a 95       	dec	r18
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_InitPin+0x196>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
     fb2:	a2 e3       	ldi	r26, 0x32	; 50
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e2 e3       	ldi	r30, 0x32	; 50
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 01       	movw	r18, r24
     fc6:	27 70       	andi	r18, 0x07	; 7
     fc8:	30 70       	andi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_InitPin+0x1c6>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_InitPin+0x1c2>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	bd c1       	rjmp	.+890    	; 0x135c <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INFREE)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f0       	breq	.+2      	; 0xfea <DIO_InitPin+0x1da>
     fe8:	dd c0       	rjmp	.+442    	; 0x11a4 <DIO_InitPin+0x394>
	{
		switch (pin/8)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	86 95       	lsr	r24
     fee:	86 95       	lsr	r24
     ff0:	86 95       	lsr	r24
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3e 83       	std	Y+6, r19	; 0x06
     ff8:	2d 83       	std	Y+5, r18	; 0x05
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <DIO_InitPin+0x1f6>
    1004:	45 c0       	rjmp	.+138    	; 0x1090 <DIO_InitPin+0x280>
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <DIO_InitPin+0x20a>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	71 f0       	breq	.+28     	; 0x1034 <DIO_InitPin+0x224>
    1018:	a1 c1       	rjmp	.+834    	; 0x135c <DIO_InitPin+0x54c>
    101a:	2d 81       	ldd	r18, Y+5	; 0x05
    101c:	3e 81       	ldd	r19, Y+6	; 0x06
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <DIO_InitPin+0x216>
    1024:	63 c0       	rjmp	.+198    	; 0x10ec <DIO_InitPin+0x2dc>
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <DIO_InitPin+0x222>
    1030:	8b c0       	rjmp	.+278    	; 0x1148 <DIO_InitPin+0x338>
    1032:	94 c1       	rjmp	.+808    	; 0x135c <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    1034:	aa e3       	ldi	r26, 0x3A	; 58
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 01       	movw	r18, r24
    1048:	27 70       	andi	r18, 0x07	; 7
    104a:	30 70       	andi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_InitPin+0x246>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	2a 95       	dec	r18
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_InitPin+0x242>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
    1060:	ab e3       	ldi	r26, 0x3B	; 59
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e3       	ldi	r30, 0x3B	; 59
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 01       	movw	r18, r24
    1074:	27 70       	andi	r18, 0x07	; 7
    1076:	30 70       	andi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_InitPin+0x274>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_InitPin+0x270>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	66 c1       	rjmp	.+716    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    1090:	a7 e3       	ldi	r26, 0x37	; 55
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e7 e3       	ldi	r30, 0x37	; 55
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 01       	movw	r18, r24
    10a4:	27 70       	andi	r18, 0x07	; 7
    10a6:	30 70       	andi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_InitPin+0x2a2>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	2a 95       	dec	r18
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_InitPin+0x29e>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 01       	movw	r18, r24
    10d0:	27 70       	andi	r18, 0x07	; 7
    10d2:	30 70       	andi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_InitPin+0x2d0>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_InitPin+0x2cc>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	38 c1       	rjmp	.+624    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    10ec:	a4 e3       	ldi	r26, 0x34	; 52
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e4 e3       	ldi	r30, 0x34	; 52
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9c 01       	movw	r18, r24
    1100:	27 70       	andi	r18, 0x07	; 7
    1102:	30 70       	andi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_InitPin+0x2fe>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	2a 95       	dec	r18
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_InitPin+0x2fa>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
    1118:	a5 e3       	ldi	r26, 0x35	; 53
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9c 01       	movw	r18, r24
    112c:	27 70       	andi	r18, 0x07	; 7
    112e:	30 70       	andi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_InitPin+0x32c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_InitPin+0x328>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	0a c1       	rjmp	.+532    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    1148:	a1 e3       	ldi	r26, 0x31	; 49
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e1 e3       	ldi	r30, 0x31	; 49
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c 01       	movw	r18, r24
    115c:	27 70       	andi	r18, 0x07	; 7
    115e:	30 70       	andi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_InitPin+0x35a>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	2a 95       	dec	r18
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_InitPin+0x356>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
    1174:	a2 e3       	ldi	r26, 0x32	; 50
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e2 e3       	ldi	r30, 0x32	; 50
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9c 01       	movw	r18, r24
    1188:	27 70       	andi	r18, 0x07	; 7
    118a:	30 70       	andi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_InitPin+0x388>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_InitPin+0x384>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	dc c0       	rjmp	.+440    	; 0x135c <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INPULL)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_InitPin+0x39c>
    11aa:	d8 c0       	rjmp	.+432    	; 0x135c <DIO_InitPin+0x54c>
	{
		switch (pin/8)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	86 95       	lsr	r24
    11b0:	86 95       	lsr	r24
    11b2:	86 95       	lsr	r24
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <DIO_InitPin+0x3b8>
    11c6:	44 c0       	rjmp	.+136    	; 0x1250 <DIO_InitPin+0x440>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	2c f4       	brge	.+10     	; 0x11dc <DIO_InitPin+0x3cc>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <DIO_InitPin+0x3e6>
    11da:	c0 c0       	rjmp	.+384    	; 0x135c <DIO_InitPin+0x54c>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <DIO_InitPin+0x3d8>
    11e6:	61 c0       	rjmp	.+194    	; 0x12aa <DIO_InitPin+0x49a>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <DIO_InitPin+0x3e4>
    11f2:	88 c0       	rjmp	.+272    	; 0x1304 <DIO_InitPin+0x4f4>
    11f4:	b3 c0       	rjmp	.+358    	; 0x135c <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    11f6:	aa e3       	ldi	r26, 0x3A	; 58
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ea e3       	ldi	r30, 0x3A	; 58
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 01       	movw	r18, r24
    120a:	27 70       	andi	r18, 0x07	; 7
    120c:	30 70       	andi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_InitPin+0x408>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_InitPin+0x404>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin%8);
    1222:	ab e3       	ldi	r26, 0x3B	; 59
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9c 01       	movw	r18, r24
    1236:	27 70       	andi	r18, 0x07	; 7
    1238:	30 70       	andi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_InitPin+0x436>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_InitPin+0x432>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	86 c0       	rjmp	.+268    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    1250:	a7 e3       	ldi	r26, 0x37	; 55
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9c 01       	movw	r18, r24
    1264:	27 70       	andi	r18, 0x07	; 7
    1266:	30 70       	andi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_InitPin+0x462>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_InitPin+0x45e>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin%8);
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 01       	movw	r18, r24
    1290:	27 70       	andi	r18, 0x07	; 7
    1292:	30 70       	andi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_InitPin+0x490>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_InitPin+0x48c>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	59 c0       	rjmp	.+178    	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    12aa:	a4 e3       	ldi	r26, 0x34	; 52
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e4 e3       	ldi	r30, 0x34	; 52
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 01       	movw	r18, r24
    12be:	27 70       	andi	r18, 0x07	; 7
    12c0:	30 70       	andi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_InitPin+0x4bc>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_InitPin+0x4b8>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin%8);
    12d6:	a5 e3       	ldi	r26, 0x35	; 53
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e3       	ldi	r30, 0x35	; 53
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 01       	movw	r18, r24
    12ea:	27 70       	andi	r18, 0x07	; 7
    12ec:	30 70       	andi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_InitPin+0x4ea>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_InitPin+0x4e6>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	2c c0       	rjmp	.+88     	; 0x135c <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    1304:	a1 e3       	ldi	r26, 0x31	; 49
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e1 e3       	ldi	r30, 0x31	; 49
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9c 01       	movw	r18, r24
    1318:	27 70       	andi	r18, 0x07	; 7
    131a:	30 70       	andi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_InitPin+0x516>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	2a 95       	dec	r18
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_InitPin+0x512>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin%8);
    1330:	a2 e3       	ldi	r26, 0x32	; 50
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e2 e3       	ldi	r30, 0x32	; 50
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 01       	movw	r18, r24
    1344:	27 70       	andi	r18, 0x07	; 7
    1346:	30 70       	andi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_InitPin+0x544>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_InitPin+0x540>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
			break;
		}
	}
}
    135c:	28 96       	adiw	r28, 0x08	; 8
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_Init>:

void DIO_Init(void)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_Init+0x6>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
    137a:	80 e2       	ldi	r24, 0x20	; 32
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	19 c0       	rjmp	.+50     	; 0x13b8 <DIO_Init+0x4a>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	fc 01       	movw	r30, r24
    1392:	e4 5e       	subi	r30, 0xE4	; 228
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	20 81       	ld	r18, Z
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	fc 01       	movw	r30, r24
    13a4:	e3 5e       	subi	r30, 0xE3	; 227
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	90 81       	ld	r25, Z
    13aa:	82 2f       	mov	r24, r18
    13ac:	69 2f       	mov	r22, r25
    13ae:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_InitPin>

void DIO_Init(void)
{
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	fc f2       	brlt	.-66     	; 0x1386 <DIO_Init+0x18>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin ,DIO_PinVoltage_type volt)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <DIO_WritePin+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_WritePin+0x8>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_WritePin+0xa>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	if(volt==HIGH)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <DIO_WritePin+0x1a>
    13ec:	7f c0       	rjmp	.+254    	; 0x14ec <DIO_WritePin+0x118>
	{
		switch (pin/8)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	86 95       	lsr	r24
    13f2:	86 95       	lsr	r24
    13f4:	86 95       	lsr	r24
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	2d 83       	std	Y+5, r18	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	91 05       	cpc	r25, r1
    1406:	69 f1       	breq	.+90     	; 0x1462 <DIO_WritePin+0x8e>
    1408:	2d 81       	ldd	r18, Y+5	; 0x05
    140a:	3e 81       	ldd	r19, Y+6	; 0x06
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	2c f4       	brge	.+10     	; 0x141c <DIO_WritePin+0x48>
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f0       	breq	.+26     	; 0x1434 <DIO_WritePin+0x60>
    141a:	ea c0       	rjmp	.+468    	; 0x15f0 <DIO_WritePin+0x21c>
    141c:	2d 81       	ldd	r18, Y+5	; 0x05
    141e:	3e 81       	ldd	r19, Y+6	; 0x06
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	a9 f1       	breq	.+106    	; 0x1490 <DIO_WritePin+0xbc>
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_WritePin+0x5e>
    1430:	46 c0       	rjmp	.+140    	; 0x14be <DIO_WritePin+0xea>
    1432:	de c0       	rjmp	.+444    	; 0x15f0 <DIO_WritePin+0x21c>
		{
			case PA :
			SET_BIT(PORTA,pin%8);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9c 01       	movw	r18, r24
    1448:	27 70       	andi	r18, 0x07	; 7
    144a:	30 70       	andi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_WritePin+0x84>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_WritePin+0x80>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	c7 c0       	rjmp	.+398    	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PB :
			SET_BIT(PORTB,pin%8);
    1462:	a8 e3       	ldi	r26, 0x38	; 56
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 01       	movw	r18, r24
    1476:	27 70       	andi	r18, 0x07	; 7
    1478:	30 70       	andi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_WritePin+0xb2>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_WritePin+0xae>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	b0 c0       	rjmp	.+352    	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PC :
			SET_BIT(PORTC,pin%8);
    1490:	a5 e3       	ldi	r26, 0x35	; 53
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9c 01       	movw	r18, r24
    14a4:	27 70       	andi	r18, 0x07	; 7
    14a6:	30 70       	andi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_WritePin+0xe0>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_WritePin+0xdc>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	99 c0       	rjmp	.+306    	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PD :
			SET_BIT(PORTD,pin%8);
    14be:	a2 e3       	ldi	r26, 0x32	; 50
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e2 e3       	ldi	r30, 0x32	; 50
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 01       	movw	r18, r24
    14d2:	27 70       	andi	r18, 0x07	; 7
    14d4:	30 70       	andi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_WritePin+0x10e>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_WritePin+0x10a>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	82 c0       	rjmp	.+260    	; 0x15f0 <DIO_WritePin+0x21c>
			break;
		}
	}
	else
	{
		switch (pin/8)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	86 95       	lsr	r24
    14f0:	86 95       	lsr	r24
    14f2:	86 95       	lsr	r24
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3c 83       	std	Y+4, r19	; 0x04
    14fa:	2b 83       	std	Y+3, r18	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	71 f1       	breq	.+92     	; 0x1562 <DIO_WritePin+0x18e>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_WritePin+0x146>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f0       	breq	.+26     	; 0x1532 <DIO_WritePin+0x15e>
    1518:	6b c0       	rjmp	.+214    	; 0x15f0 <DIO_WritePin+0x21c>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	b9 f1       	breq	.+110    	; 0x1592 <DIO_WritePin+0x1be>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <DIO_WritePin+0x15c>
    152e:	49 c0       	rjmp	.+146    	; 0x15c2 <DIO_WritePin+0x1ee>
    1530:	5f c0       	rjmp	.+190    	; 0x15f0 <DIO_WritePin+0x21c>
		{
			case PA :
			CLR_BIT(PORTA,pin%8);
    1532:	ab e3       	ldi	r26, 0x3B	; 59
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	eb e3       	ldi	r30, 0x3B	; 59
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 01       	movw	r18, r24
    1546:	27 70       	andi	r18, 0x07	; 7
    1548:	30 70       	andi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_WritePin+0x182>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_WritePin+0x17e>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	47 c0       	rjmp	.+142    	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PB :
			CLR_BIT(PORTB,pin%8);
    1562:	a8 e3       	ldi	r26, 0x38	; 56
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e8 e3       	ldi	r30, 0x38	; 56
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 01       	movw	r18, r24
    1576:	27 70       	andi	r18, 0x07	; 7
    1578:	30 70       	andi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_WritePin+0x1b2>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_WritePin+0x1ae>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	2f c0       	rjmp	.+94     	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PC :
			CLR_BIT(PORTC,pin%8);
    1592:	a5 e3       	ldi	r26, 0x35	; 53
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e3       	ldi	r30, 0x35	; 53
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 01       	movw	r18, r24
    15a6:	27 70       	andi	r18, 0x07	; 7
    15a8:	30 70       	andi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_WritePin+0x1e2>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_WritePin+0x1de>
    15ba:	80 95       	com	r24
    15bc:	84 23       	and	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <DIO_WritePin+0x21c>
			break;
			case PD :
			CLR_BIT(PORTD,pin%8);
    15c2:	a2 e3       	ldi	r26, 0x32	; 50
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 01       	movw	r18, r24
    15d6:	27 70       	andi	r18, 0x07	; 7
    15d8:	30 70       	andi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_WritePin+0x212>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_WritePin+0x20e>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
			break;
		}
	}
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_ReadPin>:

DIO_PinVoltage_type	DIO_ReadPin(DIO_Pin_type pin)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_ReadPin+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_ReadPin+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type v=LOW;
    1610:	19 82       	std	Y+1, r1	; 0x01
	switch (pin/8)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3c 83       	std	Y+4, r19	; 0x04
    1620:	2b 83       	std	Y+3, r18	; 0x03
    1622:	4b 81       	ldd	r20, Y+3	; 0x03
    1624:	5c 81       	ldd	r21, Y+4	; 0x04
    1626:	41 30       	cpi	r20, 0x01	; 1
    1628:	51 05       	cpc	r21, r1
    162a:	59 f1       	breq	.+86     	; 0x1682 <DIO_ReadPin+0x80>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	91 05       	cpc	r25, r1
    1634:	34 f4       	brge	.+12     	; 0x1642 <DIO_ReadPin+0x40>
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	21 15       	cp	r18, r1
    163c:	31 05       	cpc	r19, r1
    163e:	69 f0       	breq	.+26     	; 0x165a <DIO_ReadPin+0x58>
    1640:	5b c0       	rjmp	.+182    	; 0x16f8 <DIO_ReadPin+0xf6>
    1642:	4b 81       	ldd	r20, Y+3	; 0x03
    1644:	5c 81       	ldd	r21, Y+4	; 0x04
    1646:	42 30       	cpi	r20, 0x02	; 2
    1648:	51 05       	cpc	r21, r1
    164a:	79 f1       	breq	.+94     	; 0x16aa <DIO_ReadPin+0xa8>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <DIO_ReadPin+0x56>
    1656:	3d c0       	rjmp	.+122    	; 0x16d2 <DIO_ReadPin+0xd0>
    1658:	4f c0       	rjmp	.+158    	; 0x16f8 <DIO_ReadPin+0xf6>
	{
		case PA :
		v=READ_BIT(PINA,pin%8);
    165a:	e9 e3       	ldi	r30, 0x39	; 57
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	90 70       	andi	r25, 0x00	; 0
    166e:	a9 01       	movw	r20, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_ReadPin+0x74>
    1672:	55 95       	asr	r21
    1674:	47 95       	ror	r20
    1676:	8a 95       	dec	r24
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_ReadPin+0x70>
    167a:	ca 01       	movw	r24, r20
    167c:	81 70       	andi	r24, 0x01	; 1
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	3b c0       	rjmp	.+118    	; 0x16f8 <DIO_ReadPin+0xf6>
		break;
		case PB :
		v=READ_BIT(PINB,pin%8);
    1682:	e6 e3       	ldi	r30, 0x36	; 54
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	87 70       	andi	r24, 0x07	; 7
    1694:	90 70       	andi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_ReadPin+0x9c>
    169a:	55 95       	asr	r21
    169c:	47 95       	ror	r20
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_ReadPin+0x98>
    16a2:	ca 01       	movw	r24, r20
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	27 c0       	rjmp	.+78     	; 0x16f8 <DIO_ReadPin+0xf6>
		break;
		case PC :
		v=READ_BIT(PINC,pin%8);
    16aa:	e3 e3       	ldi	r30, 0x33	; 51
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	87 70       	andi	r24, 0x07	; 7
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	a9 01       	movw	r20, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <DIO_ReadPin+0xc4>
    16c2:	55 95       	asr	r21
    16c4:	47 95       	ror	r20
    16c6:	8a 95       	dec	r24
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <DIO_ReadPin+0xc0>
    16ca:	ca 01       	movw	r24, r20
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <DIO_ReadPin+0xf6>
		break;
		case PD :
		v=READ_BIT(PIND,pin%8);
    16d2:	e0 e3       	ldi	r30, 0x30	; 48
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	87 70       	andi	r24, 0x07	; 7
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_ReadPin+0xec>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_ReadPin+0xe8>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return v;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_TogglePin+0x6>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
	switch (pin/8)
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3b 83       	std	Y+3, r19	; 0x03
    1724:	2a 83       	std	Y+2, r18	; 0x02
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	69 f1       	breq	.+90     	; 0x178a <DIO_TogglePin+0x82>
    1730:	2a 81       	ldd	r18, Y+2	; 0x02
    1732:	3b 81       	ldd	r19, Y+3	; 0x03
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_TogglePin+0x3c>
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f0       	breq	.+26     	; 0x175c <DIO_TogglePin+0x54>
    1742:	67 c0       	rjmp	.+206    	; 0x1812 <DIO_TogglePin+0x10a>
    1744:	2a 81       	ldd	r18, Y+2	; 0x02
    1746:	3b 81       	ldd	r19, Y+3	; 0x03
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	a9 f1       	breq	.+106    	; 0x17b8 <DIO_TogglePin+0xb0>
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <DIO_TogglePin+0x52>
    1758:	46 c0       	rjmp	.+140    	; 0x17e6 <DIO_TogglePin+0xde>
    175a:	5b c0       	rjmp	.+182    	; 0x1812 <DIO_TogglePin+0x10a>
	{
		case PA :
		TOG_BIT(PORTA,pin%8);
    175c:	ab e3       	ldi	r26, 0x3B	; 59
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	eb e3       	ldi	r30, 0x3B	; 59
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9c 01       	movw	r18, r24
    1770:	27 70       	andi	r18, 0x07	; 7
    1772:	30 70       	andi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_TogglePin+0x78>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_TogglePin+0x74>
    1784:	84 27       	eor	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	44 c0       	rjmp	.+136    	; 0x1812 <DIO_TogglePin+0x10a>
		break;
		case PB :
		TOG_BIT(PORTB,pin%8);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9c 01       	movw	r18, r24
    179e:	27 70       	andi	r18, 0x07	; 7
    17a0:	30 70       	andi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_TogglePin+0xa6>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_TogglePin+0xa2>
    17b2:	84 27       	eor	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	2d c0       	rjmp	.+90     	; 0x1812 <DIO_TogglePin+0x10a>
		break;
		case PC :
		TOG_BIT(PORTC,pin%8);
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 01       	movw	r18, r24
    17cc:	27 70       	andi	r18, 0x07	; 7
    17ce:	30 70       	andi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_TogglePin+0xd4>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_TogglePin+0xd0>
    17e0:	84 27       	eor	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	16 c0       	rjmp	.+44     	; 0x1812 <DIO_TogglePin+0x10a>
		break;
		case PD :
		TOG_BIT(PORTD,pin%8);
    17e6:	a2 e3       	ldi	r26, 0x32	; 50
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e2 e3       	ldi	r30, 0x32	; 50
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 01       	movw	r18, r24
    17fa:	27 70       	andi	r18, 0x07	; 7
    17fc:	30 70       	andi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_TogglePin+0x102>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_TogglePin+0xfe>
    180e:	84 27       	eor	r24, r20
    1810:	8c 93       	st	X, r24
		break;
	}
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port,u8 data)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_WritePort+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <DIO_WritePort+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3c 83       	std	Y+4, r19	; 0x04
    1836:	2b 83       	std	Y+3, r18	; 0x03
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	d1 f0       	breq	.+52     	; 0x1876 <DIO_WritePort+0x58>
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <DIO_WritePort+0x38>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 f0       	breq	.+24     	; 0x186c <DIO_WritePort+0x4e>
    1854:	1e c0       	rjmp	.+60     	; 0x1892 <DIO_WritePort+0x74>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	81 f0       	breq	.+32     	; 0x1880 <DIO_WritePort+0x62>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	81 f0       	breq	.+32     	; 0x188a <DIO_WritePort+0x6c>
    186a:	13 c0       	rjmp	.+38     	; 0x1892 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA=data;
    186c:	eb e3       	ldi	r30, 0x3B	; 59
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	80 83       	st	Z, r24
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <DIO_WritePort+0x74>
		break;
		case PB :
		PORTB=data;
    1876:	e8 e3       	ldi	r30, 0x38	; 56
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	80 83       	st	Z, r24
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <DIO_WritePort+0x74>
		break;
		case PC :
		PORTC=data;
    1880:	e5 e3       	ldi	r30, 0x35	; 53
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <DIO_WritePort+0x74>
		break;
		case PD :
		PORTD=data;
    188a:	e2 e3       	ldi	r30, 0x32	; 50
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
		break;
	}
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_ReadPort+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_ReadPort+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    18ae:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3c 83       	std	Y+4, r19	; 0x04
    18b8:	2b 83       	std	Y+3, r18	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	d1 f0       	breq	.+52     	; 0x18f8 <DIO_ReadPort+0x58>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <DIO_ReadPort+0x38>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_ReadPort+0x4e>
    18d6:	1e c0       	rjmp	.+60     	; 0x1914 <DIO_ReadPort+0x74>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	81 f0       	breq	.+32     	; 0x1902 <DIO_ReadPort+0x62>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <DIO_ReadPort+0x6c>
    18ec:	13 c0       	rjmp	.+38     	; 0x1914 <DIO_ReadPort+0x74>
	{
		case PA :
		data=PINA;
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <DIO_ReadPort+0x74>
		break;
		case PB :
		data=PINB;
    18f8:	e6 e3       	ldi	r30, 0x36	; 54
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <DIO_ReadPort+0x74>
		break;
		case PC :
		data=PINC;
    1902:	e3 e3       	ldi	r30, 0x33	; 51
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <DIO_ReadPort+0x74>
		break;
		case PD :
		data=PIND;
    190c:	e0 e3       	ldi	r30, 0x30	; 48
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	e9 97       	sbiw	r28, 0x39	; 57
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,LOW);
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    1942:	89 ad       	ldd	r24, Y+57	; 0x39
    1944:	98 2f       	mov	r25, r24
    1946:	99 1f       	adc	r25, r25
    1948:	99 27       	eor	r25, r25
    194a:	99 1f       	adc	r25, r25
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	69 2f       	mov	r22, r25
    1950:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    1954:	89 ad       	ldd	r24, Y+57	; 0x39
    1956:	82 95       	swap	r24
    1958:	86 95       	lsr	r24
    195a:	86 95       	lsr	r24
    195c:	83 70       	andi	r24, 0x03	; 3
    195e:	98 2f       	mov	r25, r24
    1960:	91 70       	andi	r25, 0x01	; 1
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	69 2f       	mov	r22, r25
    1966:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    196a:	89 ad       	ldd	r24, Y+57	; 0x39
    196c:	82 95       	swap	r24
    196e:	86 95       	lsr	r24
    1970:	87 70       	andi	r24, 0x07	; 7
    1972:	98 2f       	mov	r25, r24
    1974:	91 70       	andi	r25, 0x01	; 1
    1976:	84 e0       	ldi	r24, 0x04	; 4
    1978:	69 2f       	mov	r22, r25
    197a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    197e:	89 ad       	ldd	r24, Y+57	; 0x39
    1980:	82 95       	swap	r24
    1982:	8f 70       	andi	r24, 0x0F	; 15
    1984:	98 2f       	mov	r25, r24
    1986:	91 70       	andi	r25, 0x01	; 1
    1988:	85 e0       	ldi	r24, 0x05	; 5
    198a:	69 2f       	mov	r22, r25
    198c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    1990:	86 e0       	ldi	r24, 0x06	; 6
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e8       	ldi	r26, 0x80	; 128
    199e:	bf e3       	ldi	r27, 0x3F	; 63
    19a0:	8d ab       	std	Y+53, r24	; 0x35
    19a2:	9e ab       	std	Y+54, r25	; 0x36
    19a4:	af ab       	std	Y+55, r26	; 0x37
    19a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	6d a9       	ldd	r22, Y+53	; 0x35
    19aa:	7e a9       	ldd	r23, Y+54	; 0x36
    19ac:	8f a9       	ldd	r24, Y+55	; 0x37
    19ae:	98 ad       	ldd	r25, Y+56	; 0x38
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a ef       	ldi	r20, 0xFA	; 250
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	89 ab       	std	Y+49, r24	; 0x31
    19c2:	9a ab       	std	Y+50, r25	; 0x32
    19c4:	ab ab       	std	Y+51, r26	; 0x33
    19c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19c8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ca:	7a a9       	ldd	r23, Y+50	; 0x32
    19cc:	8b a9       	ldd	r24, Y+51	; 0x33
    19ce:	9c a9       	ldd	r25, Y+52	; 0x34
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <WriteIns+0xc6>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	98 ab       	std	Y+48, r25	; 0x30
    19e6:	8f a7       	std	Y+47, r24	; 0x2f
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <WriteIns+0x144>
	else if (__tmp > 65535)
    19ea:	69 a9       	ldd	r22, Y+49	; 0x31
    19ec:	7a a9       	ldd	r23, Y+50	; 0x32
    19ee:	8b a9       	ldd	r24, Y+51	; 0x33
    19f0:	9c a9       	ldd	r25, Y+52	; 0x34
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	3f ef       	ldi	r19, 0xFF	; 255
    19f6:	4f e7       	ldi	r20, 0x7F	; 127
    19f8:	57 e4       	ldi	r21, 0x47	; 71
    19fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	4c f5       	brge	.+82     	; 0x1a54 <WriteIns+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a02:	6d a9       	ldd	r22, Y+53	; 0x35
    1a04:	7e a9       	ldd	r23, Y+54	; 0x36
    1a06:	8f a9       	ldd	r24, Y+55	; 0x37
    1a08:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e2       	ldi	r20, 0x20	; 32
    1a10:	51 e4       	ldi	r21, 0x41	; 65
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <WriteIns+0x126>
    1a2c:	88 ec       	ldi	r24, 0xC8	; 200
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e a7       	std	Y+46, r25	; 0x2e
    1a32:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <WriteIns+0x114>
    1a3c:	9e a7       	std	Y+46, r25	; 0x2e
    1a3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	98 ab       	std	Y+48, r25	; 0x30
    1a48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <WriteIns+0x108>
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <WriteIns+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a54:	69 a9       	ldd	r22, Y+49	; 0x31
    1a56:	7a a9       	ldd	r23, Y+50	; 0x32
    1a58:	8b a9       	ldd	r24, Y+51	; 0x33
    1a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	98 ab       	std	Y+48, r25	; 0x30
    1a66:	8f a7       	std	Y+47, r24	; 0x2f
    1a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6c:	9c a7       	std	Y+44, r25	; 0x2c
    1a6e:	8b a7       	std	Y+43, r24	; 0x2b
    1a70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <WriteIns+0x150>
    1a78:	9c a7       	std	Y+44, r25	; 0x2c
    1a7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    1a7c:	86 e0       	ldi	r24, 0x06	; 6
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e8       	ldi	r26, 0x80	; 128
    1a8a:	bf e3       	ldi	r27, 0x3F	; 63
    1a8c:	8f a3       	std	Y+39, r24	; 0x27
    1a8e:	98 a7       	std	Y+40, r25	; 0x28
    1a90:	a9 a7       	std	Y+41, r26	; 0x29
    1a92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	6f a1       	ldd	r22, Y+39	; 0x27
    1a96:	78 a5       	ldd	r23, Y+40	; 0x28
    1a98:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a ef       	ldi	r20, 0xFA	; 250
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8b a3       	std	Y+35, r24	; 0x23
    1aae:	9c a3       	std	Y+36, r25	; 0x24
    1ab0:	ad a3       	std	Y+37, r26	; 0x25
    1ab2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aba:	9e a1       	ldd	r25, Y+38	; 0x26
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <WriteIns+0x1b2>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9a a3       	std	Y+34, r25	; 0x22
    1ad2:	89 a3       	std	Y+33, r24	; 0x21
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <WriteIns+0x230>
	else if (__tmp > 65535)
    1ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ada:	8d a1       	ldd	r24, Y+37	; 0x25
    1adc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	4c f5       	brge	.+82     	; 0x1b40 <WriteIns+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	6f a1       	ldd	r22, Y+39	; 0x27
    1af0:	78 a5       	ldd	r23, Y+40	; 0x28
    1af2:	89 a5       	ldd	r24, Y+41	; 0x29
    1af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9a a3       	std	Y+34, r25	; 0x22
    1b14:	89 a3       	std	Y+33, r24	; 0x21
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <WriteIns+0x212>
    1b18:	88 ec       	ldi	r24, 0xC8	; 200
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b22:	98 a1       	ldd	r25, Y+32	; 0x20
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <WriteIns+0x200>
    1b28:	98 a3       	std	Y+32, r25	; 0x20
    1b2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <WriteIns+0x1f4>
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <WriteIns+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	6b a1       	ldd	r22, Y+35	; 0x23
    1b42:	7c a1       	ldd	r23, Y+36	; 0x24
    1b44:	8d a1       	ldd	r24, Y+37	; 0x25
    1b46:	9e a1       	ldd	r25, Y+38	; 0x26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	89 a1       	ldd	r24, Y+33	; 0x21
    1b56:	9a a1       	ldd	r25, Y+34	; 0x22
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <WriteIns+0x23c>
    1b64:	9e 8f       	std	Y+30, r25	; 0x1e
    1b66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_WritePin(D7,READ_BIT(ins,3));
    1b68:	89 ad       	ldd	r24, Y+57	; 0x39
    1b6a:	86 95       	lsr	r24
    1b6c:	86 95       	lsr	r24
    1b6e:	86 95       	lsr	r24
    1b70:	98 2f       	mov	r25, r24
    1b72:	91 70       	andi	r25, 0x01	; 1
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	69 2f       	mov	r22, r25
    1b78:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    1b7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7e:	86 95       	lsr	r24
    1b80:	86 95       	lsr	r24
    1b82:	98 2f       	mov	r25, r24
    1b84:	91 70       	andi	r25, 0x01	; 1
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	69 2f       	mov	r22, r25
    1b8a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    1b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b90:	86 95       	lsr	r24
    1b92:	98 2f       	mov	r25, r24
    1b94:	91 70       	andi	r25, 0x01	; 1
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	69 2f       	mov	r22, r25
    1b9a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    1b9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	91 70       	andi	r25, 0x01	; 1
    1ba4:	85 e0       	ldi	r24, 0x05	; 5
    1ba6:	69 2f       	mov	r22, r25
    1ba8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    1bac:	86 e0       	ldi	r24, 0x06	; 6
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	89 8f       	std	Y+25, r24	; 0x19
    1bbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8d 8b       	std	Y+21, r24	; 0x15
    1bde:	9e 8b       	std	Y+22, r25	; 0x16
    1be0:	af 8b       	std	Y+23, r26	; 0x17
    1be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <WriteIns+0x2e2>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <WriteIns+0x360>
	else if (__tmp > 65535)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <WriteIns+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <WriteIns+0x342>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
    1c50:	89 89       	ldd	r24, Y+17	; 0x11
    1c52:	9a 89       	ldd	r25, Y+18	; 0x12
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <WriteIns+0x330>
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <WriteIns+0x324>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <WriteIns+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	98 89       	ldd	r25, Y+16	; 0x10
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <WriteIns+0x36c>
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    1c98:	86 e0       	ldi	r24, 0x06	; 6
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	8b 87       	std	Y+11, r24	; 0x0b
    1caa:	9c 87       	std	Y+12, r25	; 0x0c
    1cac:	ad 87       	std	Y+13, r26	; 0x0d
    1cae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8f 83       	std	Y+7, r24	; 0x07
    1cca:	98 87       	std	Y+8, r25	; 0x08
    1ccc:	a9 87       	std	Y+9, r26	; 0x09
    1cce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <WriteIns+0x3ce>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <WriteIns+0x44c>
	else if (__tmp > 65535)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <WriteIns+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <WriteIns+0x42e>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <WriteIns+0x41c>
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <WriteIns+0x410>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <WriteIns+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <WriteIns+0x458>
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d84:	e9 96       	adiw	r28, 0x39	; 57
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <WriteData>:

static void WriteData(u8 data)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	e9 97       	sbiw	r28, 0x39	; 57
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,HIGH);
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
    1db4:	89 ad       	ldd	r24, Y+57	; 0x39
    1db6:	98 2f       	mov	r25, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	99 27       	eor	r25, r25
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	69 2f       	mov	r22, r25
    1dc2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    1dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc8:	82 95       	swap	r24
    1dca:	86 95       	lsr	r24
    1dcc:	86 95       	lsr	r24
    1dce:	83 70       	andi	r24, 0x03	; 3
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    1ddc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dde:	82 95       	swap	r24
    1de0:	86 95       	lsr	r24
    1de2:	87 70       	andi	r24, 0x07	; 7
    1de4:	98 2f       	mov	r25, r24
    1de6:	91 70       	andi	r25, 0x01	; 1
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	69 2f       	mov	r22, r25
    1dec:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    1df0:	89 ad       	ldd	r24, Y+57	; 0x39
    1df2:	82 95       	swap	r24
    1df4:	8f 70       	andi	r24, 0x0F	; 15
    1df6:	98 2f       	mov	r25, r24
    1df8:	91 70       	andi	r25, 0x01	; 1
    1dfa:	85 e0       	ldi	r24, 0x05	; 5
    1dfc:	69 2f       	mov	r22, r25
    1dfe:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e8       	ldi	r26, 0x80	; 128
    1e10:	bf e3       	ldi	r27, 0x3F	; 63
    1e12:	8d ab       	std	Y+53, r24	; 0x35
    1e14:	9e ab       	std	Y+54, r25	; 0x36
    1e16:	af ab       	std	Y+55, r26	; 0x37
    1e18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e20:	98 ad       	ldd	r25, Y+56	; 0x38
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a ef       	ldi	r20, 0xFA	; 250
    1e28:	54 e4       	ldi	r21, 0x44	; 68
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	89 ab       	std	Y+49, r24	; 0x31
    1e34:	9a ab       	std	Y+50, r25	; 0x32
    1e36:	ab ab       	std	Y+51, r26	; 0x33
    1e38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e40:	9c a9       	ldd	r25, Y+52	; 0x34
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <WriteData+0xc6>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	98 ab       	std	Y+48, r25	; 0x30
    1e58:	8f a7       	std	Y+47, r24	; 0x2f
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <WriteData+0x144>
	else if (__tmp > 65535)
    1e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e60:	8b a9       	ldd	r24, Y+51	; 0x33
    1e62:	9c a9       	ldd	r25, Y+52	; 0x34
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6d a9       	ldd	r22, Y+53	; 0x35
    1e76:	7e a9       	ldd	r23, Y+54	; 0x36
    1e78:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	98 ab       	std	Y+48, r25	; 0x30
    1e9a:	8f a7       	std	Y+47, r24	; 0x2f
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <WriteData+0x126>
    1e9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e a7       	std	Y+46, r25	; 0x2e
    1ea4:	8d a7       	std	Y+45, r24	; 0x2d
    1ea6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <WriteData+0x114>
    1eae:	9e a7       	std	Y+46, r25	; 0x2e
    1eb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <WriteData+0x108>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	9c a7       	std	Y+44, r25	; 0x2c
    1ee0:	8b a7       	std	Y+43, r24	; 0x2b
    1ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <WriteData+0x150>
    1eea:	9c a7       	std	Y+44, r25	; 0x2c
    1eec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    1eee:	86 e0       	ldi	r24, 0x06	; 6
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e8       	ldi	r26, 0x80	; 128
    1efc:	bf e3       	ldi	r27, 0x3F	; 63
    1efe:	8f a3       	std	Y+39, r24	; 0x27
    1f00:	98 a7       	std	Y+40, r25	; 0x28
    1f02:	a9 a7       	std	Y+41, r26	; 0x29
    1f04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6f a1       	ldd	r22, Y+39	; 0x27
    1f08:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a ef       	ldi	r20, 0xFA	; 250
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8b a3       	std	Y+35, r24	; 0x23
    1f20:	9c a3       	std	Y+36, r25	; 0x24
    1f22:	ad a3       	std	Y+37, r26	; 0x25
    1f24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f26:	6b a1       	ldd	r22, Y+35	; 0x23
    1f28:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <WriteData+0x1b2>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9a a3       	std	Y+34, r25	; 0x22
    1f44:	89 a3       	std	Y+33, r24	; 0x21
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <WriteData+0x230>
	else if (__tmp > 65535)
    1f48:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6f a1       	ldd	r22, Y+39	; 0x27
    1f62:	78 a5       	ldd	r23, Y+40	; 0x28
    1f64:	89 a5       	ldd	r24, Y+41	; 0x29
    1f66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9a a3       	std	Y+34, r25	; 0x22
    1f86:	89 a3       	std	Y+33, r24	; 0x21
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <WriteData+0x212>
    1f8a:	88 ec       	ldi	r24, 0xC8	; 200
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	98 a3       	std	Y+32, r25	; 0x20
    1f90:	8f 8f       	std	Y+31, r24	; 0x1f
    1f92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f94:	98 a1       	ldd	r25, Y+32	; 0x20
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <WriteData+0x200>
    1f9a:	98 a3       	std	Y+32, r25	; 0x20
    1f9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9a a3       	std	Y+34, r25	; 0x22
    1fa6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1faa:	9a a1       	ldd	r25, Y+34	; 0x22
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <WriteData+0x1f4>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9a a3       	std	Y+34, r25	; 0x22
    1fc4:	89 a3       	std	Y+33, r24	; 0x21
    1fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fca:	9e 8f       	std	Y+30, r25	; 0x1e
    1fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <WriteData+0x23c>
    1fd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_WritePin(D7,READ_BIT(data,3));
    1fda:	89 ad       	ldd	r24, Y+57	; 0x39
    1fdc:	86 95       	lsr	r24
    1fde:	86 95       	lsr	r24
    1fe0:	86 95       	lsr	r24
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	91 70       	andi	r25, 0x01	; 1
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	69 2f       	mov	r22, r25
    1fea:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    1fee:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff0:	86 95       	lsr	r24
    1ff2:	86 95       	lsr	r24
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	91 70       	andi	r25, 0x01	; 1
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	69 2f       	mov	r22, r25
    1ffc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    2000:	89 ad       	ldd	r24, Y+57	; 0x39
    2002:	86 95       	lsr	r24
    2004:	98 2f       	mov	r25, r24
    2006:	91 70       	andi	r25, 0x01	; 1
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	69 2f       	mov	r22, r25
    200c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    2010:	89 ad       	ldd	r24, Y+57	; 0x39
    2012:	98 2f       	mov	r25, r24
    2014:	91 70       	andi	r25, 0x01	; 1
    2016:	85 e0       	ldi	r24, 0x05	; 5
    2018:	69 2f       	mov	r22, r25
    201a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    201e:	86 e0       	ldi	r24, 0x06	; 6
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e8       	ldi	r26, 0x80	; 128
    202c:	bf e3       	ldi	r27, 0x3F	; 63
    202e:	89 8f       	std	Y+25, r24	; 0x19
    2030:	9a 8f       	std	Y+26, r25	; 0x1a
    2032:	ab 8f       	std	Y+27, r26	; 0x1b
    2034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8d 8b       	std	Y+21, r24	; 0x15
    2050:	9e 8b       	std	Y+22, r25	; 0x16
    2052:	af 8b       	std	Y+23, r26	; 0x17
    2054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <WriteData+0x2e2>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <WriteData+0x360>
	else if (__tmp > 65535)
    2078:	6d 89       	ldd	r22, Y+21	; 0x15
    207a:	7e 89       	ldd	r23, Y+22	; 0x16
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	69 8d       	ldd	r22, Y+25	; 0x19
    2092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <WriteData+0x342>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9a 8b       	std	Y+18, r25	; 0x12
    20c0:	89 8b       	std	Y+17, r24	; 0x11
    20c2:	89 89       	ldd	r24, Y+17	; 0x11
    20c4:	9a 89       	ldd	r25, Y+18	; 0x12
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <WriteData+0x330>
    20ca:	9a 8b       	std	Y+18, r25	; 0x12
    20cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <WriteData+0x324>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	98 8b       	std	Y+16, r25	; 0x10
    20fc:	8f 87       	std	Y+15, r24	; 0x0f
    20fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2100:	98 89       	ldd	r25, Y+16	; 0x10
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <WriteData+0x36c>
    2106:	98 8b       	std	Y+16, r25	; 0x10
    2108:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    210a:	86 e0       	ldi	r24, 0x06	; 6
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <WriteData+0x3ce>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <WriteData+0x44c>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <WriteData+0x42e>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <WriteData+0x41c>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <WriteData+0x410>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <WriteData+0x458>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    21f6:	e9 96       	adiw	r28, 0x39	; 57
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LCD_init>:

void LCD_init()
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	6c 97       	sbiw	r28, 0x1c	; 28
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a8 e4       	ldi	r26, 0x48	; 72
    2222:	b2 e4       	ldi	r27, 0x42	; 66
    2224:	89 8f       	std	Y+25, r24	; 0x19
    2226:	9a 8f       	std	Y+26, r25	; 0x1a
    2228:	ab 8f       	std	Y+27, r26	; 0x1b
    222a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	69 8d       	ldd	r22, Y+25	; 0x19
    222e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8d 8b       	std	Y+21, r24	; 0x15
    2246:	9e 8b       	std	Y+22, r25	; 0x16
    2248:	af 8b       	std	Y+23, r26	; 0x17
    224a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_init+0x66>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_init+0xe4>
	else if (__tmp > 65535)
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	69 8d       	ldd	r22, Y+25	; 0x19
    2288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_init+0xc6>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9a 8b       	std	Y+18, r25	; 0x12
    22b6:	89 8b       	std	Y+17, r24	; 0x11
    22b8:	89 89       	ldd	r24, Y+17	; 0x11
    22ba:	9a 89       	ldd	r25, Y+18	; 0x12
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_init+0xb4>
    22c0:	9a 8b       	std	Y+18, r25	; 0x12
    22c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8b 89       	ldd	r24, Y+19	; 0x13
    22c6:	9c 89       	ldd	r25, Y+20	; 0x14
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_init+0xa8>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6d 89       	ldd	r22, Y+21	; 0x15
    22da:	7e 89       	ldd	r23, Y+22	; 0x16
    22dc:	8f 89       	ldd	r24, Y+23	; 0x17
    22de:	98 8d       	ldd	r25, Y+24	; 0x18
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	98 8b       	std	Y+16, r25	; 0x10
    22f2:	8f 87       	std	Y+15, r24	; 0x0f
    22f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f6:	98 89       	ldd	r25, Y+16	; 0x10
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_init+0xf0>
    22fc:	98 8b       	std	Y+16, r25	; 0x10
    22fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	WriteIns(0x02);
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
	WriteIns(0x28);
    2306:	88 e2       	ldi	r24, 0x28	; 40
    2308:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
	WriteIns(Cursor_Mode);
    230c:	8c e0       	ldi	r24, 0x0C	; 12
    230e:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
	WriteIns(0x01);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	8b 87       	std	Y+11, r24	; 0x0b
    2322:	9c 87       	std	Y+12, r25	; 0x0c
    2324:	ad 87       	std	Y+13, r26	; 0x0d
    2326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6b 85       	ldd	r22, Y+11	; 0x0b
    232a:	7c 85       	ldd	r23, Y+12	; 0x0c
    232c:	8d 85       	ldd	r24, Y+13	; 0x0d
    232e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8f 83       	std	Y+7, r24	; 0x07
    2342:	98 87       	std	Y+8, r25	; 0x08
    2344:	a9 87       	std	Y+9, r26	; 0x09
    2346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_init+0x162>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_init+0x1e0>
	else if (__tmp > 65535)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_init+0x1c2>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_init+0x1b0>
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_init+0x1a4>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_init+0x1ec>
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	WriteIns(mode);
    23fc:	80 91 60 01 	lds	r24, 0x0160
    2400:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
}
    2404:	6c 96       	adiw	r28, 0x1c	; 28
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_Clear>:

#endif

void LCD_Clear()
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	WriteIns(0x01);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
	cursor_line=LINE1;
    2424:	10 92 5e 01 	sts	0x015E, r1
	cursor_cell=0;
    2428:	10 92 5f 01 	sts	0x015F, r1
	if ( mode == RtoL)
    242c:	80 91 60 01 	lds	r24, 0x0160
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	51 f4       	brne	.+20     	; 0x2448 <LCD_Clear+0x32>
	{
		Write_Mode(RtoL);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	0e 94 27 12 	call	0x244e	; 0x244e <Write_Mode>
		LCD_SETCURSOR(LINE1,15);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	6f e0       	ldi	r22, 0x0F	; 15
    243e:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
		cursor_cell=15;
    2442:	8f e0       	ldi	r24, 0x0F	; 15
    2444:	80 93 5f 01 	sts	0x015F, r24
	}
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <Write_Mode>:

void Write_Mode(Write_M m)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01
	if (m==LtoR)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	88 23       	and	r24, r24
    245e:	31 f4       	brne	.+12     	; 0x246c <Write_Mode+0x1e>
	{
		mode=LtoR;
    2460:	10 92 60 01 	sts	0x0160, r1
		WriteIns(0x06);
    2464:	86 e0       	ldi	r24, 0x06	; 6
    2466:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
    246a:	06 c0       	rjmp	.+12     	; 0x2478 <Write_Mode+0x2a>
	}
	else
	{
		mode=RtoL;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 60 01 	sts	0x0160, r24
		WriteIns(0x04);
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
	}
}
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <LCD_SETCURSOR>:

void LCD_SETCURSOR(LINE_NUMBER line ,u8 cell)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <LCD_SETCURSOR+0x6>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	6a 83       	std	Y+2, r22	; 0x02
	cursor_line=line;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	80 93 5e 01 	sts	0x015E, r24
	cursor_cell=cell;
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	80 93 5f 01 	sts	0x015F, r24
	WriteIns((0x80+line)+cell);
    249a:	99 81       	ldd	r25, Y+1	; 0x01
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	89 0f       	add	r24, r25
    24a0:	80 58       	subi	r24, 0x80	; 128
    24a2:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LCD_WriteChar>:

void LCD_WriteChar(u8 data)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	0f 92       	push	r0
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01
	if (mode == LtoR)
    24bc:	80 91 60 01 	lds	r24, 0x0160
    24c0:	88 23       	and	r24, r24
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <LCD_WriteChar+0x16>
    24c4:	40 c0       	rjmp	.+128    	; 0x2546 <LCD_WriteChar+0x96>
	{
		if (cursor_cell==20)
    24c6:	80 91 5f 01 	lds	r24, 0x015F
    24ca:	84 31       	cpi	r24, 0x14	; 20
    24cc:	b1 f5       	brne	.+108    	; 0x253a <LCD_WriteChar+0x8a>
		{
			if (cursor_line==LINE1)
    24ce:	80 91 5e 01 	lds	r24, 0x015E
    24d2:	88 23       	and	r24, r24
    24d4:	51 f4       	brne	.+20     	; 0x24ea <LCD_WriteChar+0x3a>
			{
				LCD_SETCURSOR(LINE2,0);
    24d6:	80 e4       	ldi	r24, 0x40	; 64
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE2;
    24de:	80 e4       	ldi	r24, 0x40	; 64
    24e0:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=0;
    24e4:	10 92 5f 01 	sts	0x015F, r1
    24e8:	28 c0       	rjmp	.+80     	; 0x253a <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE2)
    24ea:	80 91 5e 01 	lds	r24, 0x015E
    24ee:	80 34       	cpi	r24, 0x40	; 64
    24f0:	51 f4       	brne	.+20     	; 0x2506 <LCD_WriteChar+0x56>
			{
				LCD_SETCURSOR(LINE3,0);
    24f2:	84 e1       	ldi	r24, 0x14	; 20
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE3;
    24fa:	84 e1       	ldi	r24, 0x14	; 20
    24fc:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=0;
    2500:	10 92 5f 01 	sts	0x015F, r1
    2504:	1a c0       	rjmp	.+52     	; 0x253a <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE3)
    2506:	80 91 5e 01 	lds	r24, 0x015E
    250a:	84 31       	cpi	r24, 0x14	; 20
    250c:	51 f4       	brne	.+20     	; 0x2522 <LCD_WriteChar+0x72>
			{
				LCD_SETCURSOR(LINE4,0);
    250e:	84 e5       	ldi	r24, 0x54	; 84
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE4;
    2516:	84 e5       	ldi	r24, 0x54	; 84
    2518:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=0;
    251c:	10 92 5f 01 	sts	0x015F, r1
    2520:	0c c0       	rjmp	.+24     	; 0x253a <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE4)
    2522:	80 91 5e 01 	lds	r24, 0x015E
    2526:	84 35       	cpi	r24, 0x54	; 84
    2528:	41 f4       	brne	.+16     	; 0x253a <LCD_WriteChar+0x8a>
			{
				LCD_SETCURSOR(LINE1,0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE1;
    2532:	10 92 5e 01 	sts	0x015E, r1
				cursor_cell=0;
    2536:	10 92 5f 01 	sts	0x015F, r1
			}
		}
		cursor_cell++;
    253a:	80 91 5f 01 	lds	r24, 0x015F
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	80 93 5f 01 	sts	0x015F, r24
    2544:	43 c0       	rjmp	.+134    	; 0x25cc <LCD_WriteChar+0x11c>
	}
	else
	{
		if (cursor_cell<0)
    2546:	80 91 5f 01 	lds	r24, 0x015F
    254a:	88 23       	and	r24, r24
    254c:	d4 f5       	brge	.+116    	; 0x25c2 <LCD_WriteChar+0x112>
		{
			if (cursor_line==LINE1)
    254e:	80 91 5e 01 	lds	r24, 0x015E
    2552:	88 23       	and	r24, r24
    2554:	59 f4       	brne	.+22     	; 0x256c <LCD_WriteChar+0xbc>
			{
				LCD_SETCURSOR(LINE2,19);
    2556:	80 e4       	ldi	r24, 0x40	; 64
    2558:	63 e1       	ldi	r22, 0x13	; 19
    255a:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE2;
    255e:	80 e4       	ldi	r24, 0x40	; 64
    2560:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=19;
    2564:	83 e1       	ldi	r24, 0x13	; 19
    2566:	80 93 5f 01 	sts	0x015F, r24
    256a:	2b c0       	rjmp	.+86     	; 0x25c2 <LCD_WriteChar+0x112>
			}
			else if(cursor_line==LINE2)
    256c:	80 91 5e 01 	lds	r24, 0x015E
    2570:	80 34       	cpi	r24, 0x40	; 64
    2572:	59 f4       	brne	.+22     	; 0x258a <LCD_WriteChar+0xda>
			{
				LCD_SETCURSOR(LINE3,19);
    2574:	84 e1       	ldi	r24, 0x14	; 20
    2576:	63 e1       	ldi	r22, 0x13	; 19
    2578:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE3;
    257c:	84 e1       	ldi	r24, 0x14	; 20
    257e:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=19;
    2582:	83 e1       	ldi	r24, 0x13	; 19
    2584:	80 93 5f 01 	sts	0x015F, r24
    2588:	1c c0       	rjmp	.+56     	; 0x25c2 <LCD_WriteChar+0x112>
			}
			else if (cursor_line==LINE3)
    258a:	80 91 5e 01 	lds	r24, 0x015E
    258e:	84 31       	cpi	r24, 0x14	; 20
    2590:	59 f4       	brne	.+22     	; 0x25a8 <LCD_WriteChar+0xf8>
			{
				LCD_SETCURSOR(LINE4,19);
    2592:	84 e5       	ldi	r24, 0x54	; 84
    2594:	63 e1       	ldi	r22, 0x13	; 19
    2596:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE4;
    259a:	84 e5       	ldi	r24, 0x54	; 84
    259c:	80 93 5e 01 	sts	0x015E, r24
				cursor_cell=19;
    25a0:	83 e1       	ldi	r24, 0x13	; 19
    25a2:	80 93 5f 01 	sts	0x015F, r24
    25a6:	0d c0       	rjmp	.+26     	; 0x25c2 <LCD_WriteChar+0x112>
			}
			else if (cursor_line==LINE4)
    25a8:	80 91 5e 01 	lds	r24, 0x015E
    25ac:	84 35       	cpi	r24, 0x54	; 84
    25ae:	49 f4       	brne	.+18     	; 0x25c2 <LCD_WriteChar+0x112>
			{
				LCD_SETCURSOR(LINE1,19);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	63 e1       	ldi	r22, 0x13	; 19
    25b4:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				cursor_line=LINE1;
    25b8:	10 92 5e 01 	sts	0x015E, r1
				cursor_cell=19;
    25bc:	83 e1       	ldi	r24, 0x13	; 19
    25be:	80 93 5f 01 	sts	0x015F, r24
			}
		}
		cursor_cell--;
    25c2:	80 91 5f 01 	lds	r24, 0x015F
    25c6:	81 50       	subi	r24, 0x01	; 1
    25c8:	80 93 5f 01 	sts	0x015F, r24
	}
	WriteData(data);
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <WriteData>
	
}
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_WriteString>:

void LCD_WriteString(u8* s)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_WriteString+0x6>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; s[i] ; i++)
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <LCD_WriteString+0x30>
	{
		LCD_WriteChar(s[i]);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 0f       	add	r30, r18
    25fc:	f3 1f       	adc	r31, r19
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
	
}

void LCD_WriteString(u8* s)
{
	for (u8 i = 0; s[i] ; i++)
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	39 f7       	brne	.-50     	; 0x25ee <LCD_WriteString+0x14>
	{
		LCD_WriteChar(s[i]);
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	61 97       	sbiw	r28, 0x11	; 17
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	6e 87       	std	Y+14, r22	; 0x0e
    2646:	7f 87       	std	Y+15, r23	; 0x0f
    2648:	88 8b       	std	Y+16, r24	; 0x10
    264a:	99 8b       	std	Y+17, r25	; 0x11
	u8 str[12];
	u8 i=0;
    264c:	19 82       	std	Y+1, r1	; 0x01
	if(num==0)
    264e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2650:	9f 85       	ldd	r25, Y+15	; 0x0f
    2652:	a8 89       	ldd	r26, Y+16	; 0x10
    2654:	b9 89       	ldd	r27, Y+17	; 0x11
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	a1 05       	cpc	r26, r1
    265a:	b1 05       	cpc	r27, r1
    265c:	19 f4       	brne	.+6      	; 0x2664 <LCD_WriteNumber+0x38>
	{
		LCD_WriteChar('0');
    265e:	80 e3       	ldi	r24, 0x30	; 48
    2660:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
	}
	if(num<0)
    2664:	8e 85       	ldd	r24, Y+14	; 0x0e
    2666:	9f 85       	ldd	r25, Y+15	; 0x0f
    2668:	a8 89       	ldd	r26, Y+16	; 0x10
    266a:	b9 89       	ldd	r27, Y+17	; 0x11
    266c:	bb 23       	and	r27, r27
    266e:	0c f0       	brlt	.+2      	; 0x2672 <LCD_WriteNumber+0x46>
    2670:	41 c0       	rjmp	.+130    	; 0x26f4 <LCD_WriteNumber+0xc8>
	{
		LCD_WriteChar('-');
    2672:	8d e2       	ldi	r24, 0x2D	; 45
    2674:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
		num*=-1;
    2678:	8e 85       	ldd	r24, Y+14	; 0x0e
    267a:	9f 85       	ldd	r25, Y+15	; 0x0f
    267c:	a8 89       	ldd	r26, Y+16	; 0x10
    267e:	b9 89       	ldd	r27, Y+17	; 0x11
    2680:	b0 95       	com	r27
    2682:	a0 95       	com	r26
    2684:	90 95       	com	r25
    2686:	81 95       	neg	r24
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	af 4f       	sbci	r26, 0xFF	; 255
    268c:	bf 4f       	sbci	r27, 0xFF	; 255
    268e:	8e 87       	std	Y+14, r24	; 0x0e
    2690:	9f 87       	std	Y+15, r25	; 0x0f
    2692:	a8 8b       	std	Y+16, r26	; 0x10
    2694:	b9 8b       	std	Y+17, r27	; 0x11
    2696:	2e c0       	rjmp	.+92     	; 0x26f4 <LCD_WriteNumber+0xc8>
	}
	while(num)
	{
		str[i]=num%10 + '0';
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	08 2f       	mov	r16, r24
    269c:	10 e0       	ldi	r17, 0x00	; 0
    269e:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a2:	a8 89       	ldd	r26, Y+16	; 0x10
    26a4:	b9 89       	ldd	r27, Y+17	; 0x11
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 c5 18 	call	0x318a	; 0x318a <__divmodsi4>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	28 2f       	mov	r18, r24
    26bc:	20 5d       	subi	r18, 0xD0	; 208
    26be:	ce 01       	movw	r24, r28
    26c0:	02 96       	adiw	r24, 0x02	; 2
    26c2:	fc 01       	movw	r30, r24
    26c4:	e0 0f       	add	r30, r16
    26c6:	f1 1f       	adc	r31, r17
    26c8:	20 83       	st	Z, r18
		num/=10;
    26ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    26cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ce:	a8 89       	ldd	r26, Y+16	; 0x10
    26d0:	b9 89       	ldd	r27, Y+17	; 0x11
    26d2:	2a e0       	ldi	r18, 0x0A	; 10
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 c5 18 	call	0x318a	; 0x318a <__divmodsi4>
    26e2:	da 01       	movw	r26, r20
    26e4:	c9 01       	movw	r24, r18
    26e6:	8e 87       	std	Y+14, r24	; 0x0e
    26e8:	9f 87       	std	Y+15, r25	; 0x0f
    26ea:	a8 8b       	std	Y+16, r26	; 0x10
    26ec:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
	if(num<0)
	{
		LCD_WriteChar('-');
		num*=-1;
	}
	while(num)
    26f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    26f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    26f8:	a8 89       	ldd	r26, Y+16	; 0x10
    26fa:	b9 89       	ldd	r27, Y+17	; 0x11
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	a1 05       	cpc	r26, r1
    2700:	b1 05       	cpc	r27, r1
    2702:	51 f6       	brne	.-108    	; 0x2698 <LCD_WriteNumber+0x6c>
    2704:	11 c0       	rjmp	.+34     	; 0x2728 <LCD_WriteNumber+0xfc>
		num/=10;
		i++;
	}
	for (;i;i--)
	{
		LCD_WriteChar(str[i-1]);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9c 01       	movw	r18, r24
    270e:	21 50       	subi	r18, 0x01	; 1
    2710:	30 40       	sbci	r19, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	02 96       	adiw	r24, 0x02	; 2
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
	{
		str[i]=num%10 + '0';
		num/=10;
		i++;
	}
	for (;i;i--)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	81 50       	subi	r24, 0x01	; 1
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	88 23       	and	r24, r24
    272c:	61 f7       	brne	.-40     	; 0x2706 <LCD_WriteNumber+0xda>
	{
		LCD_WriteChar(str[i-1]);
	}
}
    272e:	61 96       	adiw	r28, 0x11	; 17
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <LCD_WriteBinary>:

void LCD_WriteBinary(u32 num)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	27 97       	sbiw	r28, 0x07	; 7
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	6b 83       	std	Y+3, r22	; 0x03
    275a:	7c 83       	std	Y+4, r23	; 0x04
    275c:	8d 83       	std	Y+5, r24	; 0x05
    275e:	9e 83       	std	Y+6, r25	; 0x06
	u8 f=0;
    2760:	1a 82       	std	Y+2, r1	; 0x02
	for(s8 i=31;i>=0;i--)
    2762:	8f e1       	ldi	r24, 0x1F	; 31
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	3d c0       	rjmp	.+122    	; 0x27e2 <LCD_WriteBinary+0x9e>
	{
		if ((f==0)&&(READ_BIT(num,i)?'1':'0')=='1')
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	88 23       	and	r24, r24
    276c:	b9 f4       	brne	.+46     	; 0x279c <LCD_WriteBinary+0x58>
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	33 27       	eor	r19, r19
    2774:	27 fd       	sbrc	r18, 7
    2776:	30 95       	com	r19
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	ad 81       	ldd	r26, Y+5	; 0x05
    277e:	be 81       	ldd	r27, Y+6	; 0x06
    2780:	02 2e       	mov	r0, r18
    2782:	04 c0       	rjmp	.+8      	; 0x278c <LCD_WriteBinary+0x48>
    2784:	b6 95       	lsr	r27
    2786:	a7 95       	ror	r26
    2788:	97 95       	ror	r25
    278a:	87 95       	ror	r24
    278c:	0a 94       	dec	r0
    278e:	d2 f7       	brpl	.-12     	; 0x2784 <LCD_WriteBinary+0x40>
    2790:	81 70       	andi	r24, 0x01	; 1
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	88 23       	and	r24, r24
    2796:	11 f0       	breq	.+4      	; 0x279c <LCD_WriteBinary+0x58>
		{
			f=1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (f==1)
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	e9 f4       	brne	.+58     	; 0x27dc <LCD_WriteBinary+0x98>
		{
			LCD_WriteChar(READ_BIT(num,i)?'1':'0');
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	33 27       	eor	r19, r19
    27a8:	27 fd       	sbrc	r18, 7
    27aa:	30 95       	com	r19
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	ad 81       	ldd	r26, Y+5	; 0x05
    27b2:	be 81       	ldd	r27, Y+6	; 0x06
    27b4:	02 2e       	mov	r0, r18
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <LCD_WriteBinary+0x7c>
    27b8:	b6 95       	lsr	r27
    27ba:	a7 95       	ror	r26
    27bc:	97 95       	ror	r25
    27be:	87 95       	ror	r24
    27c0:	0a 94       	dec	r0
    27c2:	d2 f7       	brpl	.-12     	; 0x27b8 <LCD_WriteBinary+0x74>
    27c4:	81 70       	andi	r24, 0x01	; 1
    27c6:	90 70       	andi	r25, 0x00	; 0
    27c8:	88 23       	and	r24, r24
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <LCD_WriteBinary+0x8e>
    27cc:	81 e3       	ldi	r24, 0x31	; 49
    27ce:	8f 83       	std	Y+7, r24	; 0x07
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <LCD_WriteBinary+0x92>
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    27d6:	8f 81       	ldd	r24, Y+7	; 0x07
    27d8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
}

void LCD_WriteBinary(u32 num)
{
	u8 f=0;
	for(s8 i=31;i>=0;i--)
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	88 23       	and	r24, r24
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <LCD_WriteBinary+0xa6>
    27e8:	bf cf       	rjmp	.-130    	; 0x2768 <LCD_WriteBinary+0x24>
		{
			LCD_WriteChar(READ_BIT(num,i)?'1':'0');
		}
		
	}
}
    27ea:	27 96       	adiw	r28, 0x07	; 7
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <LCD_WriteHex>:

void LCD_WriteHex(u32 num)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <LCD_WriteHex+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LCD_WriteHex+0x8>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <LCD_WriteHex+0xa>
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	6b 83       	std	Y+3, r22	; 0x03
    280c:	7c 83       	std	Y+4, r23	; 0x04
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	9e 83       	std	Y+6, r25	; 0x06
	u8 f=0;
    2812:	1a 82       	std	Y+2, r1	; 0x02
	LCD_WriteChar('0');
    2814:	80 e3       	ldi	r24, 0x30	; 48
    2816:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
	LCD_WriteChar('x');
    281a:	88 e7       	ldi	r24, 0x78	; 120
    281c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
	for(s8 i = 28; i>=0 ; i-=4)
    2820:	8c e1       	ldi	r24, 0x1C	; 28
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	90 c0       	rjmp	.+288    	; 0x2946 <LCD_WriteHex+0x14a>
	{
		if (num>>i)
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	33 27       	eor	r19, r19
    282c:	27 fd       	sbrc	r18, 7
    282e:	30 95       	com	r19
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	ad 81       	ldd	r26, Y+5	; 0x05
    2836:	be 81       	ldd	r27, Y+6	; 0x06
    2838:	02 2e       	mov	r0, r18
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <LCD_WriteHex+0x48>
    283c:	b6 95       	lsr	r27
    283e:	a7 95       	ror	r26
    2840:	97 95       	ror	r25
    2842:	87 95       	ror	r24
    2844:	0a 94       	dec	r0
    2846:	d2 f7       	brpl	.-12     	; 0x283c <LCD_WriteHex+0x40>
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	a1 05       	cpc	r26, r1
    284c:	b1 05       	cpc	r27, r1
    284e:	11 f0       	breq	.+4      	; 0x2854 <LCD_WriteHex+0x58>
		{
			f=1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (f)
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	88 23       	and	r24, r24
    2858:	09 f4       	brne	.+2      	; 0x285c <LCD_WriteHex+0x60>
    285a:	3d c0       	rjmp	.+122    	; 0x28d6 <LCD_WriteHex+0xda>
		{
			if((num>>i)>9)
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	28 2f       	mov	r18, r24
    2860:	33 27       	eor	r19, r19
    2862:	27 fd       	sbrc	r18, 7
    2864:	30 95       	com	r19
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	ad 81       	ldd	r26, Y+5	; 0x05
    286c:	be 81       	ldd	r27, Y+6	; 0x06
    286e:	02 2e       	mov	r0, r18
    2870:	04 c0       	rjmp	.+8      	; 0x287a <LCD_WriteHex+0x7e>
    2872:	b6 95       	lsr	r27
    2874:	a7 95       	ror	r26
    2876:	97 95       	ror	r25
    2878:	87 95       	ror	r24
    287a:	0a 94       	dec	r0
    287c:	d2 f7       	brpl	.-12     	; 0x2872 <LCD_WriteHex+0x76>
    287e:	8a 30       	cpi	r24, 0x0A	; 10
    2880:	91 05       	cpc	r25, r1
    2882:	a1 05       	cpc	r26, r1
    2884:	b1 05       	cpc	r27, r1
    2886:	a0 f0       	brcs	.+40     	; 0x28b0 <LCD_WriteHex+0xb4>
			{
				LCD_WriteChar((num>>i)+55);
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	28 2f       	mov	r18, r24
    288c:	33 27       	eor	r19, r19
    288e:	27 fd       	sbrc	r18, 7
    2890:	30 95       	com	r19
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	ad 81       	ldd	r26, Y+5	; 0x05
    2898:	be 81       	ldd	r27, Y+6	; 0x06
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <LCD_WriteHex+0xa8>
    289c:	b6 95       	lsr	r27
    289e:	a7 95       	ror	r26
    28a0:	97 95       	ror	r25
    28a2:	87 95       	ror	r24
    28a4:	2a 95       	dec	r18
    28a6:	d2 f7       	brpl	.-12     	; 0x289c <LCD_WriteHex+0xa0>
    28a8:	89 5c       	subi	r24, 0xC9	; 201
    28aa:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
    28ae:	13 c0       	rjmp	.+38     	; 0x28d6 <LCD_WriteHex+0xda>
			}
			else
			{
				LCD_WriteChar((num>>i)+'0');
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	28 2f       	mov	r18, r24
    28b4:	33 27       	eor	r19, r19
    28b6:	27 fd       	sbrc	r18, 7
    28b8:	30 95       	com	r19
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	ad 81       	ldd	r26, Y+5	; 0x05
    28c0:	be 81       	ldd	r27, Y+6	; 0x06
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <LCD_WriteHex+0xd0>
    28c4:	b6 95       	lsr	r27
    28c6:	a7 95       	ror	r26
    28c8:	97 95       	ror	r25
    28ca:	87 95       	ror	r24
    28cc:	2a 95       	dec	r18
    28ce:	d2 f7       	brpl	.-12     	; 0x28c4 <LCD_WriteHex+0xc8>
    28d0:	80 5d       	subi	r24, 0xD0	; 208
    28d2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_WriteChar>
			}
		}
		
		num=num<<(32-i);
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	28 2f       	mov	r18, r24
    28da:	33 27       	eor	r19, r19
    28dc:	27 fd       	sbrc	r18, 7
    28de:	30 95       	com	r19
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	ac 01       	movw	r20, r24
    28e6:	42 1b       	sub	r20, r18
    28e8:	53 0b       	sbc	r21, r19
    28ea:	9a 01       	movw	r18, r20
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	ad 81       	ldd	r26, Y+5	; 0x05
    28f2:	be 81       	ldd	r27, Y+6	; 0x06
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <LCD_WriteHex+0x102>
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	aa 1f       	adc	r26, r26
    28fc:	bb 1f       	adc	r27, r27
    28fe:	2a 95       	dec	r18
    2900:	d2 f7       	brpl	.-12     	; 0x28f6 <LCD_WriteHex+0xfa>
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	ad 83       	std	Y+5, r26	; 0x05
    2908:	be 83       	std	Y+6, r27	; 0x06
		num=num>>(32-i);
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	28 2f       	mov	r18, r24
    290e:	33 27       	eor	r19, r19
    2910:	27 fd       	sbrc	r18, 7
    2912:	30 95       	com	r19
    2914:	80 e2       	ldi	r24, 0x20	; 32
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	ac 01       	movw	r20, r24
    291a:	42 1b       	sub	r20, r18
    291c:	53 0b       	sbc	r21, r19
    291e:	9a 01       	movw	r18, r20
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	ad 81       	ldd	r26, Y+5	; 0x05
    2926:	be 81       	ldd	r27, Y+6	; 0x06
    2928:	02 2e       	mov	r0, r18
    292a:	04 c0       	rjmp	.+8      	; 0x2934 <LCD_WriteHex+0x138>
    292c:	b6 95       	lsr	r27
    292e:	a7 95       	ror	r26
    2930:	97 95       	ror	r25
    2932:	87 95       	ror	r24
    2934:	0a 94       	dec	r0
    2936:	d2 f7       	brpl	.-12     	; 0x292c <LCD_WriteHex+0x130>
    2938:	8b 83       	std	Y+3, r24	; 0x03
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	ad 83       	std	Y+5, r26	; 0x05
    293e:	be 83       	std	Y+6, r27	; 0x06
void LCD_WriteHex(u32 num)
{
	u8 f=0;
	LCD_WriteChar('0');
	LCD_WriteChar('x');
	for(s8 i = 28; i>=0 ; i-=4)
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	84 50       	subi	r24, 0x04	; 4
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	88 23       	and	r24, r24
    294a:	0c f0       	brlt	.+2      	; 0x294e <LCD_WriteHex+0x152>
    294c:	6c cf       	rjmp	.-296    	; 0x2826 <LCD_WriteHex+0x2a>
		
		num=num<<(32-i);
		num=num>>(32-i);
	}
	
}
    294e:	26 96       	adiw	r28, 0x06	; 6
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <Insert_Char>:

void Insert_Char(u8 adress,u8* Character)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <Insert_Char+0x6>
    2966:	00 d0       	rcall	.+0      	; 0x2968 <Insert_Char+0x8>
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	7d 83       	std	Y+5, r23	; 0x05
    2972:	6c 83       	std	Y+4, r22	; 0x04
	if (mode == LtoR)
    2974:	80 91 60 01 	lds	r24, 0x0160
    2978:	88 23       	and	r24, r24
    297a:	01 f5       	brne	.+64     	; 0x29bc <Insert_Char+0x5c>
	{
		WriteIns(64+adress*8);
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	08 96       	adiw	r24, 0x08	; 8
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
		for (u8 i=0 ; i<8 ; i++)
    2994:	1a 82       	std	Y+2, r1	; 0x02
    2996:	0e c0       	rjmp	.+28     	; 0x29b4 <Insert_Char+0x54>
		{
			WriteData(Character[i]);
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	80 81       	ld	r24, Z
    29aa:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <WriteData>
void Insert_Char(u8 adress,u8* Character)
{
	if (mode == LtoR)
	{
		WriteIns(64+adress*8);
		for (u8 i=0 ; i<8 ; i++)
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	8a 83       	std	Y+2, r24	; 0x02
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	88 30       	cpi	r24, 0x08	; 8
    29b8:	78 f3       	brcs	.-34     	; 0x2998 <Insert_Char+0x38>
    29ba:	25 c0       	rjmp	.+74     	; 0x2a06 <Insert_Char+0xa6>
			WriteData(Character[i]);
		}
	}
	else
	{
		WriteIns(64+((adress+1)*8)-1);
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	09 96       	adiw	r24, 0x09	; 9
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	81 50       	subi	r24, 0x01	; 1
    29d2:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteIns>
		for (u8 i=0 ; i<8 ; i++)
    29d6:	19 82       	std	Y+1, r1	; 0x01
    29d8:	13 c0       	rjmp	.+38     	; 0x2a00 <Insert_Char+0xa0>
		{
			WriteData(Character[7-i]);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	87 e0       	ldi	r24, 0x07	; 7
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	82 1b       	sub	r24, r18
    29e6:	93 0b       	sbc	r25, r19
    29e8:	9c 01       	movw	r18, r24
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	fc 01       	movw	r30, r24
    29f0:	e2 0f       	add	r30, r18
    29f2:	f3 1f       	adc	r31, r19
    29f4:	80 81       	ld	r24, Z
    29f6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <WriteData>
		}
	}
	else
	{
		WriteIns(64+((adress+1)*8)-1);
		for (u8 i=0 ; i<8 ; i++)
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 30       	cpi	r24, 0x08	; 8
    2a04:	50 f3       	brcs	.-44     	; 0x29da <Insert_Char+0x7a>
		{
			WriteData(Character[7-i]);
		}
	}
}
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <Array_Fill>:

void Array_Fill(u8* arr,u8 p0,u8 p1,u8 p2,u8 p3,u8 p4,u8 p5,u8 p6,u8 p7)
{
    2a16:	8f 92       	push	r8
    2a18:	af 92       	push	r10
    2a1a:	cf 92       	push	r12
    2a1c:	ef 92       	push	r14
    2a1e:	0f 93       	push	r16
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	2a 97       	sbiw	r28, 0x0a	; 10
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	6b 83       	std	Y+3, r22	; 0x03
    2a3a:	4c 83       	std	Y+4, r20	; 0x04
    2a3c:	2d 83       	std	Y+5, r18	; 0x05
    2a3e:	0e 83       	std	Y+6, r16	; 0x06
    2a40:	ef 82       	std	Y+7, r14	; 0x07
    2a42:	c8 86       	std	Y+8, r12	; 0x08
    2a44:	a9 86       	std	Y+9, r10	; 0x09
    2a46:	8a 86       	std	Y+10, r8	; 0x0a
	arr[0]=p0;
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	80 83       	st	Z, r24
	arr[1]=p1;
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	fc 01       	movw	r30, r24
    2a56:	31 96       	adiw	r30, 0x01	; 1
    2a58:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5a:	80 83       	st	Z, r24
	arr[2]=p2;
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	fc 01       	movw	r30, r24
    2a62:	32 96       	adiw	r30, 0x02	; 2
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	80 83       	st	Z, r24
	arr[3]=p3;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	33 96       	adiw	r30, 0x03	; 3
    2a70:	8e 81       	ldd	r24, Y+6	; 0x06
    2a72:	80 83       	st	Z, r24
	arr[4]=p4;
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	fc 01       	movw	r30, r24
    2a7a:	34 96       	adiw	r30, 0x04	; 4
    2a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a7e:	80 83       	st	Z, r24
	arr[5]=p5;
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	fc 01       	movw	r30, r24
    2a86:	35 96       	adiw	r30, 0x05	; 5
    2a88:	88 85       	ldd	r24, Y+8	; 0x08
    2a8a:	80 83       	st	Z, r24
	arr[6]=p6;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	fc 01       	movw	r30, r24
    2a92:	36 96       	adiw	r30, 0x06	; 6
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	80 83       	st	Z, r24
	arr[7]=p7;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	37 96       	adiw	r30, 0x07	; 7
    2aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa2:	80 83       	st	Z, r24
}
    2aa4:	2a 96       	adiw	r28, 0x0a	; 10
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	0f 91       	pop	r16
    2ab6:	ef 90       	pop	r14
    2ab8:	cf 90       	pop	r12
    2aba:	af 90       	pop	r10
    2abc:	8f 90       	pop	r8
    2abe:	08 95       	ret

00002ac0 <main>:
u8 UART_End_Flage = 0 ;
u8 UART_USER_ID;
u8 UART_USER_Pass;
u16 UART_OPERATION;

int main(){
    2ac0:	1f 93       	push	r17
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	ad 97       	sbiw	r28, 0x2d	; 45
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61

	DIO_Init();
    2ad6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_Init>
	LCD_init();
    2ada:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_init>
	GIE_Enable();
    2ade:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <GIE_Enable>
	USART_Init(9600);
    2ae2:	60 e8       	ldi	r22, 0x80	; 128
    2ae4:	75 e2       	ldi	r23, 0x25	; 37
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_Init>
	SPI_init();
    2aee:	0e 94 1f 06 	call	0xc3e	; 0xc3e <SPI_init>


	while(1)
	{
		if ( UART_End_Flage == 0 )
    2af2:	80 91 62 01 	lds	r24, 0x0162
    2af6:	88 23       	and	r24, r24
    2af8:	09 f0       	breq	.+2      	; 0x2afc <main+0x3c>
    2afa:	3d c2       	rjmp	.+1146   	; 0x2f76 <main+0x4b6>
		{
			UART_End_Flage = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	80 93 62 01 	sts	0x0162, r24
			LCD_Clear();
    2b02:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
			LCD_WriteString("CHOOSE OPERATION :");
    2b06:	80 e6       	ldi	r24, 0x60	; 96
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
			LCD_SETCURSOR(LINE2,0);
    2b0e:	80 e4       	ldi	r24, 0x40	; 64
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
			LCD_WriteString("1.ADD NEW USER");
    2b16:	83 e7       	ldi	r24, 0x73	; 115
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
			LCD_SETCURSOR(LINE3,0);
    2b1e:	84 e1       	ldi	r24, 0x14	; 20
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
			LCD_WriteString("2.DELETE USER");
    2b26:	82 e8       	ldi	r24, 0x82	; 130
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
			UART_OPERATION = Uart_ReadPolling()-'0';
    2b2e:	0e 94 10 06 	call	0xc20	; 0xc20 <Uart_ReadPolling>
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	c0 97       	sbiw	r24, 0x30	; 48
    2b38:	90 93 65 01 	sts	0x0165, r25
    2b3c:	80 93 64 01 	sts	0x0164, r24

			if(ADD_USER==UART_OPERATION)
    2b40:	80 91 64 01 	lds	r24, 0x0164
    2b44:	90 91 65 01 	lds	r25, 0x0165
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <main+0x90>
    2b4e:	57 c1       	rjmp	.+686    	; 0x2dfe <main+0x33e>
			{
				UART_USER_ID=0;
    2b50:	10 92 66 01 	sts	0x0166, r1
				UART_USER_Pass=0;
    2b54:	10 92 63 01 	sts	0x0163, r1
				LCD_Clear();
    2b58:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
				LCD_WriteString("ENTER NEW ID");
    2b5c:	80 e9       	ldi	r24, 0x90	; 144
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
				LCD_SETCURSOR(LINE2,0);
    2b64:	80 e4       	ldi	r24, 0x40	; 64
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>

				for(u8 i=0;i<3;i++)
    2b6c:	1d a6       	std	Y+45, r1	; 0x2d
    2b6e:	99 c0       	rjmp	.+306    	; 0x2ca2 <main+0x1e2>
				{
					UART_USER_ID = UART_USER_ID*10+(Uart_ReadPolling()-'0');
    2b70:	80 91 66 01 	lds	r24, 0x0166
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 01       	movw	r18, r24
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	c9 01       	movw	r24, r18
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	82 0f       	add	r24, r18
    2b8a:	93 1f       	adc	r25, r19
    2b8c:	18 2f       	mov	r17, r24
    2b8e:	0e 94 10 06 	call	0xc20	; 0xc20 <Uart_ReadPolling>
    2b92:	81 0f       	add	r24, r17
    2b94:	80 53       	subi	r24, 0x30	; 48
    2b96:	80 93 66 01 	sts	0x0166, r24
					LCD_WriteNumber(UART_USER_ID%10);
    2b9a:	80 91 66 01 	lds	r24, 0x0166
    2b9e:	9a e0       	ldi	r25, 0x0A	; 10
    2ba0:	69 2f       	mov	r22, r25
    2ba2:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodqi4>
    2ba6:	89 2f       	mov	r24, r25
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_WriteNumber>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a8 ec       	ldi	r26, 0xC8	; 200
    2bbe:	b2 e4       	ldi	r27, 0x42	; 66
    2bc0:	8f a3       	std	Y+39, r24	; 0x27
    2bc2:	98 a7       	std	Y+40, r25	; 0x28
    2bc4:	a9 a7       	std	Y+41, r26	; 0x29
    2bc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bca:	78 a5       	ldd	r23, Y+40	; 0x28
    2bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a ef       	ldi	r20, 0xFA	; 250
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8b a3       	std	Y+35, r24	; 0x23
    2be2:	9c a3       	std	Y+36, r25	; 0x24
    2be4:	ad a3       	std	Y+37, r26	; 0x25
    2be6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bea:	7c a1       	ldd	r23, Y+36	; 0x24
    2bec:	8d a1       	ldd	r24, Y+37	; 0x25
    2bee:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e8       	ldi	r20, 0x80	; 128
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfc:	88 23       	and	r24, r24
    2bfe:	2c f4       	brge	.+10     	; 0x2c0a <main+0x14a>
		__ticks = 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	3f c0       	rjmp	.+126    	; 0x2c88 <main+0x1c8>
	else if (__tmp > 65535)
    2c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c10:	9e a1       	ldd	r25, Y+38	; 0x26
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	4f e7       	ldi	r20, 0x7F	; 127
    2c18:	57 e4       	ldi	r21, 0x47	; 71
    2c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1e:	18 16       	cp	r1, r24
    2c20:	4c f5       	brge	.+82     	; 0x2c74 <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c22:	6f a1       	ldd	r22, Y+39	; 0x27
    2c24:	78 a5       	ldd	r23, Y+40	; 0x28
    2c26:	89 a5       	ldd	r24, Y+41	; 0x29
    2c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9a a3       	std	Y+34, r25	; 0x22
    2c48:	89 a3       	std	Y+33, r24	; 0x21
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <main+0x1aa>
    2c4c:	88 ec       	ldi	r24, 0xC8	; 200
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	98 a3       	std	Y+32, r25	; 0x20
    2c52:	8f 8f       	std	Y+31, r24	; 0x1f
    2c54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c56:	98 a1       	ldd	r25, Y+32	; 0x20
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <main+0x198>
    2c5c:	98 a3       	std	Y+32, r25	; 0x20
    2c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c60:	89 a1       	ldd	r24, Y+33	; 0x21
    2c62:	9a a1       	ldd	r25, Y+34	; 0x22
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	69 f7       	brne	.-38     	; 0x2c4c <main+0x18c>
    2c72:	14 c0       	rjmp	.+40     	; 0x2c9c <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <main+0x1d4>
    2c98:	9e 8f       	std	Y+30, r25	; 0x1e
    2c9a:	8d 8f       	std	Y+29, r24	; 0x1d
				UART_USER_Pass=0;
				LCD_Clear();
				LCD_WriteString("ENTER NEW ID");
				LCD_SETCURSOR(LINE2,0);

				for(u8 i=0;i<3;i++)
    2c9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ca0:	8d a7       	std	Y+45, r24	; 0x2d
    2ca2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ca4:	83 30       	cpi	r24, 0x03	; 3
    2ca6:	08 f4       	brcc	.+2      	; 0x2caa <main+0x1ea>
    2ca8:	63 cf       	rjmp	.-314    	; 0x2b70 <main+0xb0>
					UART_USER_ID = UART_USER_ID*10+(Uart_ReadPolling()-'0');
					LCD_WriteNumber(UART_USER_ID%10);
					_delay_ms(100);
				}

				LCD_Clear();
    2caa:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
				LCD_WriteString("ENTER NEW PASSWORD");
    2cae:	8d e9       	ldi	r24, 0x9D	; 157
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
				LCD_SETCURSOR(LINE2,0);
    2cb6:	80 e4       	ldi	r24, 0x40	; 64
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				for(u8 i=0;i<3;i++)
    2cbe:	1c a6       	std	Y+44, r1	; 0x2c
    2cc0:	99 c0       	rjmp	.+306    	; 0x2df4 <main+0x334>
				{
					UART_USER_Pass = UART_USER_Pass *10+(Uart_ReadPolling()-'0');
    2cc2:	80 91 63 01 	lds	r24, 0x0163
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c 01       	movw	r18, r24
    2ccc:	22 0f       	add	r18, r18
    2cce:	33 1f       	adc	r19, r19
    2cd0:	c9 01       	movw	r24, r18
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	82 0f       	add	r24, r18
    2cdc:	93 1f       	adc	r25, r19
    2cde:	18 2f       	mov	r17, r24
    2ce0:	0e 94 10 06 	call	0xc20	; 0xc20 <Uart_ReadPolling>
    2ce4:	81 0f       	add	r24, r17
    2ce6:	80 53       	subi	r24, 0x30	; 48
    2ce8:	80 93 63 01 	sts	0x0163, r24
					LCD_WriteNumber(UART_USER_Pass%10);
    2cec:	80 91 63 01 	lds	r24, 0x0163
    2cf0:	9a e0       	ldi	r25, 0x0A	; 10
    2cf2:	69 2f       	mov	r22, r25
    2cf4:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodqi4>
    2cf8:	89 2f       	mov	r24, r25
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 e0       	ldi	r26, 0x00	; 0
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_WriteNumber>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d10:	b2 e4       	ldi	r27, 0x42	; 66
    2d12:	89 8f       	std	Y+25, r24	; 0x19
    2d14:	9a 8f       	std	Y+26, r25	; 0x1a
    2d16:	ab 8f       	std	Y+27, r26	; 0x1b
    2d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8d 8b       	std	Y+21, r24	; 0x15
    2d34:	9e 8b       	std	Y+22, r25	; 0x16
    2d36:	af 8b       	std	Y+23, r26	; 0x17
    2d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	98 8d       	ldd	r25, Y+24	; 0x18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <main+0x29c>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9c 8b       	std	Y+20, r25	; 0x14
    2d58:	8b 8b       	std	Y+19, r24	; 0x13
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <main+0x31a>
	else if (__tmp > 65535)
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	69 8d       	ldd	r22, Y+25	; 0x19
    2d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <main+0x2fc>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9a 8b       	std	Y+18, r25	; 0x12
    2da4:	89 8b       	std	Y+17, r24	; 0x11
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	9a 89       	ldd	r25, Y+18	; 0x12
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <main+0x2ea>
    2dae:	9a 8b       	std	Y+18, r25	; 0x12
    2db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <main+0x2de>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	8b 89       	ldd	r24, Y+19	; 0x13
    2ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dde:	98 8b       	std	Y+16, r25	; 0x10
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <main+0x326>
    2dea:	98 8b       	std	Y+16, r25	; 0x10
    2dec:	8f 87       	std	Y+15, r24	; 0x0f
				}

				LCD_Clear();
				LCD_WriteString("ENTER NEW PASSWORD");
				LCD_SETCURSOR(LINE2,0);
				for(u8 i=0;i<3;i++)
    2dee:	8c a5       	ldd	r24, Y+44	; 0x2c
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	8c a7       	std	Y+44, r24	; 0x2c
    2df4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2df6:	83 30       	cpi	r24, 0x03	; 3
    2df8:	08 f4       	brcc	.+2      	; 0x2dfc <main+0x33c>
    2dfa:	63 cf       	rjmp	.-314    	; 0x2cc2 <main+0x202>
    2dfc:	7a ce       	rjmp	.-780    	; 0x2af2 <main+0x32>
					UART_USER_Pass = UART_USER_Pass *10+(Uart_ReadPolling()-'0');
					LCD_WriteNumber(UART_USER_Pass%10);
					_delay_ms(100);
				}
			}
			else if(DELETE_USER==UART_OPERATION)
    2dfe:	80 91 64 01 	lds	r24, 0x0164
    2e02:	90 91 65 01 	lds	r25, 0x0165
    2e06:	82 30       	cpi	r24, 0x02	; 2
    2e08:	91 05       	cpc	r25, r1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <main+0x34e>
    2e0c:	72 ce       	rjmp	.-796    	; 0x2af2 <main+0x32>
			{
				UART_USER_ID=0;
    2e0e:	10 92 66 01 	sts	0x0166, r1
				LCD_Clear();
    2e12:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
				LCD_WriteString("ENTER ID TO BE");
    2e16:	80 eb       	ldi	r24, 0xB0	; 176
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
				LCD_SETCURSOR(LINE2,0);
    2e1e:	80 e4       	ldi	r24, 0x40	; 64
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				LCD_WriteString("DELETED");
    2e26:	8f eb       	ldi	r24, 0xBF	; 191
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
				LCD_SETCURSOR(LINE3,0);
    2e2e:	84 e1       	ldi	r24, 0x14	; 20
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_SETCURSOR>
				for(u8 i=0;i<3;i++)
    2e36:	1b a6       	std	Y+43, r1	; 0x2b
    2e38:	99 c0       	rjmp	.+306    	; 0x2f6c <main+0x4ac>
				{
					UART_USER_ID = UART_USER_ID*10+(Uart_ReadPolling()-'0');
    2e3a:	80 91 66 01 	lds	r24, 0x0166
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9c 01       	movw	r18, r24
    2e44:	22 0f       	add	r18, r18
    2e46:	33 1f       	adc	r19, r19
    2e48:	c9 01       	movw	r24, r18
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	82 0f       	add	r24, r18
    2e54:	93 1f       	adc	r25, r19
    2e56:	18 2f       	mov	r17, r24
    2e58:	0e 94 10 06 	call	0xc20	; 0xc20 <Uart_ReadPolling>
    2e5c:	81 0f       	add	r24, r17
    2e5e:	80 53       	subi	r24, 0x30	; 48
    2e60:	80 93 66 01 	sts	0x0166, r24
					LCD_WriteNumber(UART_USER_ID%10);
    2e64:	80 91 66 01 	lds	r24, 0x0166
    2e68:	9a e0       	ldi	r25, 0x0A	; 10
    2e6a:	69 2f       	mov	r22, r25
    2e6c:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodqi4>
    2e70:	89 2f       	mov	r24, r25
    2e72:	88 2f       	mov	r24, r24
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	a0 e0       	ldi	r26, 0x00	; 0
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_WriteNumber>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a8 ec       	ldi	r26, 0xC8	; 200
    2e88:	b2 e4       	ldi	r27, 0x42	; 66
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
    2e8c:	9c 87       	std	Y+12, r25	; 0x0c
    2e8e:	ad 87       	std	Y+13, r26	; 0x0d
    2e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8f 83       	std	Y+7, r24	; 0x07
    2eac:	98 87       	std	Y+8, r25	; 0x08
    2eae:	a9 87       	std	Y+9, r26	; 0x09
    2eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <main+0x414>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	3f c0       	rjmp	.+126    	; 0x2f52 <main+0x492>
	else if (__tmp > 65535)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	4c f5       	brge	.+82     	; 0x2f3e <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <main+0x474>
    2f16:	88 ec       	ldi	r24, 0xC8	; 200
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <main+0x462>
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	69 f7       	brne	.-38     	; 0x2f16 <main+0x456>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <main+0x49e>
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
				LCD_Clear();
				LCD_WriteString("ENTER ID TO BE");
				LCD_SETCURSOR(LINE2,0);
				LCD_WriteString("DELETED");
				LCD_SETCURSOR(LINE3,0);
				for(u8 i=0;i<3;i++)
    2f66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f68:	8f 5f       	subi	r24, 0xFF	; 255
    2f6a:	8b a7       	std	Y+43, r24	; 0x2b
    2f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f6e:	83 30       	cpi	r24, 0x03	; 3
    2f70:	08 f4       	brcc	.+2      	; 0x2f74 <main+0x4b4>
    2f72:	63 cf       	rjmp	.-314    	; 0x2e3a <main+0x37a>
    2f74:	be cd       	rjmp	.-1156   	; 0x2af2 <main+0x32>
					_delay_ms(100);
				}

			}
		}
		else if( UART_End_Flage == 1 )
    2f76:	80 91 62 01 	lds	r24, 0x0162
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <main+0x4c0>
    2f7e:	b9 cd       	rjmp	.-1166   	; 0x2af2 <main+0x32>
		{
			DIO_WritePin(EXTI_send , HIGH);
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	61 e0       	ldi	r22, 0x01	; 1
    2f84:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
			while(DIO_ReadPin(START_CHAT) == 0);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_ReadPin>
    2f8e:	88 23       	and	r24, r24
    2f90:	d9 f3       	breq	.-10     	; 0x2f88 <main+0x4c8>
			SPI_Connection_Start();
    2f92:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <SPI_Connection_Start>
			UART_End_Flage = 0;
    2f96:	10 92 62 01 	sts	0x0162, r1
    2f9a:	ab cd       	rjmp	.-1194   	; 0x2af2 <main+0x32>

00002f9c <SPI_Connection_Start>:
		}
	}
	return 0;
}

void SPI_Connection_Start(void){
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	2e 97       	sbiw	r28, 0x0e	; 14
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61

	DIO_WritePin(PINA0 , LOW);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_WritePin>
	SPI_ACK = SPI_Transceive(UART_OPERATION);
    2fb8:	80 91 64 01 	lds	r24, 0x0164
    2fbc:	90 91 65 01 	lds	r25, 0x0165
    2fc0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <SPI_Transceive>
    2fc4:	80 93 61 01 	sts	0x0161, r24

	if(SPI_ACK == 1 )
    2fc8:	80 91 61 01 	lds	r24, 0x0161
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	31 f4       	brne	.+12     	; 0x2fdc <SPI_Connection_Start+0x40>
	{
		LCD_Clear();
    2fd0:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
		LCD_WriteString("Operation has been sent !");
    2fd4:	87 ec       	ldi	r24, 0xC7	; 199
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
	}

	SPI_ACK = SPI_Transceive(UART_USER_ID);
    2fdc:	80 91 66 01 	lds	r24, 0x0166
    2fe0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <SPI_Transceive>
    2fe4:	80 93 61 01 	sts	0x0161, r24

		if(SPI_ACK == 2 )
    2fe8:	80 91 61 01 	lds	r24, 0x0161
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	69 f4       	brne	.+26     	; 0x300a <SPI_Connection_Start+0x6e>
		{
			if((DELETE_USER==UART_OPERATION))
    2ff0:	80 91 64 01 	lds	r24, 0x0164
    2ff4:	90 91 65 01 	lds	r25, 0x0165
    2ff8:	82 30       	cpi	r24, 0x02	; 2
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	31 f4       	brne	.+12     	; 0x300a <SPI_Connection_Start+0x6e>
				{
					LCD_Clear();
    2ffe:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
					LCD_WriteString("ID HAS BEEN SENT !");
    3002:	81 ee       	ldi	r24, 0xE1	; 225
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
				}
		}

	if(ADD_USER==UART_OPERATION)
    300a:	80 91 64 01 	lds	r24, 0x0164
    300e:	90 91 65 01 	lds	r25, 0x0165
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	91 05       	cpc	r25, r1
    3016:	81 f4       	brne	.+32     	; 0x3038 <SPI_Connection_Start+0x9c>
	{
		SPI_ACK = SPI_Transceive(UART_USER_Pass);
    3018:	80 91 63 01 	lds	r24, 0x0163
    301c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <SPI_Transceive>
    3020:	80 93 61 01 	sts	0x0161, r24

		if(SPI_ACK == 3 )
    3024:	80 91 61 01 	lds	r24, 0x0161
    3028:	83 30       	cpi	r24, 0x03	; 3
    302a:	31 f4       	brne	.+12     	; 0x3038 <SPI_Connection_Start+0x9c>
		{
			LCD_Clear();
    302c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_Clear>
			LCD_WriteString("ID AND PASSWORD HAVEBEEN SENT !");
    3030:	84 ef       	ldi	r24, 0xF4	; 244
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_WriteString>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a8 e4       	ldi	r26, 0x48	; 72
    303e:	b4 e4       	ldi	r27, 0x44	; 68
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <SPI_Connection_Start+0xee>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <SPI_Connection_Start+0x16c>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <SPI_Connection_Start+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <SPI_Connection_Start+0x14e>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <SPI_Connection_Start+0x13c>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <SPI_Connection_Start+0x130>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <SPI_Connection_Start+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <SPI_Connection_Start+0x178>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(800);
}
    311c:	2e 96       	adiw	r28, 0x0e	; 14
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <__udivmodqi4>:
    312e:	99 1b       	sub	r25, r25
    3130:	79 e0       	ldi	r23, 0x09	; 9
    3132:	04 c0       	rjmp	.+8      	; 0x313c <__udivmodqi4_ep>

00003134 <__udivmodqi4_loop>:
    3134:	99 1f       	adc	r25, r25
    3136:	96 17       	cp	r25, r22
    3138:	08 f0       	brcs	.+2      	; 0x313c <__udivmodqi4_ep>
    313a:	96 1b       	sub	r25, r22

0000313c <__udivmodqi4_ep>:
    313c:	88 1f       	adc	r24, r24
    313e:	7a 95       	dec	r23
    3140:	c9 f7       	brne	.-14     	; 0x3134 <__udivmodqi4_loop>
    3142:	80 95       	com	r24
    3144:	08 95       	ret

00003146 <__udivmodsi4>:
    3146:	a1 e2       	ldi	r26, 0x21	; 33
    3148:	1a 2e       	mov	r1, r26
    314a:	aa 1b       	sub	r26, r26
    314c:	bb 1b       	sub	r27, r27
    314e:	fd 01       	movw	r30, r26
    3150:	0d c0       	rjmp	.+26     	; 0x316c <__udivmodsi4_ep>

00003152 <__udivmodsi4_loop>:
    3152:	aa 1f       	adc	r26, r26
    3154:	bb 1f       	adc	r27, r27
    3156:	ee 1f       	adc	r30, r30
    3158:	ff 1f       	adc	r31, r31
    315a:	a2 17       	cp	r26, r18
    315c:	b3 07       	cpc	r27, r19
    315e:	e4 07       	cpc	r30, r20
    3160:	f5 07       	cpc	r31, r21
    3162:	20 f0       	brcs	.+8      	; 0x316c <__udivmodsi4_ep>
    3164:	a2 1b       	sub	r26, r18
    3166:	b3 0b       	sbc	r27, r19
    3168:	e4 0b       	sbc	r30, r20
    316a:	f5 0b       	sbc	r31, r21

0000316c <__udivmodsi4_ep>:
    316c:	66 1f       	adc	r22, r22
    316e:	77 1f       	adc	r23, r23
    3170:	88 1f       	adc	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	1a 94       	dec	r1
    3176:	69 f7       	brne	.-38     	; 0x3152 <__udivmodsi4_loop>
    3178:	60 95       	com	r22
    317a:	70 95       	com	r23
    317c:	80 95       	com	r24
    317e:	90 95       	com	r25
    3180:	9b 01       	movw	r18, r22
    3182:	ac 01       	movw	r20, r24
    3184:	bd 01       	movw	r22, r26
    3186:	cf 01       	movw	r24, r30
    3188:	08 95       	ret

0000318a <__divmodsi4>:
    318a:	97 fb       	bst	r25, 7
    318c:	09 2e       	mov	r0, r25
    318e:	05 26       	eor	r0, r21
    3190:	0e d0       	rcall	.+28     	; 0x31ae <__divmodsi4_neg1>
    3192:	57 fd       	sbrc	r21, 7
    3194:	04 d0       	rcall	.+8      	; 0x319e <__divmodsi4_neg2>
    3196:	d7 df       	rcall	.-82     	; 0x3146 <__udivmodsi4>
    3198:	0a d0       	rcall	.+20     	; 0x31ae <__divmodsi4_neg1>
    319a:	00 1c       	adc	r0, r0
    319c:	38 f4       	brcc	.+14     	; 0x31ac <__divmodsi4_exit>

0000319e <__divmodsi4_neg2>:
    319e:	50 95       	com	r21
    31a0:	40 95       	com	r20
    31a2:	30 95       	com	r19
    31a4:	21 95       	neg	r18
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	4f 4f       	sbci	r20, 0xFF	; 255
    31aa:	5f 4f       	sbci	r21, 0xFF	; 255

000031ac <__divmodsi4_exit>:
    31ac:	08 95       	ret

000031ae <__divmodsi4_neg1>:
    31ae:	f6 f7       	brtc	.-4      	; 0x31ac <__divmodsi4_exit>
    31b0:	90 95       	com	r25
    31b2:	80 95       	com	r24
    31b4:	70 95       	com	r23
    31b6:	61 95       	neg	r22
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	8f 4f       	sbci	r24, 0xFF	; 255
    31bc:	9f 4f       	sbci	r25, 0xFF	; 255
    31be:	08 95       	ret

000031c0 <__prologue_saves__>:
    31c0:	2f 92       	push	r2
    31c2:	3f 92       	push	r3
    31c4:	4f 92       	push	r4
    31c6:	5f 92       	push	r5
    31c8:	6f 92       	push	r6
    31ca:	7f 92       	push	r7
    31cc:	8f 92       	push	r8
    31ce:	9f 92       	push	r9
    31d0:	af 92       	push	r10
    31d2:	bf 92       	push	r11
    31d4:	cf 92       	push	r12
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	ca 1b       	sub	r28, r26
    31ea:	db 0b       	sbc	r29, r27
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	09 94       	ijmp

000031f8 <__epilogue_restores__>:
    31f8:	2a 88       	ldd	r2, Y+18	; 0x12
    31fa:	39 88       	ldd	r3, Y+17	; 0x11
    31fc:	48 88       	ldd	r4, Y+16	; 0x10
    31fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3200:	6e 84       	ldd	r6, Y+14	; 0x0e
    3202:	7d 84       	ldd	r7, Y+13	; 0x0d
    3204:	8c 84       	ldd	r8, Y+12	; 0x0c
    3206:	9b 84       	ldd	r9, Y+11	; 0x0b
    3208:	aa 84       	ldd	r10, Y+10	; 0x0a
    320a:	b9 84       	ldd	r11, Y+9	; 0x09
    320c:	c8 84       	ldd	r12, Y+8	; 0x08
    320e:	df 80       	ldd	r13, Y+7	; 0x07
    3210:	ee 80       	ldd	r14, Y+6	; 0x06
    3212:	fd 80       	ldd	r15, Y+5	; 0x05
    3214:	0c 81       	ldd	r16, Y+4	; 0x04
    3216:	1b 81       	ldd	r17, Y+3	; 0x03
    3218:	aa 81       	ldd	r26, Y+2	; 0x02
    321a:	b9 81       	ldd	r27, Y+1	; 0x01
    321c:	ce 0f       	add	r28, r30
    321e:	d1 1d       	adc	r29, r1
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	ed 01       	movw	r28, r26
    322c:	08 95       	ret

0000322e <_exit>:
    322e:	f8 94       	cli

00003230 <__stop_program>:
    3230:	ff cf       	rjmp	.-2      	; 0x3230 <__stop_program>
