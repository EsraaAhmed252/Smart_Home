
drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c0  00800060  00007ab8  00007b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800320  00800320  00007e0c  2**0
                  ALLOC
  3 .stab         000093d8  00000000  00000000  00007e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002869  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__vector_3>
      10:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_4>
      14:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_5>
      18:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_6>
      1c:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_7>
      20:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_8>
      24:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_9>
      28:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_10>
      2c:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_11>
      30:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_12>
      34:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_13>
      38:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_14>
      3c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <main>
      8a:	0c 94 5a 3d 	jmp	0x7ab4	; 0x7ab4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 33 3d 	jmp	0x7a66	; 0x7a66 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 4f 3d 	jmp	0x7a9e	; 0x7a9e <__epilogue_restores__+0x20>

0000085a <__pack_f>:
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	fc 01       	movw	r30, r24
     866:	e4 80       	ldd	r14, Z+4	; 0x04
     868:	f5 80       	ldd	r15, Z+5	; 0x05
     86a:	06 81       	ldd	r16, Z+6	; 0x06
     86c:	17 81       	ldd	r17, Z+7	; 0x07
     86e:	d1 80       	ldd	r13, Z+1	; 0x01
     870:	80 81       	ld	r24, Z
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	48 f4       	brcc	.+18     	; 0x888 <__stack+0x29>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a0 e1       	ldi	r26, 0x10	; 16
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e8 2a       	or	r14, r24
     880:	f9 2a       	or	r15, r25
     882:	0a 2b       	or	r16, r26
     884:	1b 2b       	or	r17, r27
     886:	a5 c0       	rjmp	.+330    	; 0x9d2 <__stack+0x173>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
     88c:	9f c0       	rjmp	.+318    	; 0x9cc <__stack+0x16d>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	21 f4       	brne	.+8      	; 0x89a <__stack+0x3b>
     892:	ee 24       	eor	r14, r14
     894:	ff 24       	eor	r15, r15
     896:	87 01       	movw	r16, r14
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <__stack+0x45>
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	01 05       	cpc	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
     8a4:	e0 e0       	ldi	r30, 0x00	; 0
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	96 c0       	rjmp	.+300    	; 0x9d6 <__stack+0x177>
     8aa:	62 81       	ldd	r22, Z+2	; 0x02
     8ac:	73 81       	ldd	r23, Z+3	; 0x03
     8ae:	9f ef       	ldi	r25, 0xFF	; 255
     8b0:	62 38       	cpi	r22, 0x82	; 130
     8b2:	79 07       	cpc	r23, r25
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <__stack+0x59>
     8b6:	5b c0       	rjmp	.+182    	; 0x96e <__stack+0x10f>
     8b8:	22 e8       	ldi	r18, 0x82	; 130
     8ba:	3f ef       	ldi	r19, 0xFF	; 255
     8bc:	26 1b       	sub	r18, r22
     8be:	37 0b       	sbc	r19, r23
     8c0:	2a 31       	cpi	r18, 0x1A	; 26
     8c2:	31 05       	cpc	r19, r1
     8c4:	2c f0       	brlt	.+10     	; 0x8d0 <__stack+0x71>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	2a c0       	rjmp	.+84     	; 0x924 <__stack+0xc5>
     8d0:	b8 01       	movw	r22, r16
     8d2:	a7 01       	movw	r20, r14
     8d4:	02 2e       	mov	r0, r18
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	76 95       	lsr	r23
     8da:	67 95       	ror	r22
     8dc:	57 95       	ror	r21
     8de:	47 95       	ror	r20
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__stack+0x97>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	aa 1f       	adc	r26, r26
     8f4:	bb 1f       	adc	r27, r27
     8f6:	2a 95       	dec	r18
     8f8:	d2 f7       	brpl	.-12     	; 0x8ee <__stack+0x8f>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	a1 09       	sbc	r26, r1
     8fe:	b1 09       	sbc	r27, r1
     900:	8e 21       	and	r24, r14
     902:	9f 21       	and	r25, r15
     904:	a0 23       	and	r26, r16
     906:	b1 23       	and	r27, r17
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	a1 05       	cpc	r26, r1
     90c:	b1 05       	cpc	r27, r1
     90e:	21 f0       	breq	.+8      	; 0x918 <__stack+0xb9>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	9a 01       	movw	r18, r20
     91a:	ab 01       	movw	r20, r22
     91c:	28 2b       	or	r18, r24
     91e:	39 2b       	or	r19, r25
     920:	4a 2b       	or	r20, r26
     922:	5b 2b       	or	r21, r27
     924:	da 01       	movw	r26, r20
     926:	c9 01       	movw	r24, r18
     928:	8f 77       	andi	r24, 0x7F	; 127
     92a:	90 70       	andi	r25, 0x00	; 0
     92c:	a0 70       	andi	r26, 0x00	; 0
     92e:	b0 70       	andi	r27, 0x00	; 0
     930:	80 34       	cpi	r24, 0x40	; 64
     932:	91 05       	cpc	r25, r1
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	39 f4       	brne	.+14     	; 0x948 <__stack+0xe9>
     93a:	27 ff       	sbrs	r18, 7
     93c:	09 c0       	rjmp	.+18     	; 0x950 <__stack+0xf1>
     93e:	20 5c       	subi	r18, 0xC0	; 192
     940:	3f 4f       	sbci	r19, 0xFF	; 255
     942:	4f 4f       	sbci	r20, 0xFF	; 255
     944:	5f 4f       	sbci	r21, 0xFF	; 255
     946:	04 c0       	rjmp	.+8      	; 0x950 <__stack+0xf1>
     948:	21 5c       	subi	r18, 0xC1	; 193
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	4f 4f       	sbci	r20, 0xFF	; 255
     94e:	5f 4f       	sbci	r21, 0xFF	; 255
     950:	e0 e0       	ldi	r30, 0x00	; 0
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	20 30       	cpi	r18, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	3a 07       	cpc	r19, r26
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	4a 07       	cpc	r20, r26
     95e:	a0 e4       	ldi	r26, 0x40	; 64
     960:	5a 07       	cpc	r21, r26
     962:	10 f0       	brcs	.+4      	; 0x968 <__stack+0x109>
     964:	e1 e0       	ldi	r30, 0x01	; 1
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	79 01       	movw	r14, r18
     96a:	8a 01       	movw	r16, r20
     96c:	27 c0       	rjmp	.+78     	; 0x9bc <__stack+0x15d>
     96e:	60 38       	cpi	r22, 0x80	; 128
     970:	71 05       	cpc	r23, r1
     972:	64 f5       	brge	.+88     	; 0x9cc <__stack+0x16d>
     974:	fb 01       	movw	r30, r22
     976:	e1 58       	subi	r30, 0x81	; 129
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	d8 01       	movw	r26, r16
     97c:	c7 01       	movw	r24, r14
     97e:	8f 77       	andi	r24, 0x7F	; 127
     980:	90 70       	andi	r25, 0x00	; 0
     982:	a0 70       	andi	r26, 0x00	; 0
     984:	b0 70       	andi	r27, 0x00	; 0
     986:	80 34       	cpi	r24, 0x40	; 64
     988:	91 05       	cpc	r25, r1
     98a:	a1 05       	cpc	r26, r1
     98c:	b1 05       	cpc	r27, r1
     98e:	39 f4       	brne	.+14     	; 0x99e <__stack+0x13f>
     990:	e7 fe       	sbrs	r14, 7
     992:	0d c0       	rjmp	.+26     	; 0x9ae <__stack+0x14f>
     994:	80 e4       	ldi	r24, 0x40	; 64
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0x147>
     99e:	8f e3       	ldi	r24, 0x3F	; 63
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e8 0e       	add	r14, r24
     9a8:	f9 1e       	adc	r15, r25
     9aa:	0a 1f       	adc	r16, r26
     9ac:	1b 1f       	adc	r17, r27
     9ae:	17 ff       	sbrs	r17, 7
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__stack+0x15d>
     9b2:	16 95       	lsr	r17
     9b4:	07 95       	ror	r16
     9b6:	f7 94       	ror	r15
     9b8:	e7 94       	ror	r14
     9ba:	31 96       	adiw	r30, 0x01	; 1
     9bc:	87 e0       	ldi	r24, 0x07	; 7
     9be:	16 95       	lsr	r17
     9c0:	07 95       	ror	r16
     9c2:	f7 94       	ror	r15
     9c4:	e7 94       	ror	r14
     9c6:	8a 95       	dec	r24
     9c8:	d1 f7       	brne	.-12     	; 0x9be <__stack+0x15f>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <__stack+0x177>
     9cc:	ee 24       	eor	r14, r14
     9ce:	ff 24       	eor	r15, r15
     9d0:	87 01       	movw	r16, r14
     9d2:	ef ef       	ldi	r30, 0xFF	; 255
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	6e 2f       	mov	r22, r30
     9d8:	67 95       	ror	r22
     9da:	66 27       	eor	r22, r22
     9dc:	67 95       	ror	r22
     9de:	90 2f       	mov	r25, r16
     9e0:	9f 77       	andi	r25, 0x7F	; 127
     9e2:	d7 94       	ror	r13
     9e4:	dd 24       	eor	r13, r13
     9e6:	d7 94       	ror	r13
     9e8:	8e 2f       	mov	r24, r30
     9ea:	86 95       	lsr	r24
     9ec:	49 2f       	mov	r20, r25
     9ee:	46 2b       	or	r20, r22
     9f0:	58 2f       	mov	r21, r24
     9f2:	5d 29       	or	r21, r13
     9f4:	b7 01       	movw	r22, r14
     9f6:	ca 01       	movw	r24, r20
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	08 95       	ret

00000a04 <__unpack_f>:
     a04:	fc 01       	movw	r30, r24
     a06:	db 01       	movw	r26, r22
     a08:	40 81       	ld	r20, Z
     a0a:	51 81       	ldd	r21, Z+1	; 0x01
     a0c:	22 81       	ldd	r18, Z+2	; 0x02
     a0e:	62 2f       	mov	r22, r18
     a10:	6f 77       	andi	r22, 0x7F	; 127
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	22 1f       	adc	r18, r18
     a16:	22 27       	eor	r18, r18
     a18:	22 1f       	adc	r18, r18
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	89 2f       	mov	r24, r25
     a1e:	88 0f       	add	r24, r24
     a20:	82 2b       	or	r24, r18
     a22:	28 2f       	mov	r18, r24
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	99 1f       	adc	r25, r25
     a28:	99 27       	eor	r25, r25
     a2a:	99 1f       	adc	r25, r25
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	9c 93       	st	X, r25
     a30:	11 97       	sbiw	r26, 0x01	; 1
     a32:	21 15       	cp	r18, r1
     a34:	31 05       	cpc	r19, r1
     a36:	a9 f5       	brne	.+106    	; 0xaa2 <__unpack_f+0x9e>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	11 f4       	brne	.+4      	; 0xa46 <__unpack_f+0x42>
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	37 c0       	rjmp	.+110    	; 0xab4 <__unpack_f+0xb0>
     a46:	82 e8       	ldi	r24, 0x82	; 130
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	9c 93       	st	X, r25
     a4e:	8e 93       	st	-X, r24
     a50:	12 97       	sbiw	r26, 0x02	; 2
     a52:	9a 01       	movw	r18, r20
     a54:	ab 01       	movw	r20, r22
     a56:	67 e0       	ldi	r22, 0x07	; 7
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	44 1f       	adc	r20, r20
     a5e:	55 1f       	adc	r21, r21
     a60:	6a 95       	dec	r22
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__unpack_f+0x54>
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	8c 93       	st	X, r24
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <__unpack_f+0x80>
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	44 1f       	adc	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	12 96       	adiw	r26, 0x02	; 2
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	13 97       	sbiw	r26, 0x03	; 3
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	13 96       	adiw	r26, 0x03	; 3
     a7e:	9c 93       	st	X, r25
     a80:	8e 93       	st	-X, r24
     a82:	12 97       	sbiw	r26, 0x02	; 2
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	38 07       	cpc	r19, r24
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	48 07       	cpc	r20, r24
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	58 07       	cpc	r21, r24
     a92:	58 f3       	brcs	.-42     	; 0xa6a <__unpack_f+0x66>
     a94:	14 96       	adiw	r26, 0x04	; 4
     a96:	2d 93       	st	X+, r18
     a98:	3d 93       	st	X+, r19
     a9a:	4d 93       	st	X+, r20
     a9c:	5c 93       	st	X, r21
     a9e:	17 97       	sbiw	r26, 0x07	; 7
     aa0:	08 95       	ret
     aa2:	2f 3f       	cpi	r18, 0xFF	; 255
     aa4:	31 05       	cpc	r19, r1
     aa6:	79 f4       	brne	.+30     	; 0xac6 <__unpack_f+0xc2>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	19 f4       	brne	.+6      	; 0xab8 <__unpack_f+0xb4>
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	8c 93       	st	X, r24
     ab6:	08 95       	ret
     ab8:	64 ff       	sbrs	r22, 4
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <__unpack_f+0xbe>
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	8c 93       	st	X, r24
     ac0:	12 c0       	rjmp	.+36     	; 0xae6 <__unpack_f+0xe2>
     ac2:	1c 92       	st	X, r1
     ac4:	10 c0       	rjmp	.+32     	; 0xae6 <__unpack_f+0xe2>
     ac6:	2f 57       	subi	r18, 0x7F	; 127
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	13 96       	adiw	r26, 0x03	; 3
     acc:	3c 93       	st	X, r19
     ace:	2e 93       	st	-X, r18
     ad0:	12 97       	sbiw	r26, 0x02	; 2
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	8c 93       	st	X, r24
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	44 0f       	add	r20, r20
     ada:	55 1f       	adc	r21, r21
     adc:	66 1f       	adc	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	8a 95       	dec	r24
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <__unpack_f+0xd4>
     ae4:	70 64       	ori	r23, 0x40	; 64
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	4d 93       	st	X+, r20
     aea:	5d 93       	st	X+, r21
     aec:	6d 93       	st	X+, r22
     aee:	7c 93       	st	X, r23
     af0:	17 97       	sbiw	r26, 0x07	; 7
     af2:	08 95       	ret

00000af4 <__fpcmp_parts_f>:
     af4:	1f 93       	push	r17
     af6:	dc 01       	movw	r26, r24
     af8:	fb 01       	movw	r30, r22
     afa:	9c 91       	ld	r25, X
     afc:	92 30       	cpi	r25, 0x02	; 2
     afe:	08 f4       	brcc	.+2      	; 0xb02 <__fpcmp_parts_f+0xe>
     b00:	47 c0       	rjmp	.+142    	; 0xb90 <__fpcmp_parts_f+0x9c>
     b02:	80 81       	ld	r24, Z
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	08 f4       	brcc	.+2      	; 0xb0a <__fpcmp_parts_f+0x16>
     b08:	43 c0       	rjmp	.+134    	; 0xb90 <__fpcmp_parts_f+0x9c>
     b0a:	94 30       	cpi	r25, 0x04	; 4
     b0c:	51 f4       	brne	.+20     	; 0xb22 <__fpcmp_parts_f+0x2e>
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	1c 91       	ld	r17, X
     b12:	84 30       	cpi	r24, 0x04	; 4
     b14:	99 f5       	brne	.+102    	; 0xb7c <__fpcmp_parts_f+0x88>
     b16:	81 81       	ldd	r24, Z+1	; 0x01
     b18:	68 2f       	mov	r22, r24
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	61 1b       	sub	r22, r17
     b1e:	71 09       	sbc	r23, r1
     b20:	3f c0       	rjmp	.+126    	; 0xba0 <__fpcmp_parts_f+0xac>
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	21 f0       	breq	.+8      	; 0xb2e <__fpcmp_parts_f+0x3a>
     b26:	92 30       	cpi	r25, 0x02	; 2
     b28:	31 f4       	brne	.+12     	; 0xb36 <__fpcmp_parts_f+0x42>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	b9 f1       	breq	.+110    	; 0xb9c <__fpcmp_parts_f+0xa8>
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	88 23       	and	r24, r24
     b32:	89 f1       	breq	.+98     	; 0xb96 <__fpcmp_parts_f+0xa2>
     b34:	2d c0       	rjmp	.+90     	; 0xb90 <__fpcmp_parts_f+0x9c>
     b36:	11 96       	adiw	r26, 0x01	; 1
     b38:	1c 91       	ld	r17, X
     b3a:	11 97       	sbiw	r26, 0x01	; 1
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	f1 f0       	breq	.+60     	; 0xb7c <__fpcmp_parts_f+0x88>
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	18 17       	cp	r17, r24
     b44:	d9 f4       	brne	.+54     	; 0xb7c <__fpcmp_parts_f+0x88>
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	2d 91       	ld	r18, X+
     b4a:	3c 91       	ld	r19, X
     b4c:	13 97       	sbiw	r26, 0x03	; 3
     b4e:	82 81       	ldd	r24, Z+2	; 0x02
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	94 f0       	brlt	.+36     	; 0xb7c <__fpcmp_parts_f+0x88>
     b58:	28 17       	cp	r18, r24
     b5a:	39 07       	cpc	r19, r25
     b5c:	bc f0       	brlt	.+46     	; 0xb8c <__fpcmp_parts_f+0x98>
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	8d 91       	ld	r24, X+
     b62:	9d 91       	ld	r25, X+
     b64:	0d 90       	ld	r0, X+
     b66:	bc 91       	ld	r27, X
     b68:	a0 2d       	mov	r26, r0
     b6a:	24 81       	ldd	r18, Z+4	; 0x04
     b6c:	35 81       	ldd	r19, Z+5	; 0x05
     b6e:	46 81       	ldd	r20, Z+6	; 0x06
     b70:	57 81       	ldd	r21, Z+7	; 0x07
     b72:	28 17       	cp	r18, r24
     b74:	39 07       	cpc	r19, r25
     b76:	4a 07       	cpc	r20, r26
     b78:	5b 07       	cpc	r21, r27
     b7a:	18 f4       	brcc	.+6      	; 0xb82 <__fpcmp_parts_f+0x8e>
     b7c:	11 23       	and	r17, r17
     b7e:	41 f0       	breq	.+16     	; 0xb90 <__fpcmp_parts_f+0x9c>
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <__fpcmp_parts_f+0xa2>
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	a4 07       	cpc	r26, r20
     b88:	b5 07       	cpc	r27, r21
     b8a:	40 f4       	brcc	.+16     	; 0xb9c <__fpcmp_parts_f+0xa8>
     b8c:	11 23       	and	r17, r17
     b8e:	19 f0       	breq	.+6      	; 0xb96 <__fpcmp_parts_f+0xa2>
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <__fpcmp_parts_f+0xac>
     b96:	6f ef       	ldi	r22, 0xFF	; 255
     b98:	7f ef       	ldi	r23, 0xFF	; 255
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__fpcmp_parts_f+0xac>
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	cb 01       	movw	r24, r22
     ba2:	1f 91       	pop	r17
     ba4:	08 95       	ret

00000ba6 <Uart_Init>:
void (*_empty_ptrf)(void) = 0;
void (*_write_ptrf)(void) = 0;

#define UART_F_CPU 16000000

void Uart_Init(void){
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <Uart_Init+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <Uart_Init+0x8>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	// UBRR
	u32 ubbr;
	ubbr = (u32)( ( ( UART_F_CPU ) / ( 16 * ( (u32) UART_BAUDRATE ) ) )-1);
     bb2:	87 e6       	ldi	r24, 0x67	; 103
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	ab 83       	std	Y+3, r26	; 0x03
     bc0:	bc 83       	std	Y+4, r27	; 0x04
	UBRRL= (u8) ubbr;
     bc2:	e9 e2       	ldi	r30, 0x29	; 41
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	80 83       	st	Z, r24
	UBRRH = (u8) ((ubbr >> 8) & (0b00001111));
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	ab 81       	ldd	r26, Y+3	; 0x03
     bd4:	bc 81       	ldd	r27, Y+4	; 0x04
     bd6:	89 2f       	mov	r24, r25
     bd8:	9a 2f       	mov	r25, r26
     bda:	ab 2f       	mov	r26, r27
     bdc:	bb 27       	eor	r27, r27
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	80 83       	st	Z, r24

	// UART Mode
	switch(UART_MODE){
	case UART_ASYNCH:
			UCSRC |= 1<<7 | 1<<6;
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 6c       	ori	r24, 0xC0	; 192
     bee:	8c 93       	st	X, r24
	}

	// UART Stop Bit
	switch(UART_STOP_BIT){
	case Stop_1Bit:
			UCSRC |= 1<<7 | 1<<3;
     bf0:	a0 e4       	ldi	r26, 0x40	; 64
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 68       	ori	r24, 0x88	; 136
     bfc:	8c 93       	st	X, r24
	}

	// UART Parity Bit
	switch(UART_PARITY){
	case NO_PARITY:
			UCSRC |= (1<<7) & (~(1<<5)) & (~(1<<4));
     bfe:	a0 e4       	ldi	r26, 0x40	; 64
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24
		UCSRC |= ( ( (1<<7) | (1<<2) )& ( ~ ( 1<<1 )  ) );
					// CS2
		UCSRB &=~(1<<2);
		break;
	case CHAR_SIZE_8:
		UCSRC |= ( (1<<7) | (1<<1) | ( 1<<2 ) );
     c0c:	a0 e4       	ldi	r26, 0x40	; 64
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	86 68       	ori	r24, 0x86	; 134
     c18:	8c 93       	st	X, r24
					// CS2
		UCSRB &=~(1<<2);
     c1a:	aa e2       	ldi	r26, 0x2A	; 42
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e2       	ldi	r30, 0x2A	; 42
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8b 7f       	andi	r24, 0xFB	; 251
     c26:	8c 93       	st	X, r24

	// Transmission
	switch(UART_TRANSMISSION){
	case Enable_Polling:
		// enable transmission
		UCSRB |= 1<<3;
     c28:	aa e2       	ldi	r26, 0x2A	; 42
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e2       	ldi	r30, 0x2A	; 42
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	88 60       	ori	r24, 0x08	; 8
     c34:	8c 93       	st	X, r24
		// enable transmission
		UCSRB |= 1<<4;
		break;
	case Enable_Interrupt:
		// enable transmission and interrupt
		UCSRB |= 1<<4 | 1<<7;
     c36:	aa e2       	ldi	r26, 0x2A	; 42
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ea e2       	ldi	r30, 0x2A	; 42
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	80 69       	ori	r24, 0x90	; 144
     c42:	8c 93       	st	X, r24
		UCSRB &=~(1<<4 | 1<<7);
		break;
	}


}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <Uart_WritePolling>:

void Uart_WritePolling(u8 data){
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & 1<<5));
     c5e:	eb e2       	ldi	r30, 0x2B	; 43
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	80 72       	andi	r24, 0x20	; 32
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	b9 f3       	breq	.-18     	; 0xc5e <Uart_WritePolling+0xc>
	UDR = data;
     c70:	ec e2       	ldi	r30, 0x2C	; 44
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	80 83       	st	Z, r24
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <Uart_ReadPolling>:

u8 Uart_ReadPolling(){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA & 1<<7));
     c88:	eb e2       	ldi	r30, 0x2B	; 43
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	dc f7       	brge	.-10     	; 0xc88 <Uart_ReadPolling+0x8>
	return UDR;
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <Uart_SetEmptyCallback>:

void Uart_SetEmptyCallback(void (*ptrf)(u8)){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Uart_SetEmptyCallback+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	_empty_ptrf = ptrf;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	90 93 23 03 	sts	0x0323, r25
     cb4:	80 93 22 03 	sts	0x0322, r24
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Uart_SetReadCallback>:

void Uart_SetReadCallback(void (*ptrf)(u8)){
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <Uart_SetReadCallback+0x6>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
	_read_ptrf = ptrf;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	90 93 21 03 	sts	0x0321, r25
     cd8:	80 93 20 03 	sts	0x0320, r24
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <Uart_SetWriteCallback>:

void Uart_SetWriteCallback(void (*ptrf)(u8)){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <Uart_SetWriteCallback+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
	_write_ptrf = ptrf;
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	90 93 25 03 	sts	0x0325, r25
     cfc:	80 93 24 03 	sts	0x0324, r24
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <__vector_13>:

ISR(USART_RXC_vect){
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	u8 data = UDR;
     d36:	ec e2       	ldi	r30, 0x2C	; 44
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	89 83       	std	Y+1, r24	; 0x01
	if(_read_ptrf != 0)
     d3e:	80 91 20 03 	lds	r24, 0x0320
     d42:	90 91 21 03 	lds	r25, 0x0321
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <__vector_13+0x4c>
	{
		_read_ptrf(data);
     d4a:	e0 91 20 03 	lds	r30, 0x0320
     d4e:	f0 91 21 03 	lds	r31, 0x0321
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	09 95       	icall
	}
}
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_15>:

ISR(USART_TXC_vect){
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	if(_write_ptrf != 0)
     da8:	80 91 24 03 	lds	r24, 0x0324
     dac:	90 91 25 03 	lds	r25, 0x0325
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	29 f0       	breq	.+10     	; 0xdbe <__vector_15+0x40>
	{
		_write_ptrf();
     db4:	e0 91 24 03 	lds	r30, 0x0324
     db8:	f0 91 25 03 	lds	r31, 0x0325
     dbc:	09 95       	icall
	}
}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_14>:


ISR(USART_UDRE_vect)
{
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	if(_empty_ptrf != 0)
     e0e:	80 91 22 03 	lds	r24, 0x0322
     e12:	90 91 23 03 	lds	r25, 0x0323
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	29 f0       	breq	.+10     	; 0xe24 <__vector_14+0x40>
		_empty_ptrf();
     e1a:	e0 91 22 03 	lds	r30, 0x0322
     e1e:	f0 91 23 03 	lds	r31, 0x0323
     e22:	09 95       	icall
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <WDT_Enable>:
#include "Routines.h"

#include "Timer/WDT/WDT_Interface.h"

void WDT_Enable(float prescaler)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <WDT_Enable+0x6>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <WDT_Enable+0x8>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <WDT_Enable+0xa>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	69 83       	std	Y+1, r22	; 0x01
     e5a:	7a 83       	std	Y+2, r23	; 0x02
     e5c:	8b 83       	std	Y+3, r24	; 0x03
     e5e:	9c 83       	std	Y+4, r25	; 0x04
	WDTCR &= 0xF8;
     e60:	a1 e4       	ldi	r26, 0x41	; 65
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e1 e4       	ldi	r30, 0x41	; 65
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	if(prescaler==WDT_TO_16_3ms)
     e6e:	1d 82       	std	Y+5, r1	; 0x05
     e70:	69 81       	ldd	r22, Y+1	; 0x01
     e72:	7a 81       	ldd	r23, Y+2	; 0x02
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e8       	ldi	r20, 0x80	; 128
     e7e:	5f e3       	ldi	r21, 0x3F	; 63
     e80:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     e84:	88 23       	and	r24, r24
     e86:	11 f4       	brne	.+4      	; 0xe8c <WDT_Enable+0x42>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	89 27       	eor	r24, r25
     e92:	88 23       	and	r24, r24
     e94:	09 f4       	brne	.+2      	; 0xe98 <WDT_Enable+0x4e>
     e96:	8b c0       	rjmp	.+278    	; 0xfae <WDT_Enable+0x164>
	{

	}
	else if(prescaler==WDT_TO_32_5ms)
     e98:	69 81       	ldd	r22, Y+1	; 0x01
     e9a:	7a 81       	ldd	r23, Y+2	; 0x02
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	50 e4       	ldi	r21, 0x40	; 64
     ea8:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     eac:	88 23       	and	r24, r24
     eae:	41 f4       	brne	.+16     	; 0xec0 <WDT_Enable+0x76>
	{
		WDTCR |=0xF9;
     eb0:	a1 e4       	ldi	r26, 0x41	; 65
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e4       	ldi	r30, 0x41	; 65
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	89 6f       	ori	r24, 0xF9	; 249
     ebc:	8c 93       	st	X, r24
     ebe:	77 c0       	rjmp	.+238    	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_65ms)
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	7a 81       	ldd	r23, Y+2	; 0x02
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e4       	ldi	r20, 0x40	; 64
     ece:	50 e4       	ldi	r21, 0x40	; 64
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	41 f4       	brne	.+16     	; 0xee8 <WDT_Enable+0x9e>
	{
		WDTCR |=0xFA;
     ed8:	a1 e4       	ldi	r26, 0x41	; 65
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e4       	ldi	r30, 0x41	; 65
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8a 6f       	ori	r24, 0xFA	; 250
     ee4:	8c 93       	st	X, r24
     ee6:	63 c0       	rjmp	.+198    	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_130ms)
     ee8:	69 81       	ldd	r22, Y+1	; 0x01
     eea:	7a 81       	ldd	r23, Y+2	; 0x02
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	50 e4       	ldi	r21, 0x40	; 64
     ef8:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     efc:	88 23       	and	r24, r24
     efe:	41 f4       	brne	.+16     	; 0xf10 <WDT_Enable+0xc6>
	{
		WDTCR |=0xFB;
     f00:	a1 e4       	ldi	r26, 0x41	; 65
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e4       	ldi	r30, 0x41	; 65
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8b 6f       	ori	r24, 0xFB	; 251
     f0c:	8c 93       	st	X, r24
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_260ms)
     f10:	69 81       	ldd	r22, Y+1	; 0x01
     f12:	7a 81       	ldd	r23, Y+2	; 0x02
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 ea       	ldi	r20, 0xA0	; 160
     f1e:	50 e4       	ldi	r21, 0x40	; 64
     f20:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     f24:	88 23       	and	r24, r24
     f26:	41 f4       	brne	.+16     	; 0xf38 <WDT_Enable+0xee>
	{
		WDTCR |=0xFC;
     f28:	a1 e4       	ldi	r26, 0x41	; 65
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e4       	ldi	r30, 0x41	; 65
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8c 6f       	ori	r24, 0xFC	; 252
     f34:	8c 93       	st	X, r24
     f36:	3b c0       	rjmp	.+118    	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_520ms)
     f38:	69 81       	ldd	r22, Y+1	; 0x01
     f3a:	7a 81       	ldd	r23, Y+2	; 0x02
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 ec       	ldi	r20, 0xC0	; 192
     f46:	50 e4       	ldi	r21, 0x40	; 64
     f48:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     f4c:	88 23       	and	r24, r24
     f4e:	41 f4       	brne	.+16     	; 0xf60 <WDT_Enable+0x116>
	{
		WDTCR |=0xFD;
     f50:	a1 e4       	ldi	r26, 0x41	; 65
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e1 e4       	ldi	r30, 0x41	; 65
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 6f       	ori	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
     f5e:	27 c0       	rjmp	.+78     	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_1s)
     f60:	69 81       	ldd	r22, Y+1	; 0x01
     f62:	7a 81       	ldd	r23, Y+2	; 0x02
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 ee       	ldi	r20, 0xE0	; 224
     f6e:	50 e4       	ldi	r21, 0x40	; 64
     f70:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     f74:	88 23       	and	r24, r24
     f76:	41 f4       	brne	.+16     	; 0xf88 <WDT_Enable+0x13e>
	{
		WDTCR |=0xFE;
     f78:	a1 e4       	ldi	r26, 0x41	; 65
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e4       	ldi	r30, 0x41	; 65
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8e 6f       	ori	r24, 0xFE	; 254
     f84:	8c 93       	st	X, r24
     f86:	13 c0       	rjmp	.+38     	; 0xfae <WDT_Enable+0x164>
	}
	else if(prescaler==WDT_TO_2_1s)
     f88:	69 81       	ldd	r22, Y+1	; 0x01
     f8a:	7a 81       	ldd	r23, Y+2	; 0x02
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	39 f4       	brne	.+14     	; 0xfae <WDT_Enable+0x164>
	{
		WDTCR |=0xFF;
     fa0:	e1 e4       	ldi	r30, 0x41	; 65
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	e1 e4       	ldi	r30, 0x41	; 65
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	80 83       	st	Z, r24
	}

	SET_BIT(WDTCR,3);
     fae:	a1 e4       	ldi	r26, 0x41	; 65
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e1 e4       	ldi	r30, 0x41	; 65
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 60       	ori	r24, 0x08	; 8
     fba:	8c 93       	st	X, r24
}
     fbc:	26 96       	adiw	r28, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <WDT_Disable>:

void WDT_Disable(void)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (3<<3);
     fd6:	a1 e4       	ldi	r26, 0x41	; 65
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e4       	ldi	r30, 0x41	; 65
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 61       	ori	r24, 0x18	; 24
     fe2:	8c 93       	st	X, r24
	WDTCR &=~ (1<<4);
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7e       	andi	r24, 0xEF	; 239
     ff0:	8c 93       	st	X, r24
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <timer2_init>:
#include "Timer/Timer2_Cfg.h"

void (*p2f_2)()=NULL_PTR;

void timer2_init(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,3);

#elif Timer2_mode==Fast_PWM_mode

	#if Timer2_modeofcmp==Non_Inverting  //cmp_mode
		TCCR2|=(Non_Inverting<<4);
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	80 62       	ori	r24, 0x20	; 32
    100c:	8c 93       	st	X, r24
	#elif Timer2_modeofcmp==Inverting
		TCCR2|=(Inverting<<4);

	#endif

	SET_BIT(TCCR2,6);
    100e:	a5 e4       	ldi	r26, 0x45	; 69
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e4       	ldi	r30, 0x45	; 69
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    101c:	a5 e4       	ldi	r26, 0x45	; 69
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e4       	ldi	r30, 0x45	; 69
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	8c 93       	st	X, r24

#endif
	return;
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <timer2_start>:

void timer2_start(void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xf8;
    1038:	a5 e4       	ldi	r26, 0x45	; 69
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e4       	ldi	r30, 0x45	; 69
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 7f       	andi	r24, 0xF8	; 248
    1044:	8c 93       	st	X, r24
	TCCR2 |=Timer2_Prescaler;
    1046:	a5 e4       	ldi	r26, 0x45	; 69
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e4       	ldi	r30, 0x45	; 69
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	85 60       	ori	r24, 0x05	; 5
    1052:	8c 93       	st	X, r24
	return;
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <timer2_int_value>:

void timer2_int_value(u8 value)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=value;
    1066:	e4 e4       	ldi	r30, 0x44	; 68
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
	return ;
}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <timer2_set_cmp>:

u8 timer2_set_cmp(u8 duty)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <timer2_set_cmp+0x6>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8a 83       	std	Y+2, r24	; 0x02
	u8 OCR2_value;
	#if Timer2_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR2_value=(duty*resoultion/100)-1;
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	98 2f       	mov	r25, r24
    108a:	88 27       	eor	r24, r24
    108c:	24 e6       	ldi	r18, 0x64	; 100
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__divmodhi4>
    1096:	cb 01       	movw	r24, r22
    1098:	81 50       	subi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01

	return OCR2_value;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <timer2_set_cmp_PC>:

u8 timer2_set_cmp_PC (u8 duty){
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <timer2_set_cmp_PC+0x6>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 OCR2_value;
	#if Timer2_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR2_value = ((duty*resoultion/50)-1);
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	98 2f       	mov	r25, r24
    10be:	88 27       	eor	r24, r24
    10c0:	22 e3       	ldi	r18, 0x32	; 50
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	b9 01       	movw	r22, r18
    10c6:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__divmodhi4>
    10ca:	cb 01       	movw	r24, r22
    10cc:	81 50       	subi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <timer2_cmp_value>:

void timer2_cmp_value(u8 value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
	OCR2=value;
    10e8:	e3 e4       	ldi	r30, 0x43	; 67
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	80 83       	st	Z, r24
	return ;
}
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <timer2_stop>:

////stops the timer///
void timer2_stop(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	TCCR2&=0xf8;
    1100:	a5 e4       	ldi	r26, 0x45	; 69
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e4       	ldi	r30, 0x45	; 69
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 7f       	andi	r24, 0xF8	; 248
    110c:	8c 93       	st	X, r24
	return;
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <timer2_int_enable>:

void timer2_int_enable(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
#elif Timer2_mode==CTC_mode
	SET_BIT(TIMSK,1);

#endif
	return ;
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <timer2_of_set_callbck>:

void timer2_of_set_callbck(void (*p2f_var)(void))
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <timer2_of_set_callbck+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	31 f0       	breq	.+12     	; 0x1144 <timer2_of_set_callbck+0x22>
	{
		p2f_2=p2f_var;
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	90 93 27 03 	sts	0x0327, r25
    1140:	80 93 26 03 	sts	0x0326, r24
	}
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <timer2_cmp_set_callbck>:

void timer2_cmp_set_callbck(void (*p2f_var)(void))
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <timer2_cmp_set_callbck+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	31 f0       	breq	.+12     	; 0x1170 <timer2_cmp_set_callbck+0x22>
	{
		p2f_2=p2f_var;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	90 93 27 03 	sts	0x0327, r25
    116c:	80 93 26 03 	sts	0x0326, r24
	}
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	2f 93       	push	r18
    1186:	3f 93       	push	r19
    1188:	4f 93       	push	r20
    118a:	5f 93       	push	r21
    118c:	6f 93       	push	r22
    118e:	7f 93       	push	r23
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	af 93       	push	r26
    1196:	bf 93       	push	r27
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	p2f_2();
    11a4:	e0 91 26 03 	lds	r30, 0x0326
    11a8:	f0 91 27 03 	lds	r31, 0x0327
    11ac:	09 95       	icall
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	p2f_2();
    11fe:	e0 91 26 03 	lds	r30, 0x0326
    1202:	f0 91 27 03 	lds	r31, 0x0327
    1206:	09 95       	icall
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <timer1_init>:
void (*p2f_11)()=NULL_PTR;
void (*p2f_12)()=NULL_PTR;
void (*p2f_13)()=NULL_PTR;

void timer1_init(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,4);

#elif Timer0_mode==Fast_PWM_mode

	#if Timer0_modeofcmp==Non_Inverting  //cmp_mode
		TCCR1A|=(Non_Inverting<<6);
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	8c 93       	st	X, r24
	#elif Timer0_modeofcmp==Inverting
		TCCR1A|=(Inverting<<6);

	#endif

		CLR_BIT(TCCR1A,0);
    1244:	af e4       	ldi	r26, 0x4F	; 79
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ef e4       	ldi	r30, 0x4F	; 79
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);
    1252:	af e4       	ldi	r26, 0x4F	; 79
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e4       	ldi	r30, 0x4F	; 79
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	82 60       	ori	r24, 0x02	; 2
    125e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
    1260:	ae e4       	ldi	r26, 0x4E	; 78
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ee e4       	ldi	r30, 0x4E	; 78
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 60       	ori	r24, 0x08	; 8
    126c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);
    126e:	ae e4       	ldi	r26, 0x4E	; 78
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ee e4       	ldi	r30, 0x4E	; 78
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 61       	ori	r24, 0x10	; 16
    127a:	8c 93       	st	X, r24

#endif
	return;
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <timer1_start>:

void timer1_start(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0xf8;
    128a:	ae e4       	ldi	r26, 0x4E	; 78
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ee e4       	ldi	r30, 0x4E	; 78
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 7f       	andi	r24, 0xF8	; 248
    1296:	8c 93       	st	X, r24
	TCCR1B |=Timer1_Prescaler;
    1298:	ae e4       	ldi	r26, 0x4E	; 78
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ee e4       	ldi	r30, 0x4E	; 78
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	83 60       	ori	r24, 0x03	; 3
    12a4:	8c 93       	st	X, r24
	return;
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <timer1_int_value>:

void timer1_int_value(u16 value)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <timer1_int_value+0x6>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=value;
    12ba:	ec e4       	ldi	r30, 0x4C	; 76
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	80 83       	st	Z, r24
	return ;
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <timer1_max_value>:

void timer1_max_value(u16 value)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <timer1_max_value+0x6>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
	ICR1=value;
    12da:	e6 e4       	ldi	r30, 0x46	; 70
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
	return ;
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <timer1_set_cmp>:

u16 timer1_set_cmp(u8 duty,u32 freq)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	2b 97       	sbiw	r28, 0x0b	; 11
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	8f 83       	std	Y+7, r24	; 0x07
    1306:	48 87       	std	Y+8, r20	; 0x08
    1308:	59 87       	std	Y+9, r21	; 0x09
    130a:	6a 87       	std	Y+10, r22	; 0x0a
    130c:	7b 87       	std	Y+11, r23	; 0x0b

	#elif Timer1_Prescaler==_8_prescalar
		u16 ICR1_value=(2000000/(freq))-1;

	#elif Timer1_Prescaler==_64_prescalar
		u16 ICR1_value=(1000000/(freq*4))-1;
    130e:	88 85       	ldd	r24, Y+8	; 0x08
    1310:	99 85       	ldd	r25, Y+9	; 0x09
    1312:	aa 85       	ldd	r26, Y+10	; 0x0a
    1314:	bb 85       	ldd	r27, Y+11	; 0x0b
    1316:	9c 01       	movw	r18, r24
    1318:	ad 01       	movw	r20, r26
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	44 1f       	adc	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	44 1f       	adc	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	80 e4       	ldi	r24, 0x40	; 64
    132c:	92 e4       	ldi	r25, 0x42	; 66
    132e:	af e0       	ldi	r26, 0x0F	; 15
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__udivmodsi4>
    133a:	da 01       	movw	r26, r20
    133c:	c9 01       	movw	r24, r18
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
	#elif Timer1_Prescaler==_1024_prescalar
		u16 ICR1_value=(1000000/(freq*64))-1;

#endif

		timer1_max_value(ICR1_value);
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	0e 94 66 09 	call	0x12cc	; 0x12cc <timer1_max_value>
	#if Timer1_modeofcmp==Inverting
		duty=100-duty;
	#endif

	u32 OCR1A_value;
	OCR1A_value=(duty*ICR1_value/100);
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	ac 01       	movw	r20, r24
    1358:	24 9f       	mul	r18, r20
    135a:	c0 01       	movw	r24, r0
    135c:	25 9f       	mul	r18, r21
    135e:	90 0d       	add	r25, r0
    1360:	34 9f       	mul	r19, r20
    1362:	90 0d       	add	r25, r0
    1364:	11 24       	eor	r1, r1
    1366:	24 e6       	ldi	r18, 0x64	; 100
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    1370:	cb 01       	movw	r24, r22
    1372:	cc 01       	movw	r24, r24
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	ab 83       	std	Y+3, r26	; 0x03
    137e:	bc 83       	std	Y+4, r27	; 0x04

	return OCR1A_value;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1384:	2b 96       	adiw	r28, 0x0b	; 11
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <timer1_cmp_value>:

void timer1_cmp_value(u16 value)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <timer1_cmp_value+0x6>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=value;
    13a4:	ea e4       	ldi	r30, 0x4A	; 74
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
	return ;
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <timer1_stop>:

////stops the timer///
void timer1_stop(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=0xf8;
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	8c 93       	st	X, r24
	return;
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <timer1_int_enable>:

void timer1_int_enable(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
#elif Timer0_mode==CTC_mode
	SET_BIT(TIMSK,1);

#endif
	return ;
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <timer1_of_set_callbck>:

void timer1_of_set_callbck(void (*p2f_var)(void))
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <timer1_of_set_callbck+0x6>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	31 f0       	breq	.+12     	; 0x1406 <timer1_of_set_callbck+0x22>
	{
		p2f_11=p2f_var;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	90 93 29 03 	sts	0x0329, r25
    1402:	80 93 28 03 	sts	0x0328, r24
	}
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <timer1_cmpA_set_callbck>:

void timer1_cmpA_set_callbck(void (*p2f_var)(void))
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <timer1_cmpA_set_callbck+0x6>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	31 f0       	breq	.+12     	; 0x1432 <timer1_cmpA_set_callbck+0x22>
	{
		p2f_12=p2f_var;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	90 93 2b 03 	sts	0x032B, r25
    142e:	80 93 2a 03 	sts	0x032A, r24
	}
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <timer1_cmpB_set_callbck>:

void timer1_cmpB_set_callbck(void (*p2f_var)(void))
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <timer1_cmpB_set_callbck+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	31 f0       	breq	.+12     	; 0x145e <timer1_cmpB_set_callbck+0x22>
	{
		p2f_13=p2f_var;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	90 93 2d 03 	sts	0x032D, r25
    145a:	80 93 2c 03 	sts	0x032C, r24
	}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	2f 93       	push	r18
    1474:	3f 93       	push	r19
    1476:	4f 93       	push	r20
    1478:	5f 93       	push	r21
    147a:	6f 93       	push	r22
    147c:	7f 93       	push	r23
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25
    1482:	af 93       	push	r26
    1484:	bf 93       	push	r27
    1486:	ef 93       	push	r30
    1488:	ff 93       	push	r31
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
	p2f_11();
    1492:	e0 91 28 03 	lds	r30, 0x0328
    1496:	f0 91 29 03 	lds	r31, 0x0329
    149a:	09 95       	icall
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	p2f_12();
    14ec:	e0 91 2a 03 	lds	r30, 0x032A
    14f0:	f0 91 2b 03 	lds	r31, 0x032B
    14f4:	09 95       	icall
}
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	p2f_13();
    1546:	e0 91 2c 03 	lds	r30, 0x032C
    154a:	f0 91 2d 03 	lds	r31, 0x032D
    154e:	09 95       	icall
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0f 90       	pop	r0
    1572:	1f 90       	pop	r1
    1574:	18 95       	reti

00001576 <timer0_init>:
#include "Timer/Timer0_Cfg.h"

void (*p2f)()=NULL_PTR;

void timer0_init(void)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,3);

#elif Timer0_mode==Fast_PWM_mode

	#if Timer0_modeofcmp==Non_Inverting  //cmp_mode
		TCCR0|=(Non_Inverting<<4);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 62       	ori	r24, 0x20	; 32
    158a:	8c 93       	st	X, r24
	#elif Timer0_modeofcmp==Inverting
		TCCR0|=(Inverting<<4);

	#endif

	SET_BIT(TCCR0,6);
    158c:	a3 e5       	ldi	r26, 0x53	; 83
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e3 e5       	ldi	r30, 0x53	; 83
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    159a:	a3 e5       	ldi	r26, 0x53	; 83
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e3 e5       	ldi	r30, 0x53	; 83
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	8c 93       	st	X, r24

#endif
	return;
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <timer0_start>:

void timer0_start(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xf8;
    15b6:	a3 e5       	ldi	r26, 0x53	; 83
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e3 e5       	ldi	r30, 0x53	; 83
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	88 7f       	andi	r24, 0xF8	; 248
    15c2:	8c 93       	st	X, r24
	TCCR0 |=Timer0_Prescaler;
    15c4:	a3 e5       	ldi	r26, 0x53	; 83
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e3 e5       	ldi	r30, 0x53	; 83
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	85 60       	ori	r24, 0x05	; 5
    15d0:	8c 93       	st	X, r24
	return;
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <timer0_int_value>:

void timer0_int_value(u8 value)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=value;
    15e4:	e2 e5       	ldi	r30, 0x52	; 82
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	80 83       	st	Z, r24
	return ;
}
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <timer0_set_cmp>:

u8 timer0_set_cmp(u8 duty)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <timer0_set_cmp+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 OCR0_value;
	#if Timer0_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR0_value=(duty*resoultion/100)-1;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	98 2f       	mov	r25, r24
    1608:	88 27       	eor	r24, r24
    160a:	24 e6       	ldi	r18, 0x64	; 100
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	b9 01       	movw	r22, r18
    1610:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__divmodhi4>
    1614:	cb 01       	movw	r24, r22
    1616:	81 50       	subi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01

	return OCR0_value;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <timer0_set_cmp_PC>:

u8 timer0_set_cmp_PC (u8 duty){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <timer0_set_cmp_PC+0x6>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	8a 83       	std	Y+2, r24	; 0x02
	u8 OCR0_value;
	#if Timer0_modeofcmp==Inverting
		duty=100-duty;
	#endif

	OCR0_value = ((duty*resoultion/50)-1);
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	98 2f       	mov	r25, r24
    163c:	88 27       	eor	r24, r24
    163e:	22 e3       	ldi	r18, 0x32	; 50
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	b9 01       	movw	r22, r18
    1644:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__divmodhi4>
    1648:	cb 01       	movw	r24, r22
    164a:	81 50       	subi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <timer0_cmp_value>:

void timer0_cmp_value(u8 value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
	OCR0=value;
    1666:	ec e5       	ldi	r30, 0x5C	; 92
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	80 83       	st	Z, r24
	return ;
}
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <timer0_stop>:

////stops the timer///
void timer0_stop(void)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xf8;
    167e:	a3 e5       	ldi	r26, 0x53	; 83
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e3 e5       	ldi	r30, 0x53	; 83
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	88 7f       	andi	r24, 0xF8	; 248
    168a:	8c 93       	st	X, r24
	return;
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <timer0_int_enable>:

void timer0_int_enable(void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
#elif Timer0_mode==CTC_mode
	SET_BIT(TIMSK,1);

#endif
	return ;
}
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <timer0_of_set_callbck>:

void timer0_of_set_callbck(void (*p2f_var)(void))
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <timer0_of_set_callbck+0x6>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	31 f0       	breq	.+12     	; 0x16c2 <timer0_of_set_callbck+0x22>
	{
		p2f=p2f_var;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	90 93 2f 03 	sts	0x032F, r25
    16be:	80 93 2e 03 	sts	0x032E, r24
	}
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <timer0_cmp_set_callbck>:

void timer0_cmp_set_callbck(void (*p2f_var)(void))
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <timer0_cmp_set_callbck+0x6>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
	if(p2f_var!=NULL_PTR)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	31 f0       	breq	.+12     	; 0x16ee <timer0_cmp_set_callbck+0x22>
	{
		p2f=p2f_var;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	90 93 2f 03 	sts	0x032F, r25
    16ea:	80 93 2e 03 	sts	0x032E, r24
	}
}
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	6f 93       	push	r22
    170c:	7f 93       	push	r23
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	p2f();
    1722:	e0 91 2e 03 	lds	r30, 0x032E
    1726:	f0 91 2f 03 	lds	r31, 0x032F
    172a:	09 95       	icall
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	p2f();
    177c:	e0 91 2e 03 	lds	r30, 0x032E
    1780:	f0 91 2f 03 	lds	r31, 0x032F
    1784:	09 95       	icall
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <ICU_init>:

#include "Timer/ICU/ICU_Interface.h"
#include "Timer/ICU_Cfg.h"

void ICU_init(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,0);
    17b4:	af e4       	ldi	r26, 0x4F	; 79
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ef e4       	ldi	r30, 0x4F	; 79
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8e 7f       	andi	r24, 0xFE	; 254
    17c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    17c2:	af e4       	ldi	r26, 0x4F	; 79
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ef e4       	ldi	r30, 0x4F	; 79
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    17d0:	ae e4       	ldi	r26, 0x4E	; 78
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ee e4       	ldi	r30, 0x4E	; 78
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	87 7f       	andi	r24, 0xF7	; 247
    17dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    17de:	ae e4       	ldi	r26, 0x4E	; 78
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ee e4       	ldi	r30, 0x4E	; 78
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 7e       	andi	r24, 0xEF	; 239
    17ea:	8c 93       	st	X, r24

#if ICU_Starting_Edge==ICU_Rising_edge
	SET_BIT(TCCR1B,6);
    17ec:	ae e4       	ldi	r26, 0x4E	; 78
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	8c 93       	st	X, r24
#elif ICU_Starting_Edge==ICU_falling_edge
	CLR_BIT(TCCR1B,6);
#endif

	SET_BIT(TIMSK,5);
    17fa:	a9 e5       	ldi	r26, 0x59	; 89
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e9 e5       	ldi	r30, 0x59	; 89
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 62       	ori	r24, 0x20	; 32
    1806:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,0);
    1808:	ae e4       	ldi	r26, 0x4E	; 78
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ee e4       	ldi	r30, 0x4E	; 78
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    1816:	ae e4       	ldi	r26, 0x4E	; 78
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ee e4       	ldi	r30, 0x4E	; 78
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8b 7f       	andi	r24, 0xFB	; 251
    1830:	8c 93       	st	X, r24
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <ICU_get_Duty_Cycle>:

void ICU_get_Duty_Cycle(u8 * duty)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <ICU_get_Duty_Cycle+0x6>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01

}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <ICU_get_Frequency>:

void ICU_get_Frequency(u32 * frequency)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <ICU_get_Frequency+0x6>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01

}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <__vector_6>:

ISR(INT1_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	static u8 edge_f = ICU_Starting_Edge;

}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <SPI_init>:
#include "LCD/LCD_Interface.h"

static void (*ptrr)(u8);

void SPI_init()
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,5);
    1890:	ad e2       	ldi	r26, 0x2D	; 45
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ed e2       	ldi	r30, 0x2D	; 45
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 62       	ori	r24, 0x20	; 32
    189c:	8c 93       	st	X, r24

	#if SPI_Mode==Slave
			CLR_BIT(SPCR,4);
    189e:	ad e2       	ldi	r26, 0x2D	; 45
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	ed e2       	ldi	r30, 0x2D	; 45
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8f 7e       	andi	r24, 0xEF	; 239
    18aa:	8c 93       	st	X, r24
	#endif

	#if Clock_pol==Rising
		CLR_BIT(SPCR,3);
	#elif Clock_pol==falling
		SET_BIT(SPCR,3);
    18ac:	ad e2       	ldi	r26, 0x2D	; 45
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ed e2       	ldi	r30, 0x2D	; 45
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	8c 93       	st	X, r24
	#endif

	#if Clock_phase==Sample
		CLR_BIT(SPCR,2);
	#elif Clock_phase==Setup
		SET_BIT(SPCR,2);
    18ba:	ad e2       	ldi	r26, 0x2D	; 45
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ed e2       	ldi	r30, 0x2D	; 45
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	84 60       	ori	r24, 0x04	; 4
    18c6:	8c 93       	st	X, r24
	#endif

	SET_BIT(SPCR,6);	//SPI Enable
    18c8:	ad e2       	ldi	r26, 0x2D	; 45
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ed e2       	ldi	r30, 0x2D	; 45
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 64       	ori	r24, 0x40	; 64
    18d4:	8c 93       	st	X, r24
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <SPI_Enable_int>:

void SPI_Enable_int()
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,7);
    18e4:	ad e2       	ldi	r26, 0x2D	; 45
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ed e2       	ldi	r30, 0x2D	; 45
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8c 93       	st	X, r24
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <SPI_Transceive>:

u8 SPI_Transceive(u8 data)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
	while(READ_BIT(SPSR,6));
    1904:	ee e2       	ldi	r30, 0x2E	; 46
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	82 95       	swap	r24
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	83 70       	andi	r24, 0x03	; 3
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	88 23       	and	r24, r24
    191c:	99 f7       	brne	.-26     	; 0x1904 <SPI_Transceive+0xc>
	SPDR=data;
    191e:	ef e2       	ldi	r30, 0x2F	; 47
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,7));
    1926:	ee e2       	ldi	r30, 0x2E	; 46
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 23       	and	r24, r24
    192e:	dc f7       	brge	.-10     	; 0x1926 <SPI_Transceive+0x2e>
	return SPDR;
    1930:	ef e2       	ldi	r30, 0x2F	; 47
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
}
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <SPI_Send_data>:

void SPI_Send_data(u8 data)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
	while(1 == READ_BIT(SPSR,6));
    194a:	ee e2       	ldi	r30, 0x2E	; 46
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	82 95       	swap	r24
    1952:	86 95       	lsr	r24
    1954:	86 95       	lsr	r24
    1956:	83 70       	andi	r24, 0x03	; 3
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	88 23       	and	r24, r24
    1962:	99 f7       	brne	.-26     	; 0x194a <SPI_Send_data+0xc>
	SPDR=data;
    1964:	ef e2       	ldi	r30, 0x2F	; 47
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	80 83       	st	Z, r24
}
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <SPI_Set_Callback>:


void SPI_Set_Callback(void (*ptrf)(u8))
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <SPI_Set_Callback+0x6>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
	ptrr=ptrf;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	90 93 31 03 	sts	0x0331, r25
    198a:	80 93 30 03 	sts	0x0330, r24
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <__vector_12>:


ISR(SPI_STC_vect)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	ptrr(SPDR);
    19c2:	e0 91 30 03 	lds	r30, 0x0330
    19c6:	f0 91 31 03 	lds	r31, 0x0331
    19ca:	af e2       	ldi	r26, 0x2F	; 47
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	8c 91       	ld	r24, X
    19d0:	09 95       	icall
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <I2c_Master_init>:

#include "I2C_Interface.h"
#include "LCD/LCD_Interface.h"

void I2c_Master_init(u8 add)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	89 83       	std	Y+1, r24	; 0x01
	if(add<128)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	88 23       	and	r24, r24
    1a08:	2c f0       	brlt	.+10     	; 0x1a14 <I2c_Master_init+0x1c>
	{
		TWAR=add<<1;
    1a0a:	e2 e2       	ldi	r30, 0x22	; 34
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	88 0f       	add	r24, r24
    1a12:	80 83       	st	Z, r24
	}

	TWBR=12;
    1a14:	e0 e2       	ldi	r30, 0x20	; 32
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8c e0       	ldi	r24, 0x0C	; 12
    1a1a:	80 83       	st	Z, r24

	CLR_BIT(TWSR,0);
    1a1c:	a1 e2       	ldi	r26, 0x21	; 33
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e1 e2       	ldi	r30, 0x21	; 33
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8e 7f       	andi	r24, 0xFE	; 254
    1a28:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    1a2a:	a1 e2       	ldi	r26, 0x21	; 33
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e1 e2       	ldi	r30, 0x21	; 33
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8d 7f       	andi	r24, 0xFD	; 253
    1a36:	8c 93       	st	X, r24

	SET_BIT(TWCR,6);
    1a38:	a6 e5       	ldi	r26, 0x56	; 86
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e6 e5       	ldi	r30, 0x56	; 86
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	8c 93       	st	X, r24
	SET_BIT(TWCR,2);
    1a46:	a6 e5       	ldi	r26, 0x56	; 86
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e6 e5       	ldi	r30, 0x56	; 86
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	84 60       	ori	r24, 0x04	; 4
    1a52:	8c 93       	st	X, r24
}
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <I2C_SendStartCondition>:

void I2C_SendStartCondition(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,5);
    1a64:	a6 e5       	ldi	r26, 0x56	; 86
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e6 e5       	ldi	r30, 0x56	; 86
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 62       	ori	r24, 0x20	; 32
    1a70:	8c 93       	st	X, r24

	SET_BIT(TWCR,2);
    1a72:	a6 e5       	ldi	r26, 0x56	; 86
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e6 e5       	ldi	r30, 0x56	; 86
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	84 60       	ori	r24, 0x04	; 4
    1a7e:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1a80:	a6 e5       	ldi	r26, 0x56	; 86
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1a8e:	e6 e5       	ldi	r30, 0x56	; 86
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 23       	and	r24, r24
    1a96:	dc f7       	brge	.-10     	; 0x1a8e <I2C_SendStartCondition+0x32>
	while((TWSR&0xf8)!=0x08);
    1a98:	e1 e2       	ldi	r30, 0x21	; 33
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	b1 f7       	brne	.-20     	; 0x1a98 <I2C_SendStartCondition+0x3c>
}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <I2C_SendRepStartCondition>:

void I2C_SendRepStartCondition(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,5);
    1aba:	a6 e5       	ldi	r26, 0x56	; 86
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e6 e5       	ldi	r30, 0x56	; 86
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 62       	ori	r24, 0x20	; 32
    1ac6:	8c 93       	st	X, r24

	SET_BIT(TWCR,2);
    1ac8:	a6 e5       	ldi	r26, 0x56	; 86
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e6 e5       	ldi	r30, 0x56	; 86
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	84 60       	ori	r24, 0x04	; 4
    1ad4:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1ad6:	a6 e5       	ldi	r26, 0x56	; 86
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e6 e5       	ldi	r30, 0x56	; 86
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1ae4:	e6 e5       	ldi	r30, 0x56	; 86
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	dc f7       	brge	.-10     	; 0x1ae4 <I2C_SendRepStartCondition+0x32>
	while((TWSR&0xf8)!=0x10);
    1aee:	e1 e2       	ldi	r30, 0x21	; 33
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	88 7f       	andi	r24, 0xF8	; 248
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	80 31       	cpi	r24, 0x10	; 16
    1afe:	91 05       	cpc	r25, r1
    1b00:	b1 f7       	brne	.-20     	; 0x1aee <I2C_SendRepStartCondition+0x3c>
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <I2C_SendStopCondition>:

void I2C_SendStopCondition(void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,4);
    1b10:	a6 e5       	ldi	r26, 0x56	; 86
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e6 e5       	ldi	r30, 0x56	; 86
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 61       	ori	r24, 0x10	; 16
    1b1c:	8c 93       	st	X, r24
	SET_BIT(TWCR,2);
    1b1e:	a6 e5       	ldi	r26, 0x56	; 86
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e6 e5       	ldi	r30, 0x56	; 86
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1b2c:	a6 e5       	ldi	r26, 0x56	; 86
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e6 e5       	ldi	r30, 0x56	; 86
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 68       	ori	r24, 0x80	; 128
    1b38:	8c 93       	st	X, r24
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <I2C_SendSlaveAdd_Write>:

void I2C_SendSlaveAdd_Write(u8 slave_add)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=slave_add<<1;
    1b4c:	e3 e2       	ldi	r30, 0x23	; 35
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	88 0f       	add	r24, r24
    1b54:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    1b56:	a3 e2       	ldi	r26, 0x23	; 35
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e3 e2       	ldi	r30, 0x23	; 35
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8e 7f       	andi	r24, 0xFE	; 254
    1b62:	8c 93       	st	X, r24
	CLR_BIT(TWCR,5);
    1b64:	a6 e5       	ldi	r26, 0x56	; 86
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e6 e5       	ldi	r30, 0x56	; 86
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8f 7d       	andi	r24, 0xDF	; 223
    1b70:	8c 93       	st	X, r24

	SET_BIT(TWCR,7);
    1b72:	a6 e5       	ldi	r26, 0x56	; 86
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e6 e5       	ldi	r30, 0x56	; 86
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 68       	ori	r24, 0x80	; 128
    1b7e:	8c 93       	st	X, r24
	SET_BIT(TWCR,2);
    1b80:	a6 e5       	ldi	r26, 0x56	; 86
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e6 e5       	ldi	r30, 0x56	; 86
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	84 60       	ori	r24, 0x04	; 4
    1b8c:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1b8e:	e6 e5       	ldi	r30, 0x56	; 86
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	88 23       	and	r24, r24
    1b96:	dc f7       	brge	.-10     	; 0x1b8e <I2C_SendSlaveAdd_Write+0x4e>
	while((TWSR&0xf8)!=0x18);
    1b98:	e1 e2       	ldi	r30, 0x21	; 33
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	88 7f       	andi	r24, 0xF8	; 248
    1ba4:	90 70       	andi	r25, 0x00	; 0
    1ba6:	88 31       	cpi	r24, 0x18	; 24
    1ba8:	91 05       	cpc	r25, r1
    1baa:	b1 f7       	brne	.-20     	; 0x1b98 <I2C_SendSlaveAdd_Write+0x58>
}
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <I2C_SendSlaveAdd_Read>:

void I2C_SendSlaveAdd_Read(u8 slave_add)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01

	TWDR=slave_add<<1;
    1bc0:	e3 e2       	ldi	r30, 0x23	; 35
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	88 0f       	add	r24, r24
    1bc8:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    1bca:	a3 e2       	ldi	r26, 0x23	; 35
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e3 e2       	ldi	r30, 0x23	; 35
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	81 60       	ori	r24, 0x01	; 1
    1bd6:	8c 93       	st	X, r24
	CLR_BIT(TWCR,5);
    1bd8:	a6 e5       	ldi	r26, 0x56	; 86
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e6 e5       	ldi	r30, 0x56	; 86
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7d       	andi	r24, 0xDF	; 223
    1be4:	8c 93       	st	X, r24

	SET_BIT(TWCR,2);
    1be6:	a6 e5       	ldi	r26, 0x56	; 86
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e6 e5       	ldi	r30, 0x56	; 86
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	84 60       	ori	r24, 0x04	; 4
    1bf2:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1bf4:	a6 e5       	ldi	r26, 0x56	; 86
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e6 e5       	ldi	r30, 0x56	; 86
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 68       	ori	r24, 0x80	; 128
    1c00:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1c02:	e6 e5       	ldi	r30, 0x56	; 86
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	88 23       	and	r24, r24
    1c0a:	dc f7       	brge	.-10     	; 0x1c02 <I2C_SendSlaveAdd_Read+0x4e>
	while((TWSR&0xf8)!=0x40);
    1c0c:	e1 e2       	ldi	r30, 0x21	; 33
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	88 7f       	andi	r24, 0xF8	; 248
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	80 34       	cpi	r24, 0x40	; 64
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	b1 f7       	brne	.-20     	; 0x1c0c <I2C_SendSlaveAdd_Read+0x58>
}
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <I2C_MasterData_Send>:


void I2C_MasterData_Send(u8 data)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    1c34:	e3 e2       	ldi	r30, 0x23	; 35
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	80 83       	st	Z, r24

	SET_BIT(TWCR,2);
    1c3c:	a6 e5       	ldi	r26, 0x56	; 86
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e6 e5       	ldi	r30, 0x56	; 86
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	84 60       	ori	r24, 0x04	; 4
    1c48:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1c4a:	a6 e5       	ldi	r26, 0x56	; 86
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e6 e5       	ldi	r30, 0x56	; 86
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1c58:	e6 e5       	ldi	r30, 0x56	; 86
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	dc f7       	brge	.-10     	; 0x1c58 <I2C_MasterData_Send+0x30>
	while((TWSR&0xf8)!=0x28);
    1c62:	e1 e2       	ldi	r30, 0x21	; 33
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	88 7f       	andi	r24, 0xF8	; 248
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	88 32       	cpi	r24, 0x28	; 40
    1c72:	91 05       	cpc	r25, r1
    1c74:	b1 f7       	brne	.-20     	; 0x1c62 <I2C_MasterData_Send+0x3a>
}
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <I2C_MasterData_Read>:

u8 I2C_MasterData_Read(void)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,7);
    1c86:	a6 e5       	ldi	r26, 0x56	; 86
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e6 e5       	ldi	r30, 0x56	; 86
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	8c 93       	st	X, r24
	SET_BIT(TWCR,2);
    1c94:	a6 e5       	ldi	r26, 0x56	; 86
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e6 e5       	ldi	r30, 0x56	; 86
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	84 60       	ori	r24, 0x04	; 4
    1ca0:	8c 93       	st	X, r24
	SET_BIT(TWCR,6);
    1ca2:	a6 e5       	ldi	r26, 0x56	; 86
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e6 e5       	ldi	r30, 0x56	; 86
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	80 64       	ori	r24, 0x40	; 64
    1cae:	8c 93       	st	X, r24
	while(!READ_BIT(TWCR,7));
    1cb0:	e6 e5       	ldi	r30, 0x56	; 86
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 23       	and	r24, r24
    1cb8:	dc f7       	brge	.-10     	; 0x1cb0 <I2C_MasterData_Read+0x32>
	while((TWSR&0xf8)!=0x50);
    1cba:	e1 e2       	ldi	r30, 0x21	; 33
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	88 7f       	andi	r24, 0xF8	; 248
    1cc6:	90 70       	andi	r25, 0x00	; 0
    1cc8:	80 35       	cpi	r24, 0x50	; 80
    1cca:	91 05       	cpc	r25, r1
    1ccc:	b1 f7       	brne	.-20     	; 0x1cba <I2C_MasterData_Read+0x3c>
	return TWDR;
    1cce:	e3 e2       	ldi	r30, 0x23	; 35
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <I2C_NACK_Send>:

void I2C_NACK_Send()
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2);
    1ce2:	a6 e5       	ldi	r26, 0x56	; 86
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e6 e5       	ldi	r30, 0x56	; 86
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	84 60       	ori	r24, 0x04	; 4
    1cee:	8c 93       	st	X, r24
	SET_BIT(TWCR,7);
    1cf0:	a6 e5       	ldi	r26, 0x56	; 86
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e6 e5       	ldi	r30, 0x56	; 86
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 68       	ori	r24, 0x80	; 128
    1cfc:	8c 93       	st	X, r24
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <GIE_Enable>:
#include "MemMap.h"
#include "UTILS.h"
#include "GI/GI_Interface.h"

void GIE_Enable(void)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1d0c:	af e5       	ldi	r26, 0x5F	; 95
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ef e5       	ldi	r30, 0x5F	; 95
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	80 68       	ori	r24, 0x80	; 128
    1d18:	8c 93       	st	X, r24
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <GIE_Disable>:

void GIE_Disable(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1d28:	af e5       	ldi	r26, 0x5F	; 95
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	ef e5       	ldi	r30, 0x5F	; 95
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 77       	andi	r24, 0x7F	; 127
    1d34:	8c 93       	st	X, r24
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <EXTI_Enable>:
#include "Ext_Int/Ext_Int_Interface.h"

static void (*ptr3) (void) = NULL;

void EXTI_Enable(EXTI_SOURCE Int_source,TRIGGER_SOURCE trg_source)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	2a 97       	sbiw	r28, 0x0a	; 10
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	6a 83       	std	Y+2, r22	; 0x02
	switch (Int_source) {
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3a 87       	std	Y+10, r19	; 0x0a
    1d5c:	29 87       	std	Y+9, r18	; 0x09
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <EXTI_Enable+0x2e>
    1d68:	6d c0       	rjmp	.+218    	; 0x1e44 <EXTI_Enable+0x108>
    1d6a:	29 85       	ldd	r18, Y+9	; 0x09
    1d6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <EXTI_Enable+0x3a>
    1d74:	c9 c0       	rjmp	.+402    	; 0x1f08 <EXTI_Enable+0x1cc>
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <EXTI_Enable+0x44>
    1d7e:	e9 c0       	rjmp	.+466    	; 0x1f52 <EXTI_Enable+0x216>
		case EXTI0:
			switch (trg_source) {
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	38 87       	std	Y+8, r19	; 0x08
    1d88:	2f 83       	std	Y+7, r18	; 0x07
    1d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8c:	98 85       	ldd	r25, Y+8	; 0x08
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	91 05       	cpc	r25, r1
    1d92:	21 f1       	breq	.+72     	; 0x1ddc <EXTI_Enable+0xa0>
    1d94:	2f 81       	ldd	r18, Y+7	; 0x07
    1d96:	38 85       	ldd	r19, Y+8	; 0x08
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <EXTI_Enable+0x6c>
    1d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1da0:	98 85       	ldd	r25, Y+8	; 0x08
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <EXTI_Enable+0x82>
    1da6:	46 c0       	rjmp	.+140    	; 0x1e34 <EXTI_Enable+0xf8>
    1da8:	2f 81       	ldd	r18, Y+7	; 0x07
    1daa:	38 85       	ldd	r19, Y+8	; 0x08
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	21 f1       	breq	.+72     	; 0x1dfa <EXTI_Enable+0xbe>
    1db2:	8f 81       	ldd	r24, Y+7	; 0x07
    1db4:	98 85       	ldd	r25, Y+8	; 0x08
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	71 f1       	breq	.+92     	; 0x1e18 <EXTI_Enable+0xdc>
    1dbc:	3b c0       	rjmp	.+118    	; 0x1e34 <EXTI_Enable+0xf8>
				case EXTI_RISING_EDGE:
					SET_BIT(MCUCR,0);
    1dbe:	a5 e5       	ldi	r26, 0x55	; 85
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 e5       	ldi	r30, 0x55	; 85
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1dcc:	a5 e5       	ldi	r26, 0x55	; 85
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e5 e5       	ldi	r30, 0x55	; 85
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	82 60       	ori	r24, 0x02	; 2
    1dd8:	8c 93       	st	X, r24
    1dda:	2c c0       	rjmp	.+88     	; 0x1e34 <EXTI_Enable+0xf8>
					break;

				case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCR,0);
    1ddc:	a5 e5       	ldi	r26, 0x55	; 85
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e5       	ldi	r30, 0x55	; 85
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
    1dea:	a5 e5       	ldi	r26, 0x55	; 85
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e5       	ldi	r30, 0x55	; 85
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	82 60       	ori	r24, 0x02	; 2
    1df6:	8c 93       	st	X, r24
    1df8:	1d c0       	rjmp	.+58     	; 0x1e34 <EXTI_Enable+0xf8>
					break;

				case EXTI_LOW_LEVEL:
					CLR_BIT(MCUCR,0);
    1dfa:	a5 e5       	ldi	r26, 0x55	; 85
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e5       	ldi	r30, 0x55	; 85
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8e 7f       	andi	r24, 0xFE	; 254
    1e06:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1e08:	a5 e5       	ldi	r26, 0x55	; 85
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e5 e5       	ldi	r30, 0x55	; 85
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8d 7f       	andi	r24, 0xFD	; 253
    1e14:	8c 93       	st	X, r24
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <EXTI_Enable+0xf8>
					break;

				case EXTI_ANY_LOGICAL_CHANGE:
					SET_BIT(MCUCR,0);
    1e18:	a5 e5       	ldi	r26, 0x55	; 85
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e5       	ldi	r30, 0x55	; 85
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,1);
    1e26:	a5 e5       	ldi	r26, 0x55	; 85
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e5       	ldi	r30, 0x55	; 85
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8d 7f       	andi	r24, 0xFD	; 253
    1e32:	8c 93       	st	X, r24

				default:
					break;
			}

				SET_BIT(GICR,6);
    1e34:	ab e5       	ldi	r26, 0x5B	; 91
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	eb e5       	ldi	r30, 0x5B	; 91
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 64       	ori	r24, 0x40	; 64
    1e40:	8c 93       	st	X, r24
    1e42:	87 c0       	rjmp	.+270    	; 0x1f52 <EXTI_Enable+0x216>
			break;
		case EXTI1:
			switch (trg_source) {
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	3e 83       	std	Y+6, r19	; 0x06
    1e4c:	2d 83       	std	Y+5, r18	; 0x05
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 05       	cpc	r25, r1
    1e56:	21 f1       	breq	.+72     	; 0x1ea0 <EXTI_Enable+0x164>
    1e58:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <EXTI_Enable+0x130>
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	61 f0       	breq	.+24     	; 0x1e82 <EXTI_Enable+0x146>
    1e6a:	46 c0       	rjmp	.+140    	; 0x1ef8 <EXTI_Enable+0x1bc>
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	21 f1       	breq	.+72     	; 0x1ebe <EXTI_Enable+0x182>
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	71 f1       	breq	.+92     	; 0x1edc <EXTI_Enable+0x1a0>
    1e80:	3b c0       	rjmp	.+118    	; 0x1ef8 <EXTI_Enable+0x1bc>
				case EXTI_RISING_EDGE:
					SET_BIT(MCUCR,2);
    1e82:	a5 e5       	ldi	r26, 0x55	; 85
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e5       	ldi	r30, 0x55	; 85
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	84 60       	ori	r24, 0x04	; 4
    1e8e:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1e90:	a5 e5       	ldi	r26, 0x55	; 85
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e5       	ldi	r30, 0x55	; 85
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 60       	ori	r24, 0x08	; 8
    1e9c:	8c 93       	st	X, r24
    1e9e:	2c c0       	rjmp	.+88     	; 0x1ef8 <EXTI_Enable+0x1bc>
					break;

				case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCR,2);
    1ea0:	a5 e5       	ldi	r26, 0x55	; 85
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e5       	ldi	r30, 0x55	; 85
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	8c 93       	st	X, r24
					SET_BIT(MCUCR,3);
    1eae:	a5 e5       	ldi	r26, 0x55	; 85
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e5       	ldi	r30, 0x55	; 85
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 60       	ori	r24, 0x08	; 8
    1eba:	8c 93       	st	X, r24
    1ebc:	1d c0       	rjmp	.+58     	; 0x1ef8 <EXTI_Enable+0x1bc>
					break;

				case EXTI_LOW_LEVEL:
					CLR_BIT(MCUCR,2);
    1ebe:	a5 e5       	ldi	r26, 0x55	; 85
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e5       	ldi	r30, 0x55	; 85
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8b 7f       	andi	r24, 0xFB	; 251
    1eca:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1ecc:	a5 e5       	ldi	r26, 0x55	; 85
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e5       	ldi	r30, 0x55	; 85
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	87 7f       	andi	r24, 0xF7	; 247
    1ed8:	8c 93       	st	X, r24
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <EXTI_Enable+0x1bc>
					break;

				case EXTI_ANY_LOGICAL_CHANGE:
					SET_BIT(MCUCR,2);
    1edc:	a5 e5       	ldi	r26, 0x55	; 85
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e5       	ldi	r30, 0x55	; 85
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	84 60       	ori	r24, 0x04	; 4
    1ee8:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1eea:	a5 e5       	ldi	r26, 0x55	; 85
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e5 e5       	ldi	r30, 0x55	; 85
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	87 7f       	andi	r24, 0xF7	; 247
    1ef6:	8c 93       	st	X, r24

				default:
					break;
			}

			SET_BIT(GICR,7);
    1ef8:	ab e5       	ldi	r26, 0x5B	; 91
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	eb e5       	ldi	r30, 0x5B	; 91
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	80 68       	ori	r24, 0x80	; 128
    1f04:	8c 93       	st	X, r24
    1f06:	25 c0       	rjmp	.+74     	; 0x1f52 <EXTI_Enable+0x216>
			break;
		case EXTI2:
			switch (trg_source) {
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3c 83       	std	Y+4, r19	; 0x04
    1f10:	2b 83       	std	Y+3, r18	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	31 f0       	breq	.+12     	; 0x1f26 <EXTI_Enable+0x1ea>
    1f1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1e:	21 30       	cpi	r18, 0x01	; 1
    1f20:	31 05       	cpc	r19, r1
    1f22:	49 f0       	breq	.+18     	; 0x1f36 <EXTI_Enable+0x1fa>
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <EXTI_Enable+0x208>
				case EXTI_RISING_EDGE:
					SET_BIT(MCUCSR,6);
    1f26:	a4 e5       	ldi	r26, 0x54	; 84
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e4 e5       	ldi	r30, 0x54	; 84
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 64       	ori	r24, 0x40	; 64
    1f32:	8c 93       	st	X, r24
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <EXTI_Enable+0x208>
					break;

				case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCSR,6);
    1f36:	a4 e5       	ldi	r26, 0x54	; 84
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e4 e5       	ldi	r30, 0x54	; 84
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8f 7b       	andi	r24, 0xBF	; 191
    1f42:	8c 93       	st	X, r24

				default:
					break;
			}

			SET_BIT(GICR,5);
    1f44:	ab e5       	ldi	r26, 0x5B	; 91
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	eb e5       	ldi	r30, 0x5B	; 91
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 62       	ori	r24, 0x20	; 32
    1f50:	8c 93       	st	X, r24
			break;

		default:
			break;
		}
}
    1f52:	2a 96       	adiw	r28, 0x0a	; 10
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <EXTI_Disable>:


void EXTI_Disable(EXTI_SOURCE Int_source)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <EXTI_Disable+0x6>
    1f6a:	0f 92       	push	r0
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	89 83       	std	Y+1, r24	; 0x01
	switch (Int_source) {
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3b 83       	std	Y+3, r19	; 0x03
    1f7a:	2a 83       	std	Y+2, r18	; 0x02
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	89 f0       	breq	.+34     	; 0x1fa8 <EXTI_Disable+0x44>
    1f86:	2a 81       	ldd	r18, Y+2	; 0x02
    1f88:	3b 81       	ldd	r19, Y+3	; 0x03
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	a1 f0       	breq	.+40     	; 0x1fb8 <EXTI_Disable+0x54>
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	b9 f4       	brne	.+46     	; 0x1fc6 <EXTI_Disable+0x62>
		case EXTI0:
			CLR_BIT(GICR,6);
    1f98:	ab e5       	ldi	r26, 0x5B	; 91
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e5       	ldi	r30, 0x5B	; 91
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	8f 7b       	andi	r24, 0xBF	; 191
    1fa4:	8c 93       	st	X, r24
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <EXTI_Disable+0x62>
			break;
		case EXTI1:
			CLR_BIT(GICR,7);
    1fa8:	ab e5       	ldi	r26, 0x5B	; 91
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e5       	ldi	r30, 0x5B	; 91
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 77       	andi	r24, 0x7F	; 127
    1fb4:	8c 93       	st	X, r24
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <EXTI_Disable+0x62>
			break;
		case EXTI2:
			CLR_BIT(GICR,5);
    1fb8:	ab e5       	ldi	r26, 0x5B	; 91
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	eb e5       	ldi	r30, 0x5B	; 91
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 7d       	andi	r24, 0xDF	; 223
    1fc4:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <EXTI2_SetCallBack>:

void EXTI2_SetCallBack (void (*p2f_var) (void))
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <EXTI2_SetCallBack+0x6>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	ptr3 = p2f_var ;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	90 93 33 03 	sts	0x0333, r25
    1fe8:	80 93 32 03 	sts	0x0332, r24
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <__vector_3>:

ISR(INT2_vect){
    1ff6:	1f 92       	push	r1
    1ff8:	0f 92       	push	r0
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	0f 92       	push	r0
    1ffe:	11 24       	eor	r1, r1
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	if(ptr3 != NULL)
    2020:	80 91 32 03 	lds	r24, 0x0332
    2024:	90 91 33 03 	lds	r25, 0x0333
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	29 f0       	breq	.+10     	; 0x2036 <__vector_3+0x40>
	ptr3();
    202c:	e0 91 32 03 	lds	r30, 0x0332
    2030:	f0 91 33 03 	lds	r31, 0x0333
    2034:	09 95       	icall
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	ff 91       	pop	r31
    203c:	ef 91       	pop	r30
    203e:	bf 91       	pop	r27
    2040:	af 91       	pop	r26
    2042:	9f 91       	pop	r25
    2044:	8f 91       	pop	r24
    2046:	7f 91       	pop	r23
    2048:	6f 91       	pop	r22
    204a:	5f 91       	pop	r21
    204c:	4f 91       	pop	r20
    204e:	3f 91       	pop	r19
    2050:	2f 91       	pop	r18
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <DIO_InitPin>:
#include "DIO/DIO_Inteface.h"
#include "DIO/DIO_Private.h"
#include "DIO/DIO_Cfg.h"

static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type direction)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	28 97       	sbiw	r28, 0x08	; 8
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	6a 83       	std	Y+2, r22	; 0x02
	if(direction==OUTPUT)
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	88 23       	and	r24, r24
    2078:	09 f0       	breq	.+2      	; 0x207c <DIO_InitPin+0x20>
    207a:	d9 c0       	rjmp	.+434    	; 0x222e <DIO_InitPin+0x1d2>
	{
		switch (pin/8)
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	86 95       	lsr	r24
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	38 87       	std	Y+8, r19	; 0x08
    208a:	2f 83       	std	Y+7, r18	; 0x07
    208c:	8f 81       	ldd	r24, Y+7	; 0x07
    208e:	98 85       	ldd	r25, Y+8	; 0x08
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <DIO_InitPin+0x3c>
    2096:	44 c0       	rjmp	.+136    	; 0x2120 <DIO_InitPin+0xc4>
    2098:	2f 81       	ldd	r18, Y+7	; 0x07
    209a:	38 85       	ldd	r19, Y+8	; 0x08
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	2c f4       	brge	.+10     	; 0x20ac <DIO_InitPin+0x50>
    20a2:	8f 81       	ldd	r24, Y+7	; 0x07
    20a4:	98 85       	ldd	r25, Y+8	; 0x08
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <DIO_InitPin+0x6a>
    20aa:	7e c2       	rjmp	.+1276   	; 0x25a8 <DIO_InitPin+0x54c>
    20ac:	2f 81       	ldd	r18, Y+7	; 0x07
    20ae:	38 85       	ldd	r19, Y+8	; 0x08
    20b0:	22 30       	cpi	r18, 0x02	; 2
    20b2:	31 05       	cpc	r19, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <DIO_InitPin+0x5c>
    20b6:	61 c0       	rjmp	.+194    	; 0x217a <DIO_InitPin+0x11e>
    20b8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ba:	98 85       	ldd	r25, Y+8	; 0x08
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	91 05       	cpc	r25, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <DIO_InitPin+0x68>
    20c2:	88 c0       	rjmp	.+272    	; 0x21d4 <DIO_InitPin+0x178>
    20c4:	71 c2       	rjmp	.+1250   	; 0x25a8 <DIO_InitPin+0x54c>
		{
			case PA :
			SET_BIT(DDRA,pin%8);
    20c6:	aa e3       	ldi	r26, 0x3A	; 58
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ea e3       	ldi	r30, 0x3A	; 58
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 01       	movw	r18, r24
    20da:	27 70       	andi	r18, 0x07	; 7
    20dc:	30 70       	andi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_InitPin+0x8c>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	2a 95       	dec	r18
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_InitPin+0x88>
    20ec:	84 2b       	or	r24, r20
    20ee:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
    20f0:	ab e3       	ldi	r26, 0x3B	; 59
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	eb e3       	ldi	r30, 0x3B	; 59
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9c 01       	movw	r18, r24
    2104:	27 70       	andi	r18, 0x07	; 7
    2106:	30 70       	andi	r19, 0x00	; 0
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 2e       	mov	r0, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_InitPin+0xb8>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <DIO_InitPin+0xb4>
    2118:	80 95       	com	r24
    211a:	84 23       	and	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	44 c2       	rjmp	.+1160   	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PB :
			SET_BIT(DDRB,pin%8);
    2120:	a7 e3       	ldi	r26, 0x37	; 55
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e7 e3       	ldi	r30, 0x37	; 55
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 01       	movw	r18, r24
    2134:	27 70       	andi	r18, 0x07	; 7
    2136:	30 70       	andi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <DIO_InitPin+0xe6>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	2a 95       	dec	r18
    2144:	e2 f7       	brpl	.-8      	; 0x213e <DIO_InitPin+0xe2>
    2146:	84 2b       	or	r24, r20
    2148:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
    214a:	a8 e3       	ldi	r26, 0x38	; 56
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e8 e3       	ldi	r30, 0x38	; 56
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 01       	movw	r18, r24
    215e:	27 70       	andi	r18, 0x07	; 7
    2160:	30 70       	andi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <DIO_InitPin+0x112>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <DIO_InitPin+0x10e>
    2172:	80 95       	com	r24
    2174:	84 23       	and	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	17 c2       	rjmp	.+1070   	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PC :
			SET_BIT(DDRC,pin%8);
    217a:	a4 e3       	ldi	r26, 0x34	; 52
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e4 e3       	ldi	r30, 0x34	; 52
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	88 2f       	mov	r24, r24
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 01       	movw	r18, r24
    218e:	27 70       	andi	r18, 0x07	; 7
    2190:	30 70       	andi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <DIO_InitPin+0x140>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	2a 95       	dec	r18
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <DIO_InitPin+0x13c>
    21a0:	84 2b       	or	r24, r20
    21a2:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
    21a4:	a5 e3       	ldi	r26, 0x35	; 53
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e5 e3       	ldi	r30, 0x35	; 53
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9c 01       	movw	r18, r24
    21b8:	27 70       	andi	r18, 0x07	; 7
    21ba:	30 70       	andi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_InitPin+0x16c>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_InitPin+0x168>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	ea c1       	rjmp	.+980    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PD :
			SET_BIT(DDRD,pin%8);
    21d4:	a1 e3       	ldi	r26, 0x31	; 49
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e1 e3       	ldi	r30, 0x31	; 49
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9c 01       	movw	r18, r24
    21e8:	27 70       	andi	r18, 0x07	; 7
    21ea:	30 70       	andi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_InitPin+0x19a>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	2a 95       	dec	r18
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_InitPin+0x196>
    21fa:	84 2b       	or	r24, r20
    21fc:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
    21fe:	a2 e3       	ldi	r26, 0x32	; 50
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e2 e3       	ldi	r30, 0x32	; 50
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 01       	movw	r18, r24
    2212:	27 70       	andi	r18, 0x07	; 7
    2214:	30 70       	andi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <DIO_InitPin+0x1c6>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <DIO_InitPin+0x1c2>
    2226:	80 95       	com	r24
    2228:	84 23       	and	r24, r20
    222a:	8c 93       	st	X, r24
    222c:	bd c1       	rjmp	.+890    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INFREE)
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	09 f0       	breq	.+2      	; 0x2236 <DIO_InitPin+0x1da>
    2234:	dd c0       	rjmp	.+442    	; 0x23f0 <DIO_InitPin+0x394>
	{
		switch (pin/8)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	86 95       	lsr	r24
    223a:	86 95       	lsr	r24
    223c:	86 95       	lsr	r24
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3e 83       	std	Y+6, r19	; 0x06
    2244:	2d 83       	std	Y+5, r18	; 0x05
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	09 f4       	brne	.+2      	; 0x2252 <DIO_InitPin+0x1f6>
    2250:	45 c0       	rjmp	.+138    	; 0x22dc <DIO_InitPin+0x280>
    2252:	2d 81       	ldd	r18, Y+5	; 0x05
    2254:	3e 81       	ldd	r19, Y+6	; 0x06
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	2c f4       	brge	.+10     	; 0x2266 <DIO_InitPin+0x20a>
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	71 f0       	breq	.+28     	; 0x2280 <DIO_InitPin+0x224>
    2264:	a1 c1       	rjmp	.+834    	; 0x25a8 <DIO_InitPin+0x54c>
    2266:	2d 81       	ldd	r18, Y+5	; 0x05
    2268:	3e 81       	ldd	r19, Y+6	; 0x06
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <DIO_InitPin+0x216>
    2270:	63 c0       	rjmp	.+198    	; 0x2338 <DIO_InitPin+0x2dc>
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	83 30       	cpi	r24, 0x03	; 3
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <DIO_InitPin+0x222>
    227c:	8b c0       	rjmp	.+278    	; 0x2394 <DIO_InitPin+0x338>
    227e:	94 c1       	rjmp	.+808    	; 0x25a8 <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    2280:	aa e3       	ldi	r26, 0x3A	; 58
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	ea e3       	ldi	r30, 0x3A	; 58
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9c 01       	movw	r18, r24
    2294:	27 70       	andi	r18, 0x07	; 7
    2296:	30 70       	andi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_InitPin+0x246>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	2a 95       	dec	r18
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <DIO_InitPin+0x242>
    22a6:	80 95       	com	r24
    22a8:	84 23       	and	r24, r20
    22aa:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin%8);
    22ac:	ab e3       	ldi	r26, 0x3B	; 59
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e3       	ldi	r30, 0x3B	; 59
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9c 01       	movw	r18, r24
    22c0:	27 70       	andi	r18, 0x07	; 7
    22c2:	30 70       	andi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_InitPin+0x274>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_InitPin+0x270>
    22d4:	80 95       	com	r24
    22d6:	84 23       	and	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	66 c1       	rjmp	.+716    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    22dc:	a7 e3       	ldi	r26, 0x37	; 55
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e7 e3       	ldi	r30, 0x37	; 55
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 01       	movw	r18, r24
    22f0:	27 70       	andi	r18, 0x07	; 7
    22f2:	30 70       	andi	r19, 0x00	; 0
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <DIO_InitPin+0x2a2>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	2a 95       	dec	r18
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <DIO_InitPin+0x29e>
    2302:	80 95       	com	r24
    2304:	84 23       	and	r24, r20
    2306:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin%8);
    2308:	a8 e3       	ldi	r26, 0x38	; 56
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e8 e3       	ldi	r30, 0x38	; 56
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	48 2f       	mov	r20, r24
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 01       	movw	r18, r24
    231c:	27 70       	andi	r18, 0x07	; 7
    231e:	30 70       	andi	r19, 0x00	; 0
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	02 2e       	mov	r0, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_InitPin+0x2d0>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_InitPin+0x2cc>
    2330:	80 95       	com	r24
    2332:	84 23       	and	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	38 c1       	rjmp	.+624    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    2338:	a4 e3       	ldi	r26, 0x34	; 52
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e4 e3       	ldi	r30, 0x34	; 52
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	48 2f       	mov	r20, r24
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9c 01       	movw	r18, r24
    234c:	27 70       	andi	r18, 0x07	; 7
    234e:	30 70       	andi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 c0       	rjmp	.+4      	; 0x235a <DIO_InitPin+0x2fe>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	2a 95       	dec	r18
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <DIO_InitPin+0x2fa>
    235e:	80 95       	com	r24
    2360:	84 23       	and	r24, r20
    2362:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin%8);
    2364:	a5 e3       	ldi	r26, 0x35	; 53
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e3       	ldi	r30, 0x35	; 53
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	48 2f       	mov	r20, r24
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 01       	movw	r18, r24
    2378:	27 70       	andi	r18, 0x07	; 7
    237a:	30 70       	andi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <DIO_InitPin+0x32c>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <DIO_InitPin+0x328>
    238c:	80 95       	com	r24
    238e:	84 23       	and	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	0a c1       	rjmp	.+532    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    2394:	a1 e3       	ldi	r26, 0x31	; 49
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e1 e3       	ldi	r30, 0x31	; 49
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 01       	movw	r18, r24
    23a8:	27 70       	andi	r18, 0x07	; 7
    23aa:	30 70       	andi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_InitPin+0x35a>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	2a 95       	dec	r18
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_InitPin+0x356>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin%8);
    23c0:	a2 e3       	ldi	r26, 0x32	; 50
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e2 e3       	ldi	r30, 0x32	; 50
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	48 2f       	mov	r20, r24
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9c 01       	movw	r18, r24
    23d4:	27 70       	andi	r18, 0x07	; 7
    23d6:	30 70       	andi	r19, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <DIO_InitPin+0x388>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <DIO_InitPin+0x384>
    23e8:	80 95       	com	r24
    23ea:	84 23       	and	r24, r20
    23ec:	8c 93       	st	X, r24
    23ee:	dc c0       	rjmp	.+440    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
		}
	}
	else if(direction==INPULL)
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <DIO_InitPin+0x39c>
    23f6:	d8 c0       	rjmp	.+432    	; 0x25a8 <DIO_InitPin+0x54c>
	{
		switch (pin/8)
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	86 95       	lsr	r24
    23fc:	86 95       	lsr	r24
    23fe:	86 95       	lsr	r24
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3c 83       	std	Y+4, r19	; 0x04
    2406:	2b 83       	std	Y+3, r18	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <DIO_InitPin+0x3b8>
    2412:	44 c0       	rjmp	.+136    	; 0x249c <DIO_InitPin+0x440>
    2414:	2b 81       	ldd	r18, Y+3	; 0x03
    2416:	3c 81       	ldd	r19, Y+4	; 0x04
    2418:	22 30       	cpi	r18, 0x02	; 2
    241a:	31 05       	cpc	r19, r1
    241c:	2c f4       	brge	.+10     	; 0x2428 <DIO_InitPin+0x3cc>
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	71 f0       	breq	.+28     	; 0x2442 <DIO_InitPin+0x3e6>
    2426:	c0 c0       	rjmp	.+384    	; 0x25a8 <DIO_InitPin+0x54c>
    2428:	2b 81       	ldd	r18, Y+3	; 0x03
    242a:	3c 81       	ldd	r19, Y+4	; 0x04
    242c:	22 30       	cpi	r18, 0x02	; 2
    242e:	31 05       	cpc	r19, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <DIO_InitPin+0x3d8>
    2432:	61 c0       	rjmp	.+194    	; 0x24f6 <DIO_InitPin+0x49a>
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	83 30       	cpi	r24, 0x03	; 3
    243a:	91 05       	cpc	r25, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <DIO_InitPin+0x3e4>
    243e:	88 c0       	rjmp	.+272    	; 0x2550 <DIO_InitPin+0x4f4>
    2440:	b3 c0       	rjmp	.+358    	; 0x25a8 <DIO_InitPin+0x54c>
		{
			case PA :
			CLR_BIT(DDRA,pin%8);
    2442:	aa e3       	ldi	r26, 0x3A	; 58
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	ea e3       	ldi	r30, 0x3A	; 58
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 01       	movw	r18, r24
    2456:	27 70       	andi	r18, 0x07	; 7
    2458:	30 70       	andi	r19, 0x00	; 0
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <DIO_InitPin+0x408>
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	2a 95       	dec	r18
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <DIO_InitPin+0x404>
    2468:	80 95       	com	r24
    246a:	84 23       	and	r24, r20
    246c:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin%8);
    246e:	ab e3       	ldi	r26, 0x3B	; 59
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	eb e3       	ldi	r30, 0x3B	; 59
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	48 2f       	mov	r20, r24
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 01       	movw	r18, r24
    2482:	27 70       	andi	r18, 0x07	; 7
    2484:	30 70       	andi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_InitPin+0x436>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_InitPin+0x432>
    2496:	84 2b       	or	r24, r20
    2498:	8c 93       	st	X, r24
    249a:	86 c0       	rjmp	.+268    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PB :
			CLR_BIT(DDRB,pin%8);
    249c:	a7 e3       	ldi	r26, 0x37	; 55
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e7 e3       	ldi	r30, 0x37	; 55
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	48 2f       	mov	r20, r24
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9c 01       	movw	r18, r24
    24b0:	27 70       	andi	r18, 0x07	; 7
    24b2:	30 70       	andi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <DIO_InitPin+0x462>
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	2a 95       	dec	r18
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <DIO_InitPin+0x45e>
    24c2:	80 95       	com	r24
    24c4:	84 23       	and	r24, r20
    24c6:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin%8);
    24c8:	a8 e3       	ldi	r26, 0x38	; 56
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e8 e3       	ldi	r30, 0x38	; 56
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	48 2f       	mov	r20, r24
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9c 01       	movw	r18, r24
    24dc:	27 70       	andi	r18, 0x07	; 7
    24de:	30 70       	andi	r19, 0x00	; 0
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 2e       	mov	r0, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_InitPin+0x490>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_InitPin+0x48c>
    24f0:	84 2b       	or	r24, r20
    24f2:	8c 93       	st	X, r24
    24f4:	59 c0       	rjmp	.+178    	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PC :
			CLR_BIT(DDRC,pin%8);
    24f6:	a4 e3       	ldi	r26, 0x34	; 52
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e4 e3       	ldi	r30, 0x34	; 52
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	48 2f       	mov	r20, r24
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 01       	movw	r18, r24
    250a:	27 70       	andi	r18, 0x07	; 7
    250c:	30 70       	andi	r19, 0x00	; 0
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <DIO_InitPin+0x4bc>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	2a 95       	dec	r18
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <DIO_InitPin+0x4b8>
    251c:	80 95       	com	r24
    251e:	84 23       	and	r24, r20
    2520:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin%8);
    2522:	a5 e3       	ldi	r26, 0x35	; 53
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e5 e3       	ldi	r30, 0x35	; 53
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 01       	movw	r18, r24
    2536:	27 70       	andi	r18, 0x07	; 7
    2538:	30 70       	andi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <DIO_InitPin+0x4ea>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <DIO_InitPin+0x4e6>
    254a:	84 2b       	or	r24, r20
    254c:	8c 93       	st	X, r24
    254e:	2c c0       	rjmp	.+88     	; 0x25a8 <DIO_InitPin+0x54c>
			break;
			case PD :
			CLR_BIT(DDRD,pin%8);
    2550:	a1 e3       	ldi	r26, 0x31	; 49
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e1 e3       	ldi	r30, 0x31	; 49
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	48 2f       	mov	r20, r24
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 01       	movw	r18, r24
    2564:	27 70       	andi	r18, 0x07	; 7
    2566:	30 70       	andi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <DIO_InitPin+0x516>
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	2a 95       	dec	r18
    2574:	e2 f7       	brpl	.-8      	; 0x256e <DIO_InitPin+0x512>
    2576:	80 95       	com	r24
    2578:	84 23       	and	r24, r20
    257a:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin%8);
    257c:	a2 e3       	ldi	r26, 0x32	; 50
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e2 e3       	ldi	r30, 0x32	; 50
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	48 2f       	mov	r20, r24
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 01       	movw	r18, r24
    2590:	27 70       	andi	r18, 0x07	; 7
    2592:	30 70       	andi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_InitPin+0x544>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_InitPin+0x540>
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
			break;
		}
	}
}
    25a8:	28 96       	adiw	r28, 0x08	; 8
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <DIO_Init>:

void DIO_Init(void)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <DIO_Init+0x6>
    25c0:	0f 92       	push	r0
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9b 83       	std	Y+3, r25	; 0x03
    25cc:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    25ce:	19 82       	std	Y+1, r1	; 0x01
    25d0:	19 c0       	rjmp	.+50     	; 0x2604 <DIO_Init+0x4a>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	fc 01       	movw	r30, r24
    25de:	e8 56       	subi	r30, 0x68	; 104
    25e0:	fd 4f       	sbci	r31, 0xFD	; 253
    25e2:	20 81       	ld	r18, Z
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	fc 01       	movw	r30, r24
    25f0:	e7 56       	subi	r30, 0x67	; 103
    25f2:	fd 4f       	sbci	r31, 0xFD	; 253
    25f4:	90 81       	ld	r25, Z
    25f6:	82 2f       	mov	r24, r18
    25f8:	69 2f       	mov	r22, r25
    25fa:	0e 94 2e 10 	call	0x205c	; 0x205c <DIO_InitPin>

void DIO_Init(void)
{
	int length = sizeof(DIO_PinsStatusArr)/sizeof(DIO_PinsStatusArr[0]);
	DIO_Pin_type i;
	for(i =0;i<length;i++)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	28 17       	cp	r18, r24
    2610:	39 07       	cpc	r19, r25
    2612:	fc f2       	brlt	.-66     	; 0x25d2 <DIO_Init+0x18>
	{
		DIO_InitPin(DIO_PinsStatusArr[i].pin,DIO_PinsStatusArr[i].pin_state);
	}
}
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin ,DIO_PinVoltage_type volt)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <DIO_WritePin+0x6>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <DIO_WritePin+0x8>
    2628:	00 d0       	rcall	.+0      	; 0x262a <DIO_WritePin+0xa>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	6a 83       	std	Y+2, r22	; 0x02
	if(volt==HIGH)
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	09 f0       	breq	.+2      	; 0x263a <DIO_WritePin+0x1a>
    2638:	7f c0       	rjmp	.+254    	; 0x2738 <DIO_WritePin+0x118>
	{
		switch (pin/8)
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	86 95       	lsr	r24
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3e 83       	std	Y+6, r19	; 0x06
    2648:	2d 83       	std	Y+5, r18	; 0x05
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	69 f1       	breq	.+90     	; 0x26ae <DIO_WritePin+0x8e>
    2654:	2d 81       	ldd	r18, Y+5	; 0x05
    2656:	3e 81       	ldd	r19, Y+6	; 0x06
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	2c f4       	brge	.+10     	; 0x2668 <DIO_WritePin+0x48>
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f0       	breq	.+26     	; 0x2680 <DIO_WritePin+0x60>
    2666:	ea c0       	rjmp	.+468    	; 0x283c <DIO_WritePin+0x21c>
    2668:	2d 81       	ldd	r18, Y+5	; 0x05
    266a:	3e 81       	ldd	r19, Y+6	; 0x06
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	a9 f1       	breq	.+106    	; 0x26dc <DIO_WritePin+0xbc>
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <DIO_WritePin+0x5e>
    267c:	46 c0       	rjmp	.+140    	; 0x270a <DIO_WritePin+0xea>
    267e:	de c0       	rjmp	.+444    	; 0x283c <DIO_WritePin+0x21c>
		{
			case PA :
			SET_BIT(PORTA,pin%8);
    2680:	ab e3       	ldi	r26, 0x3B	; 59
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	eb e3       	ldi	r30, 0x3B	; 59
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	48 2f       	mov	r20, r24
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 01       	movw	r18, r24
    2694:	27 70       	andi	r18, 0x07	; 7
    2696:	30 70       	andi	r19, 0x00	; 0
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	02 2e       	mov	r0, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <DIO_WritePin+0x84>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	0a 94       	dec	r0
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <DIO_WritePin+0x80>
    26a8:	84 2b       	or	r24, r20
    26aa:	8c 93       	st	X, r24
    26ac:	c7 c0       	rjmp	.+398    	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PB :
			SET_BIT(PORTB,pin%8);
    26ae:	a8 e3       	ldi	r26, 0x38	; 56
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e8 e3       	ldi	r30, 0x38	; 56
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	88 2f       	mov	r24, r24
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 01       	movw	r18, r24
    26c2:	27 70       	andi	r18, 0x07	; 7
    26c4:	30 70       	andi	r19, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	02 2e       	mov	r0, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_WritePin+0xb2>
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	0a 94       	dec	r0
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_WritePin+0xae>
    26d6:	84 2b       	or	r24, r20
    26d8:	8c 93       	st	X, r24
    26da:	b0 c0       	rjmp	.+352    	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PC :
			SET_BIT(PORTC,pin%8);
    26dc:	a5 e3       	ldi	r26, 0x35	; 53
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e3       	ldi	r30, 0x35	; 53
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	48 2f       	mov	r20, r24
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9c 01       	movw	r18, r24
    26f0:	27 70       	andi	r18, 0x07	; 7
    26f2:	30 70       	andi	r19, 0x00	; 0
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 2e       	mov	r0, r18
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <DIO_WritePin+0xe0>
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <DIO_WritePin+0xdc>
    2704:	84 2b       	or	r24, r20
    2706:	8c 93       	st	X, r24
    2708:	99 c0       	rjmp	.+306    	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PD :
			SET_BIT(PORTD,pin%8);
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9c 01       	movw	r18, r24
    271e:	27 70       	andi	r18, 0x07	; 7
    2720:	30 70       	andi	r19, 0x00	; 0
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	02 2e       	mov	r0, r18
    2728:	02 c0       	rjmp	.+4      	; 0x272e <DIO_WritePin+0x10e>
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	0a 94       	dec	r0
    2730:	e2 f7       	brpl	.-8      	; 0x272a <DIO_WritePin+0x10a>
    2732:	84 2b       	or	r24, r20
    2734:	8c 93       	st	X, r24
    2736:	82 c0       	rjmp	.+260    	; 0x283c <DIO_WritePin+0x21c>
			break;
		}
	}
	else
	{
		switch (pin/8)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	86 95       	lsr	r24
    273c:	86 95       	lsr	r24
    273e:	86 95       	lsr	r24
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3c 83       	std	Y+4, r19	; 0x04
    2746:	2b 83       	std	Y+3, r18	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	91 05       	cpc	r25, r1
    2750:	71 f1       	breq	.+92     	; 0x27ae <DIO_WritePin+0x18e>
    2752:	2b 81       	ldd	r18, Y+3	; 0x03
    2754:	3c 81       	ldd	r19, Y+4	; 0x04
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	2c f4       	brge	.+10     	; 0x2766 <DIO_WritePin+0x146>
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	69 f0       	breq	.+26     	; 0x277e <DIO_WritePin+0x15e>
    2764:	6b c0       	rjmp	.+214    	; 0x283c <DIO_WritePin+0x21c>
    2766:	2b 81       	ldd	r18, Y+3	; 0x03
    2768:	3c 81       	ldd	r19, Y+4	; 0x04
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	31 05       	cpc	r19, r1
    276e:	b9 f1       	breq	.+110    	; 0x27de <DIO_WritePin+0x1be>
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	91 05       	cpc	r25, r1
    2778:	09 f4       	brne	.+2      	; 0x277c <DIO_WritePin+0x15c>
    277a:	49 c0       	rjmp	.+146    	; 0x280e <DIO_WritePin+0x1ee>
    277c:	5f c0       	rjmp	.+190    	; 0x283c <DIO_WritePin+0x21c>
		{
			case PA :
			CLR_BIT(PORTA,pin%8);
    277e:	ab e3       	ldi	r26, 0x3B	; 59
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	eb e3       	ldi	r30, 0x3B	; 59
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	48 2f       	mov	r20, r24
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 01       	movw	r18, r24
    2792:	27 70       	andi	r18, 0x07	; 7
    2794:	30 70       	andi	r19, 0x00	; 0
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 2e       	mov	r0, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <DIO_WritePin+0x182>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	0a 94       	dec	r0
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <DIO_WritePin+0x17e>
    27a6:	80 95       	com	r24
    27a8:	84 23       	and	r24, r20
    27aa:	8c 93       	st	X, r24
    27ac:	47 c0       	rjmp	.+142    	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PB :
			CLR_BIT(PORTB,pin%8);
    27ae:	a8 e3       	ldi	r26, 0x38	; 56
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e8 e3       	ldi	r30, 0x38	; 56
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9c 01       	movw	r18, r24
    27c2:	27 70       	andi	r18, 0x07	; 7
    27c4:	30 70       	andi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_WritePin+0x1b2>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_WritePin+0x1ae>
    27d6:	80 95       	com	r24
    27d8:	84 23       	and	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	2f c0       	rjmp	.+94     	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PC :
			CLR_BIT(PORTC,pin%8);
    27de:	a5 e3       	ldi	r26, 0x35	; 53
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e5 e3       	ldi	r30, 0x35	; 53
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 01       	movw	r18, r24
    27f2:	27 70       	andi	r18, 0x07	; 7
    27f4:	30 70       	andi	r19, 0x00	; 0
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	02 2e       	mov	r0, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <DIO_WritePin+0x1e2>
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <DIO_WritePin+0x1de>
    2806:	80 95       	com	r24
    2808:	84 23       	and	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	17 c0       	rjmp	.+46     	; 0x283c <DIO_WritePin+0x21c>
			break;
			case PD :
			CLR_BIT(PORTD,pin%8);
    280e:	a2 e3       	ldi	r26, 0x32	; 50
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e2 e3       	ldi	r30, 0x32	; 50
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	48 2f       	mov	r20, r24
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9c 01       	movw	r18, r24
    2822:	27 70       	andi	r18, 0x07	; 7
    2824:	30 70       	andi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <DIO_WritePin+0x212>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <DIO_WritePin+0x20e>
    2836:	80 95       	com	r24
    2838:	84 23       	and	r24, r20
    283a:	8c 93       	st	X, r24
			break;
		}
	}
}
    283c:	26 96       	adiw	r28, 0x06	; 6
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <DIO_ReadPin>:

DIO_PinVoltage_type	DIO_ReadPin(DIO_Pin_type pin)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <DIO_ReadPin+0x6>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <DIO_ReadPin+0x8>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type v=LOW;
    285c:	19 82       	std	Y+1, r1	; 0x01
	switch (pin/8)
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	86 95       	lsr	r24
    2862:	86 95       	lsr	r24
    2864:	86 95       	lsr	r24
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	3c 83       	std	Y+4, r19	; 0x04
    286c:	2b 83       	std	Y+3, r18	; 0x03
    286e:	4b 81       	ldd	r20, Y+3	; 0x03
    2870:	5c 81       	ldd	r21, Y+4	; 0x04
    2872:	41 30       	cpi	r20, 0x01	; 1
    2874:	51 05       	cpc	r21, r1
    2876:	59 f1       	breq	.+86     	; 0x28ce <DIO_ReadPin+0x80>
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	91 05       	cpc	r25, r1
    2880:	34 f4       	brge	.+12     	; 0x288e <DIO_ReadPin+0x40>
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	21 15       	cp	r18, r1
    2888:	31 05       	cpc	r19, r1
    288a:	69 f0       	breq	.+26     	; 0x28a6 <DIO_ReadPin+0x58>
    288c:	5b c0       	rjmp	.+182    	; 0x2944 <DIO_ReadPin+0xf6>
    288e:	4b 81       	ldd	r20, Y+3	; 0x03
    2890:	5c 81       	ldd	r21, Y+4	; 0x04
    2892:	42 30       	cpi	r20, 0x02	; 2
    2894:	51 05       	cpc	r21, r1
    2896:	79 f1       	breq	.+94     	; 0x28f6 <DIO_ReadPin+0xa8>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <DIO_ReadPin+0x56>
    28a2:	3d c0       	rjmp	.+122    	; 0x291e <DIO_ReadPin+0xd0>
    28a4:	4f c0       	rjmp	.+158    	; 0x2944 <DIO_ReadPin+0xf6>
	{
		case PA :
		v=READ_BIT(PINA,pin%8);
    28a6:	e9 e3       	ldi	r30, 0x39	; 57
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	87 70       	andi	r24, 0x07	; 7
    28b8:	90 70       	andi	r25, 0x00	; 0
    28ba:	a9 01       	movw	r20, r18
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <DIO_ReadPin+0x74>
    28be:	55 95       	asr	r21
    28c0:	47 95       	ror	r20
    28c2:	8a 95       	dec	r24
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <DIO_ReadPin+0x70>
    28c6:	ca 01       	movw	r24, r20
    28c8:	81 70       	andi	r24, 0x01	; 1
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	3b c0       	rjmp	.+118    	; 0x2944 <DIO_ReadPin+0xf6>
		break;
		case PB :
		v=READ_BIT(PINB,pin%8);
    28ce:	e6 e3       	ldi	r30, 0x36	; 54
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	87 70       	andi	r24, 0x07	; 7
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	a9 01       	movw	r20, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <DIO_ReadPin+0x9c>
    28e6:	55 95       	asr	r21
    28e8:	47 95       	ror	r20
    28ea:	8a 95       	dec	r24
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <DIO_ReadPin+0x98>
    28ee:	ca 01       	movw	r24, r20
    28f0:	81 70       	andi	r24, 0x01	; 1
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	27 c0       	rjmp	.+78     	; 0x2944 <DIO_ReadPin+0xf6>
		break;
		case PC :
		v=READ_BIT(PINC,pin%8);
    28f6:	e3 e3       	ldi	r30, 0x33	; 51
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	87 70       	andi	r24, 0x07	; 7
    2908:	90 70       	andi	r25, 0x00	; 0
    290a:	a9 01       	movw	r20, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <DIO_ReadPin+0xc4>
    290e:	55 95       	asr	r21
    2910:	47 95       	ror	r20
    2912:	8a 95       	dec	r24
    2914:	e2 f7       	brpl	.-8      	; 0x290e <DIO_ReadPin+0xc0>
    2916:	ca 01       	movw	r24, r20
    2918:	81 70       	andi	r24, 0x01	; 1
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	13 c0       	rjmp	.+38     	; 0x2944 <DIO_ReadPin+0xf6>
		break;
		case PD :
		v=READ_BIT(PIND,pin%8);
    291e:	e0 e3       	ldi	r30, 0x30	; 48
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	87 70       	andi	r24, 0x07	; 7
    2930:	90 70       	andi	r25, 0x00	; 0
    2932:	a9 01       	movw	r20, r18
    2934:	02 c0       	rjmp	.+4      	; 0x293a <DIO_ReadPin+0xec>
    2936:	55 95       	asr	r21
    2938:	47 95       	ror	r20
    293a:	8a 95       	dec	r24
    293c:	e2 f7       	brpl	.-8      	; 0x2936 <DIO_ReadPin+0xe8>
    293e:	ca 01       	movw	r24, r20
    2940:	81 70       	andi	r24, 0x01	; 1
    2942:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return v;
    2944:	89 81       	ldd	r24, Y+1	; 0x01
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <DIO_TogglePin+0x6>
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	89 83       	std	Y+1, r24	; 0x01
	switch (pin/8)
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	86 95       	lsr	r24
    2966:	86 95       	lsr	r24
    2968:	86 95       	lsr	r24
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3b 83       	std	Y+3, r19	; 0x03
    2970:	2a 83       	std	Y+2, r18	; 0x02
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	91 05       	cpc	r25, r1
    297a:	69 f1       	breq	.+90     	; 0x29d6 <DIO_TogglePin+0x82>
    297c:	2a 81       	ldd	r18, Y+2	; 0x02
    297e:	3b 81       	ldd	r19, Y+3	; 0x03
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	2c f4       	brge	.+10     	; 0x2990 <DIO_TogglePin+0x3c>
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f0       	breq	.+26     	; 0x29a8 <DIO_TogglePin+0x54>
    298e:	67 c0       	rjmp	.+206    	; 0x2a5e <DIO_TogglePin+0x10a>
    2990:	2a 81       	ldd	r18, Y+2	; 0x02
    2992:	3b 81       	ldd	r19, Y+3	; 0x03
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	a9 f1       	breq	.+106    	; 0x2a04 <DIO_TogglePin+0xb0>
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	9b 81       	ldd	r25, Y+3	; 0x03
    299e:	83 30       	cpi	r24, 0x03	; 3
    29a0:	91 05       	cpc	r25, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <DIO_TogglePin+0x52>
    29a4:	46 c0       	rjmp	.+140    	; 0x2a32 <DIO_TogglePin+0xde>
    29a6:	5b c0       	rjmp	.+182    	; 0x2a5e <DIO_TogglePin+0x10a>
	{
		case PA :
		TOG_BIT(PORTA,pin%8);
    29a8:	ab e3       	ldi	r26, 0x3B	; 59
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	eb e3       	ldi	r30, 0x3B	; 59
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9c 01       	movw	r18, r24
    29bc:	27 70       	andi	r18, 0x07	; 7
    29be:	30 70       	andi	r19, 0x00	; 0
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	02 2e       	mov	r0, r18
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <DIO_TogglePin+0x78>
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	0a 94       	dec	r0
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <DIO_TogglePin+0x74>
    29d0:	84 27       	eor	r24, r20
    29d2:	8c 93       	st	X, r24
    29d4:	44 c0       	rjmp	.+136    	; 0x2a5e <DIO_TogglePin+0x10a>
		break;
		case PB :
		TOG_BIT(PORTB,pin%8);
    29d6:	a8 e3       	ldi	r26, 0x38	; 56
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e8 e3       	ldi	r30, 0x38	; 56
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	48 2f       	mov	r20, r24
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 01       	movw	r18, r24
    29ea:	27 70       	andi	r18, 0x07	; 7
    29ec:	30 70       	andi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 2e       	mov	r0, r18
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <DIO_TogglePin+0xa6>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <DIO_TogglePin+0xa2>
    29fe:	84 27       	eor	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	2d c0       	rjmp	.+90     	; 0x2a5e <DIO_TogglePin+0x10a>
		break;
		case PC :
		TOG_BIT(PORTC,pin%8);
    2a04:	a5 e3       	ldi	r26, 0x35	; 53
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e5 e3       	ldi	r30, 0x35	; 53
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	48 2f       	mov	r20, r24
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	88 2f       	mov	r24, r24
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9c 01       	movw	r18, r24
    2a18:	27 70       	andi	r18, 0x07	; 7
    2a1a:	30 70       	andi	r19, 0x00	; 0
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	02 2e       	mov	r0, r18
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <DIO_TogglePin+0xd4>
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	0a 94       	dec	r0
    2a2a:	e2 f7       	brpl	.-8      	; 0x2a24 <DIO_TogglePin+0xd0>
    2a2c:	84 27       	eor	r24, r20
    2a2e:	8c 93       	st	X, r24
    2a30:	16 c0       	rjmp	.+44     	; 0x2a5e <DIO_TogglePin+0x10a>
		break;
		case PD :
		TOG_BIT(PORTD,pin%8);
    2a32:	a2 e3       	ldi	r26, 0x32	; 50
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e2 e3       	ldi	r30, 0x32	; 50
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	48 2f       	mov	r20, r24
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 01       	movw	r18, r24
    2a46:	27 70       	andi	r18, 0x07	; 7
    2a48:	30 70       	andi	r19, 0x00	; 0
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	02 2e       	mov	r0, r18
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_TogglePin+0x102>
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	0a 94       	dec	r0
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <DIO_TogglePin+0xfe>
    2a5a:	84 27       	eor	r24, r20
    2a5c:	8c 93       	st	X, r24
		break;
	}
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port,u8 data)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <DIO_WritePort+0x6>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <DIO_WritePort+0x8>
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	3c 83       	std	Y+4, r19	; 0x04
    2a82:	2b 83       	std	Y+3, r18	; 0x03
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	d1 f0       	breq	.+52     	; 0x2ac2 <DIO_WritePort+0x58>
    2a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a90:	3c 81       	ldd	r19, Y+4	; 0x04
    2a92:	22 30       	cpi	r18, 0x02	; 2
    2a94:	31 05       	cpc	r19, r1
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <DIO_WritePort+0x38>
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	61 f0       	breq	.+24     	; 0x2ab8 <DIO_WritePort+0x4e>
    2aa0:	1e c0       	rjmp	.+60     	; 0x2ade <DIO_WritePort+0x74>
    2aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa6:	22 30       	cpi	r18, 0x02	; 2
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	81 f0       	breq	.+32     	; 0x2acc <DIO_WritePort+0x62>
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	83 30       	cpi	r24, 0x03	; 3
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	81 f0       	breq	.+32     	; 0x2ad6 <DIO_WritePort+0x6c>
    2ab6:	13 c0       	rjmp	.+38     	; 0x2ade <DIO_WritePort+0x74>
	{
		case PA :
		PORTA=data;
    2ab8:	eb e3       	ldi	r30, 0x3B	; 59
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	80 83       	st	Z, r24
    2ac0:	0e c0       	rjmp	.+28     	; 0x2ade <DIO_WritePort+0x74>
		break;
		case PB :
		PORTB=data;
    2ac2:	e8 e3       	ldi	r30, 0x38	; 56
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	80 83       	st	Z, r24
    2aca:	09 c0       	rjmp	.+18     	; 0x2ade <DIO_WritePort+0x74>
		break;
		case PC :
		PORTC=data;
    2acc:	e5 e3       	ldi	r30, 0x35	; 53
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	80 83       	st	Z, r24
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <DIO_WritePort+0x74>
		break;
		case PD :
		PORTD=data;
    2ad6:	e2 e3       	ldi	r30, 0x32	; 50
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	80 83       	st	Z, r24
		break;
	}
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <DIO_ReadPort+0x6>
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <DIO_ReadPort+0x8>
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    2afa:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	3c 83       	std	Y+4, r19	; 0x04
    2b04:	2b 83       	std	Y+3, r18	; 0x03
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	d1 f0       	breq	.+52     	; 0x2b44 <DIO_ReadPort+0x58>
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	3c 81       	ldd	r19, Y+4	; 0x04
    2b14:	22 30       	cpi	r18, 0x02	; 2
    2b16:	31 05       	cpc	r19, r1
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <DIO_ReadPort+0x38>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	61 f0       	breq	.+24     	; 0x2b3a <DIO_ReadPort+0x4e>
    2b22:	1e c0       	rjmp	.+60     	; 0x2b60 <DIO_ReadPort+0x74>
    2b24:	2b 81       	ldd	r18, Y+3	; 0x03
    2b26:	3c 81       	ldd	r19, Y+4	; 0x04
    2b28:	22 30       	cpi	r18, 0x02	; 2
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	81 f0       	breq	.+32     	; 0x2b4e <DIO_ReadPort+0x62>
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	9c 81       	ldd	r25, Y+4	; 0x04
    2b32:	83 30       	cpi	r24, 0x03	; 3
    2b34:	91 05       	cpc	r25, r1
    2b36:	81 f0       	breq	.+32     	; 0x2b58 <DIO_ReadPort+0x6c>
    2b38:	13 c0       	rjmp	.+38     	; 0x2b60 <DIO_ReadPort+0x74>
	{
		case PA :
		data=PINA;
    2b3a:	e9 e3       	ldi	r30, 0x39	; 57
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	0e c0       	rjmp	.+28     	; 0x2b60 <DIO_ReadPort+0x74>
		break;
		case PB :
		data=PINB;
    2b44:	e6 e3       	ldi	r30, 0x36	; 54
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	09 c0       	rjmp	.+18     	; 0x2b60 <DIO_ReadPort+0x74>
		break;
		case PC :
		data=PINC;
    2b4e:	e3 e3       	ldi	r30, 0x33	; 51
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	04 c0       	rjmp	.+8      	; 0x2b60 <DIO_ReadPort+0x74>
		break;
		case PD :
		data=PIND;
    2b58:	e0 e3       	ldi	r30, 0x30	; 48
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <ADC_init>:
#include "MemMap.h"
#include "Utils.h"
#include "ADC/ADC_Interface.h"

void ADC_init(ADC_VOLTREF_type vref,ADC_Prescaler_type scaler)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <ADC_init+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <ADC_init+0x8>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	6a 83       	std	Y+2, r22	; 0x02
	switch (vref)
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	3c 83       	std	Y+4, r19	; 0x04
    2b88:	2b 83       	std	Y+3, r18	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	91 05       	cpc	r25, r1
    2b92:	c1 f0       	breq	.+48     	; 0x2bc4 <ADC_init+0x54>
    2b94:	2b 81       	ldd	r18, Y+3	; 0x03
    2b96:	3c 81       	ldd	r19, Y+4	; 0x04
    2b98:	22 30       	cpi	r18, 0x02	; 2
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	11 f1       	breq	.+68     	; 0x2be2 <ADC_init+0x72>
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	61 f5       	brne	.+88     	; 0x2bfe <ADC_init+0x8e>
	{
	case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
    2ba6:	a7 e2       	ldi	r26, 0x27	; 39
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e7 e2       	ldi	r30, 0x27	; 39
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	8f 7b       	andi	r24, 0xBF	; 191
    2bb2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2bb4:	a7 e2       	ldi	r26, 0x27	; 39
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e7 e2       	ldi	r30, 0x27	; 39
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8f 77       	andi	r24, 0x7F	; 127
    2bc0:	8c 93       	st	X, r24
    2bc2:	1d c0       	rjmp	.+58     	; 0x2bfe <ADC_init+0x8e>
		break;
	case VREF_AVCC:
		SET_BIT(ADMUX,REFS0);
    2bc4:	a7 e2       	ldi	r26, 0x27	; 39
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e7 e2       	ldi	r30, 0x27	; 39
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 64       	ori	r24, 0x40	; 64
    2bd0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2bd2:	a7 e2       	ldi	r26, 0x27	; 39
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e7 e2       	ldi	r30, 0x27	; 39
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	8f 77       	andi	r24, 0x7F	; 127
    2bde:	8c 93       	st	X, r24
    2be0:	0e c0       	rjmp	.+28     	; 0x2bfe <ADC_init+0x8e>
		break;
	case VREF_256V:
		SET_BIT(ADMUX,REFS0);
    2be2:	a7 e2       	ldi	r26, 0x27	; 39
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e7 e2       	ldi	r30, 0x27	; 39
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	80 64       	ori	r24, 0x40	; 64
    2bee:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
    2bf0:	a7 e2       	ldi	r26, 0x27	; 39
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e7 e2       	ldi	r30, 0x27	; 39
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 68       	ori	r24, 0x80	; 128
    2bfc:	8c 93       	st	X, r24
	break;
	}
	
	ADCSRA&=0xF8;
    2bfe:	a6 e2       	ldi	r26, 0x26	; 38
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e6 e2       	ldi	r30, 0x26	; 38
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	88 7f       	andi	r24, 0xF8	; 248
    2c0a:	8c 93       	st	X, r24
	scaler&=0x07;
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	87 70       	andi	r24, 0x07	; 7
    2c10:	8a 83       	std	Y+2, r24	; 0x02
	ADCSRA|=scaler;
    2c12:	a6 e2       	ldi	r26, 0x26	; 38
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e6 e2       	ldi	r30, 0x26	; 38
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	90 81       	ld	r25, Z
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	89 2b       	or	r24, r25
    2c20:	8c 93       	st	X, r24
	
	SET_BIT(ADCSRA,ADEN);
    2c22:	a6 e2       	ldi	r26, 0x26	; 38
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e6 e2       	ldi	r30, 0x26	; 38
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	80 68       	ori	r24, 0x80	; 128
    2c2e:	8c 93       	st	X, r24
}
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <ADC_Read>:

u16 ADC_Read(ADC_Channel_type CH)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	0f 92       	push	r0
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0xE0;
    2c4a:	a7 e2       	ldi	r26, 0x27	; 39
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e7 e2       	ldi	r30, 0x27	; 39
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 7e       	andi	r24, 0xE0	; 224
    2c56:	8c 93       	st	X, r24
	CH&=0x07;
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	87 70       	andi	r24, 0x07	; 7
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|=CH;
    2c5e:	a7 e2       	ldi	r26, 0x27	; 39
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e7 e2       	ldi	r30, 0x27	; 39
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	90 81       	ld	r25, Z
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	89 2b       	or	r24, r25
    2c6c:	8c 93       	st	X, r24
	
	SET_BIT(ADCSRA,ADSC);
    2c6e:	a6 e2       	ldi	r26, 0x26	; 38
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e6 e2       	ldi	r30, 0x26	; 38
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 64       	ori	r24, 0x40	; 64
    2c7a:	8c 93       	st	X, r24
	
	while(READ_BIT(ADCSRA,ADSC));
    2c7c:	e6 e2       	ldi	r30, 0x26	; 38
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	82 95       	swap	r24
    2c84:	86 95       	lsr	r24
    2c86:	86 95       	lsr	r24
    2c88:	83 70       	andi	r24, 0x03	; 3
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	81 70       	andi	r24, 0x01	; 1
    2c90:	90 70       	andi	r25, 0x00	; 0
    2c92:	88 23       	and	r24, r24
    2c94:	99 f7       	brne	.-26     	; 0x2c7c <ADC_Read+0x3e>
		{
			adc=0;
			adc=ADCL>>6;
			adc=adc|ADCH<<2;
		}*/
	return ADC;
    2c96:	e4 e2       	ldi	r30, 0x24	; 36
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
}
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <ADC_VoltRead>:

u16 ADC_VoltRead(ADC_Channel_type CH)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <ADC_VoltRead+0x6>
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <ADC_VoltRead+0x8>
    2cae:	0f 92       	push	r0
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
	u16 volt;
	u16 adc;
	adc=ADC_Read(CH);
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <ADC_Read>
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	
	volt=(adc*(u32)5000)/1023;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	cc 01       	movw	r24, r24
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	28 e8       	ldi	r18, 0x88	; 136
    2ccc:	33 e1       	ldi	r19, 0x13	; 19
    2cce:	40 e0       	ldi	r20, 0x00	; 0
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	2f ef       	ldi	r18, 0xFF	; 255
    2ce0:	33 e0       	ldi	r19, 0x03	; 3
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__udivmodsi4>
    2cee:	da 01       	movw	r26, r20
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	8b 83       	std	Y+3, r24	; 0x03
	return volt;
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
	
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <Segment_init>:
#include "DIO/DIO_Private.h"
#include "DIO/DIO_Cfg.h"
#include "Seven_Seg/Seven_Seg_Cfg.h"

void Segment_init(void)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(first_7seg,HIGH);
    2d12:	83 e0       	ldi	r24, 0x03	; 3
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(second_7seg,HIGH);
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(third_7seg,HIGH);
    2d22:	8d e0       	ldi	r24, 0x0D	; 13
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(fourth_7seg,HIGH);
    2d2a:	8e e0       	ldi	r24, 0x0E	; 14
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>

	DIO_WritePin(A,LOW);
    2d32:	88 e0       	ldi	r24, 0x08	; 8
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(B,LOW);
    2d3a:	89 e0       	ldi	r24, 0x09	; 9
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(C,LOW);
    2d42:	8a e0       	ldi	r24, 0x0A	; 10
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D,LOW);
    2d4a:	8c e0       	ldi	r24, 0x0C	; 12
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <Segment_display>:

void Segment_display(u8 num)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <Segment_display+0x6>
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <Segment_display+0x8>
    2d60:	0f 92       	push	r0
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	8d 83       	std	Y+5, r24	; 0x05
	char d0,d1;
	d0=num%10;
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9a e0       	ldi	r25, 0x0A	; 10
    2d6c:	69 2f       	mov	r22, r25
    2d6e:	0e 94 b3 3c 	call	0x7966	; 0x7966 <__udivmodqi4>
    2d72:	89 2f       	mov	r24, r25
    2d74:	8c 83       	std	Y+4, r24	; 0x04
	d1=num/10;
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9a e0       	ldi	r25, 0x0A	; 10
    2d7a:	69 2f       	mov	r22, r25
    2d7c:	0e 94 b3 3c 	call	0x7966	; 0x7966 <__udivmodqi4>
    2d80:	8b 83       	std	Y+3, r24	; 0x03

	for(u8 l=0;l<200;l++)
    2d82:	1a 82       	std	Y+2, r1	; 0x02
    2d84:	35 c0       	rjmp	.+106    	; 0x2df0 <Segment_display+0x98>
	{
		DIO_WritePin(first_7seg,LOW);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(second_7seg,HIGH);
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(third_7seg,HIGH);
    2d96:	8d e0       	ldi	r24, 0x0D	; 13
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(fourth_7seg,HIGH);
    2d9e:	8e e0       	ldi	r24, 0x0E	; 14
    2da0:	61 e0       	ldi	r22, 0x01	; 1
    2da2:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>

		DIO_WritePin(A,(d0>>0)&1);
    2da6:	8c 81       	ldd	r24, Y+4	; 0x04
    2da8:	98 2f       	mov	r25, r24
    2daa:	91 70       	andi	r25, 0x01	; 1
    2dac:	88 e0       	ldi	r24, 0x08	; 8
    2dae:	69 2f       	mov	r22, r25
    2db0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(B,(d0>>1)&1);
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	86 95       	lsr	r24
    2db8:	98 2f       	mov	r25, r24
    2dba:	91 70       	andi	r25, 0x01	; 1
    2dbc:	89 e0       	ldi	r24, 0x09	; 9
    2dbe:	69 2f       	mov	r22, r25
    2dc0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(C,(d0>>2)&1);
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	86 95       	lsr	r24
    2dc8:	86 95       	lsr	r24
    2dca:	98 2f       	mov	r25, r24
    2dcc:	91 70       	andi	r25, 0x01	; 1
    2dce:	8a e0       	ldi	r24, 0x0A	; 10
    2dd0:	69 2f       	mov	r22, r25
    2dd2:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(D,(d0>>3)&1);
    2dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd8:	86 95       	lsr	r24
    2dda:	86 95       	lsr	r24
    2ddc:	86 95       	lsr	r24
    2dde:	98 2f       	mov	r25, r24
    2de0:	91 70       	andi	r25, 0x01	; 1
    2de2:	8c e0       	ldi	r24, 0x0C	; 12
    2de4:	69 2f       	mov	r22, r25
    2de6:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
{
	char d0,d1;
	d0=num%10;
	d1=num/10;

	for(u8 l=0;l<200;l++)
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	8a 83       	std	Y+2, r24	; 0x02
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	88 3c       	cpi	r24, 0xC8	; 200
    2df4:	40 f2       	brcs	.-112    	; 0x2d86 <Segment_display+0x2e>
		DIO_WritePin(A,(d0>>0)&1);
		DIO_WritePin(B,(d0>>1)&1);
		DIO_WritePin(C,(d0>>2)&1);
		DIO_WritePin(D,(d0>>3)&1);
	}
	for(u8 l=0;l<200;l++)
    2df6:	19 82       	std	Y+1, r1	; 0x01
    2df8:	35 c0       	rjmp	.+106    	; 0x2e64 <Segment_display+0x10c>
	{
		DIO_WritePin(first_7seg,HIGH);
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(second_7seg,LOW);
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(third_7seg,HIGH);
    2e0a:	8d e0       	ldi	r24, 0x0D	; 13
    2e0c:	61 e0       	ldi	r22, 0x01	; 1
    2e0e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(fourth_7seg,HIGH);
    2e12:	8e e0       	ldi	r24, 0x0E	; 14
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>

		DIO_WritePin(A,(d1>>0)&1);
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	91 70       	andi	r25, 0x01	; 1
    2e20:	88 e0       	ldi	r24, 0x08	; 8
    2e22:	69 2f       	mov	r22, r25
    2e24:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(B,(d1>>1)&1);
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	86 95       	lsr	r24
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	91 70       	andi	r25, 0x01	; 1
    2e30:	89 e0       	ldi	r24, 0x09	; 9
    2e32:	69 2f       	mov	r22, r25
    2e34:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(C,(d1>>2)&1);
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	86 95       	lsr	r24
    2e3c:	86 95       	lsr	r24
    2e3e:	98 2f       	mov	r25, r24
    2e40:	91 70       	andi	r25, 0x01	; 1
    2e42:	8a e0       	ldi	r24, 0x0A	; 10
    2e44:	69 2f       	mov	r22, r25
    2e46:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(D,(d1>>3)&1);
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	86 95       	lsr	r24
    2e4e:	86 95       	lsr	r24
    2e50:	86 95       	lsr	r24
    2e52:	98 2f       	mov	r25, r24
    2e54:	91 70       	andi	r25, 0x01	; 1
    2e56:	8c e0       	ldi	r24, 0x0C	; 12
    2e58:	69 2f       	mov	r22, r25
    2e5a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		DIO_WritePin(A,(d0>>0)&1);
		DIO_WritePin(B,(d0>>1)&1);
		DIO_WritePin(C,(d0>>2)&1);
		DIO_WritePin(D,(d0>>3)&1);
	}
	for(u8 l=0;l<200;l++)
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	88 3c       	cpi	r24, 0xC8	; 200
    2e68:	40 f2       	brcs	.-112    	; 0x2dfa <Segment_display+0xa2>
		DIO_WritePin(A,(d1>>0)&1);
		DIO_WritePin(B,(d1>>1)&1);
		DIO_WritePin(C,(d1>>2)&1);
		DIO_WritePin(D,(d1>>3)&1);
	}
}
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <Temp_Read>:
#include "ADC/ADC_Interface.h"
#include "Sensors/Sensors_Cfg.h"
#include "Sensors/Sensors_Interface.h"

u16 Temp_Read(void)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <Temp_Read+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <Temp_Read+0x8>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
	u16 adc=ADC_Read(LM35_CH);
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <ADC_Read>
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp=((adc*(u32)1000)/2048);
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	cc 01       	movw	r24, r24
    2e96:	a0 e0       	ldi	r26, 0x00	; 0
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	28 ee       	ldi	r18, 0xE8	; 232
    2e9c:	33 e0       	ldi	r19, 0x03	; 3
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	07 2e       	mov	r0, r23
    2eb0:	7b e0       	ldi	r23, 0x0B	; 11
    2eb2:	b6 95       	lsr	r27
    2eb4:	a7 95       	ror	r26
    2eb6:	97 95       	ror	r25
    2eb8:	87 95       	ror	r24
    2eba:	7a 95       	dec	r23
    2ebc:	d1 f7       	brne	.-12     	; 0x2eb2 <Temp_Read+0x38>
    2ebe:	70 2d       	mov	r23, r0
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
} 
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <Temp_Read1>:

u16 Temp_Read1(void)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <Temp_Read1+0x6>
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <Temp_Read1+0x8>
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
	u16 volt=ADC_VoltRead(LM35_CH);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <ADC_VoltRead>
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp=volt;
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	if (temp%10<=2){temp-=temp%10;}
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	2a e0       	ldi	r18, 0x0A	; 10
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	b9 01       	movw	r22, r18
    2efe:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f02:	83 30       	cpi	r24, 0x03	; 3
    2f04:	91 05       	cpc	r25, r1
    2f06:	78 f4       	brcc	.+30     	; 0x2f26 <Temp_Read1+0x50>
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	2a e0       	ldi	r18, 0x0A	; 10
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	b9 01       	movw	r22, r18
    2f12:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f16:	9c 01       	movw	r18, r24
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	82 1b       	sub	r24, r18
    2f1e:	93 0b       	sbc	r25, r19
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	61 c0       	rjmp	.+194    	; 0x2fe8 <Temp_Read1+0x112>
	else if (temp%10>2&&temp%10<=4){temp+=(5-temp%10);}
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2a:	2a e0       	ldi	r18, 0x0A	; 10
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	b9 01       	movw	r22, r18
    2f30:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f34:	83 30       	cpi	r24, 0x03	; 3
    2f36:	91 05       	cpc	r25, r1
    2f38:	d0 f0       	brcs	.+52     	; 0x2f6e <Temp_Read1+0x98>
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	2a e0       	ldi	r18, 0x0A	; 10
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	b9 01       	movw	r22, r18
    2f44:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f48:	85 30       	cpi	r24, 0x05	; 5
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	80 f4       	brcc	.+32     	; 0x2f6e <Temp_Read1+0x98>
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	2a e0       	ldi	r18, 0x0A	; 10
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	b9 01       	movw	r22, r18
    2f58:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	82 1b       	sub	r24, r18
    2f64:	93 0b       	sbc	r25, r19
    2f66:	05 96       	adiw	r24, 0x05	; 5
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	3d c0       	rjmp	.+122    	; 0x2fe8 <Temp_Read1+0x112>
	else if (temp%10>5&&temp%10<=7){temp-=((temp%10)-5);}
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	2a e0       	ldi	r18, 0x0A	; 10
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	b9 01       	movw	r22, r18
    2f78:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f7c:	86 30       	cpi	r24, 0x06	; 6
    2f7e:	91 05       	cpc	r25, r1
    2f80:	d0 f0       	brcs	.+52     	; 0x2fb6 <Temp_Read1+0xe0>
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	2a e0       	ldi	r18, 0x0A	; 10
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	b9 01       	movw	r22, r18
    2f8c:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2f90:	88 30       	cpi	r24, 0x08	; 8
    2f92:	91 05       	cpc	r25, r1
    2f94:	80 f4       	brcc	.+32     	; 0x2fb6 <Temp_Read1+0xe0>
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	2a e0       	ldi	r18, 0x0A	; 10
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2fa4:	9c 01       	movw	r18, r24
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	82 1b       	sub	r24, r18
    2fac:	93 0b       	sbc	r25, r19
    2fae:	05 96       	adiw	r24, 0x05	; 5
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	19 c0       	rjmp	.+50     	; 0x2fe8 <Temp_Read1+0x112>
	else if (temp%10>7){temp+=(10-temp%10);}
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	2a e0       	ldi	r18, 0x0A	; 10
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	b9 01       	movw	r22, r18
    2fc0:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2fc4:	88 30       	cpi	r24, 0x08	; 8
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	78 f0       	brcs	.+30     	; 0x2fe8 <Temp_Read1+0x112>
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fce:	2a e0       	ldi	r18, 0x0A	; 10
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	b9 01       	movw	r22, r18
    2fd4:	0e 94 bf 3c 	call	0x797e	; 0x797e <__udivmodhi4>
    2fd8:	9c 01       	movw	r18, r24
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fde:	82 1b       	sub	r24, r18
    2fe0:	93 0b       	sbc	r25, r19
    2fe2:	0a 96       	adiw	r24, 0x0a	; 10
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <Temp_Read2>:

u16 Temp_Read2(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <Temp_Read2+0x6>
    3000:	00 d0       	rcall	.+0      	; 0x3002 <Temp_Read2+0x8>
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
	u16 adc=ADC_Read(LM35_CH);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <ADC_Read>
    300c:	9c 83       	std	Y+4, r25	; 0x04
    300e:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp=((adc*(u32)1000)/921)+91;
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	cc 01       	movw	r24, r24
    3016:	a0 e0       	ldi	r26, 0x00	; 0
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	28 ee       	ldi	r18, 0xE8	; 232
    301c:	33 e0       	ldi	r19, 0x03	; 3
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	29 e9       	ldi	r18, 0x99	; 153
    3030:	33 e0       	ldi	r19, 0x03	; 3
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__udivmodsi4>
    303e:	da 01       	movw	r26, r20
    3040:	c9 01       	movw	r24, r18
    3042:	85 5a       	subi	r24, 0xA5	; 165
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <SRV_Init>:
#include "SRV_Motor/SRV_Motor_Interface.h"
#include "SRV_Motor/SRV_Motor_Cfg.h"
#include "Timer/Timer1/Timer1_Interface.h"

void SRV_Init(void)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
	timer1_init();
    3064:	0e 94 17 09 	call	0x122e	; 0x122e <timer1_init>
}
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <SRV_Motor_Start>:

void SRV_Motor_Start(s8 angle)
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	00 d0       	rcall	.+0      	; 0x3074 <SRV_Motor_Start+0x6>
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	8a 83       	std	Y+2, r24	; 0x02
	u8 duty = (Max_duty*angle/Max_angle)+Min_duty;
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	99 27       	eor	r25, r25
    307e:	87 fd       	sbrc	r24, 7
    3080:	90 95       	com	r25
    3082:	9c 01       	movw	r18, r24
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	c9 01       	movw	r24, r18
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	24 eb       	ldi	r18, 0xB4	; 180
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	b9 01       	movw	r22, r18
    309c:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__divmodhi4>
    30a0:	cb 01       	movw	r24, r22
    30a2:	8b 5f       	subi	r24, 0xFB	; 251
    30a4:	89 83       	std	Y+1, r24	; 0x01

	if(duty>Max_duty)
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	8b 30       	cpi	r24, 0x0B	; 11
    30aa:	10 f0       	brcs	.+4      	; 0x30b0 <SRV_Motor_Start+0x42>
	{
		duty=Max_duty;
    30ac:	8a e0       	ldi	r24, 0x0A	; 10
    30ae:	89 83       	std	Y+1, r24	; 0x01
	}
	timer1_cmp_value(timer1_set_cmp(duty,Frequency));
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	44 e6       	ldi	r20, 0x64	; 100
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	0e 94 78 09 	call	0x12f0	; 0x12f0 <timer1_set_cmp>
    30be:	0e 94 cb 09 	call	0x1396	; 0x1396 <timer1_cmp_value>
	timer1_start();
    30c2:	0e 94 41 09 	call	0x1282	; 0x1282 <timer1_start>
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <SRV_Motor_Stop>:
void SRV_Motor_Stop(void)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
	timer1_stop();
    30d8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <timer1_stop>
}
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <WriteIns>:
}

#else

static void WriteIns(u8 ins)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	e9 97       	sbiw	r28, 0x39	; 57
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,LOW);
    30f8:	86 e0       	ldi	r24, 0x06	; 6
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    3100:	89 ad       	ldd	r24, Y+57	; 0x39
    3102:	98 2f       	mov	r25, r24
    3104:	99 1f       	adc	r25, r25
    3106:	99 27       	eor	r25, r25
    3108:	99 1f       	adc	r25, r25
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	69 2f       	mov	r22, r25
    310e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    3112:	89 ad       	ldd	r24, Y+57	; 0x39
    3114:	82 95       	swap	r24
    3116:	86 95       	lsr	r24
    3118:	86 95       	lsr	r24
    311a:	83 70       	andi	r24, 0x03	; 3
    311c:	98 2f       	mov	r25, r24
    311e:	91 70       	andi	r25, 0x01	; 1
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	69 2f       	mov	r22, r25
    3124:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    3128:	89 ad       	ldd	r24, Y+57	; 0x39
    312a:	82 95       	swap	r24
    312c:	86 95       	lsr	r24
    312e:	87 70       	andi	r24, 0x07	; 7
    3130:	98 2f       	mov	r25, r24
    3132:	91 70       	andi	r25, 0x01	; 1
    3134:	83 e0       	ldi	r24, 0x03	; 3
    3136:	69 2f       	mov	r22, r25
    3138:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    313c:	89 ad       	ldd	r24, Y+57	; 0x39
    313e:	82 95       	swap	r24
    3140:	8f 70       	andi	r24, 0x0F	; 15
    3142:	98 2f       	mov	r25, r24
    3144:	91 70       	andi	r25, 0x01	; 1
    3146:	84 e0       	ldi	r24, 0x04	; 4
    3148:	69 2f       	mov	r22, r25
    314a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    314e:	85 e0       	ldi	r24, 0x05	; 5
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e8       	ldi	r26, 0x80	; 128
    315c:	bf e3       	ldi	r27, 0x3F	; 63
    315e:	8d ab       	std	Y+53, r24	; 0x35
    3160:	9e ab       	std	Y+54, r25	; 0x36
    3162:	af ab       	std	Y+55, r26	; 0x37
    3164:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3166:	6d a9       	ldd	r22, Y+53	; 0x35
    3168:	7e a9       	ldd	r23, Y+54	; 0x36
    316a:	8f a9       	ldd	r24, Y+55	; 0x37
    316c:	98 ad       	ldd	r25, Y+56	; 0x38
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	4a ef       	ldi	r20, 0xFA	; 250
    3174:	54 e4       	ldi	r21, 0x44	; 68
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	89 ab       	std	Y+49, r24	; 0x31
    3180:	9a ab       	std	Y+50, r25	; 0x32
    3182:	ab ab       	std	Y+51, r26	; 0x33
    3184:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3186:	69 a9       	ldd	r22, Y+49	; 0x31
    3188:	7a a9       	ldd	r23, Y+50	; 0x32
    318a:	8b a9       	ldd	r24, Y+51	; 0x33
    318c:	9c a9       	ldd	r25, Y+52	; 0x34
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	2c f4       	brge	.+10     	; 0x31a8 <WriteIns+0xc6>
		__ticks = 1;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	98 ab       	std	Y+48, r25	; 0x30
    31a4:	8f a7       	std	Y+47, r24	; 0x2f
    31a6:	3f c0       	rjmp	.+126    	; 0x3226 <WriteIns+0x144>
	else if (__tmp > 65535)
    31a8:	69 a9       	ldd	r22, Y+49	; 0x31
    31aa:	7a a9       	ldd	r23, Y+50	; 0x32
    31ac:	8b a9       	ldd	r24, Y+51	; 0x33
    31ae:	9c a9       	ldd	r25, Y+52	; 0x34
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	3f ef       	ldi	r19, 0xFF	; 255
    31b4:	4f e7       	ldi	r20, 0x7F	; 127
    31b6:	57 e4       	ldi	r21, 0x47	; 71
    31b8:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    31bc:	18 16       	cp	r1, r24
    31be:	4c f5       	brge	.+82     	; 0x3212 <WriteIns+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c0:	6d a9       	ldd	r22, Y+53	; 0x35
    31c2:	7e a9       	ldd	r23, Y+54	; 0x36
    31c4:	8f a9       	ldd	r24, Y+55	; 0x37
    31c6:	98 ad       	ldd	r25, Y+56	; 0x38
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	98 ab       	std	Y+48, r25	; 0x30
    31e6:	8f a7       	std	Y+47, r24	; 0x2f
    31e8:	0f c0       	rjmp	.+30     	; 0x3208 <WriteIns+0x126>
    31ea:	88 ec       	ldi	r24, 0xC8	; 200
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	9e a7       	std	Y+46, r25	; 0x2e
    31f0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <WriteIns+0x114>
    31fa:	9e a7       	std	Y+46, r25	; 0x2e
    31fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3200:	98 a9       	ldd	r25, Y+48	; 0x30
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	98 ab       	std	Y+48, r25	; 0x30
    3206:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3208:	8f a5       	ldd	r24, Y+47	; 0x2f
    320a:	98 a9       	ldd	r25, Y+48	; 0x30
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	69 f7       	brne	.-38     	; 0x31ea <WriteIns+0x108>
    3210:	14 c0       	rjmp	.+40     	; 0x323a <WriteIns+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3212:	69 a9       	ldd	r22, Y+49	; 0x31
    3214:	7a a9       	ldd	r23, Y+50	; 0x32
    3216:	8b a9       	ldd	r24, Y+51	; 0x33
    3218:	9c a9       	ldd	r25, Y+52	; 0x34
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	98 ab       	std	Y+48, r25	; 0x30
    3224:	8f a7       	std	Y+47, r24	; 0x2f
    3226:	8f a5       	ldd	r24, Y+47	; 0x2f
    3228:	98 a9       	ldd	r25, Y+48	; 0x30
    322a:	9c a7       	std	Y+44, r25	; 0x2c
    322c:	8b a7       	std	Y+43, r24	; 0x2b
    322e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3230:	9c a5       	ldd	r25, Y+44	; 0x2c
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <WriteIns+0x150>
    3236:	9c a7       	std	Y+44, r25	; 0x2c
    3238:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    323a:	85 e0       	ldi	r24, 0x05	; 5
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e8       	ldi	r26, 0x80	; 128
    3248:	bf e3       	ldi	r27, 0x3F	; 63
    324a:	8f a3       	std	Y+39, r24	; 0x27
    324c:	98 a7       	std	Y+40, r25	; 0x28
    324e:	a9 a7       	std	Y+41, r26	; 0x29
    3250:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	6f a1       	ldd	r22, Y+39	; 0x27
    3254:	78 a5       	ldd	r23, Y+40	; 0x28
    3256:	89 a5       	ldd	r24, Y+41	; 0x29
    3258:	9a a5       	ldd	r25, Y+42	; 0x2a
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8b a3       	std	Y+35, r24	; 0x23
    326c:	9c a3       	std	Y+36, r25	; 0x24
    326e:	ad a3       	std	Y+37, r26	; 0x25
    3270:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3272:	6b a1       	ldd	r22, Y+35	; 0x23
    3274:	7c a1       	ldd	r23, Y+36	; 0x24
    3276:	8d a1       	ldd	r24, Y+37	; 0x25
    3278:	9e a1       	ldd	r25, Y+38	; 0x26
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <WriteIns+0x1b2>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9a a3       	std	Y+34, r25	; 0x22
    3290:	89 a3       	std	Y+33, r24	; 0x21
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <WriteIns+0x230>
	else if (__tmp > 65535)
    3294:	6b a1       	ldd	r22, Y+35	; 0x23
    3296:	7c a1       	ldd	r23, Y+36	; 0x24
    3298:	8d a1       	ldd	r24, Y+37	; 0x25
    329a:	9e a1       	ldd	r25, Y+38	; 0x26
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <WriteIns+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	6f a1       	ldd	r22, Y+39	; 0x27
    32ae:	78 a5       	ldd	r23, Y+40	; 0x28
    32b0:	89 a5       	ldd	r24, Y+41	; 0x29
    32b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9a a3       	std	Y+34, r25	; 0x22
    32d2:	89 a3       	std	Y+33, r24	; 0x21
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <WriteIns+0x212>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	98 a3       	std	Y+32, r25	; 0x20
    32dc:	8f 8f       	std	Y+31, r24	; 0x1f
    32de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e0:	98 a1       	ldd	r25, Y+32	; 0x20
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <WriteIns+0x200>
    32e6:	98 a3       	std	Y+32, r25	; 0x20
    32e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	89 a1       	ldd	r24, Y+33	; 0x21
    32ec:	9a a1       	ldd	r25, Y+34	; 0x22
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	89 a1       	ldd	r24, Y+33	; 0x21
    32f6:	9a a1       	ldd	r25, Y+34	; 0x22
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <WriteIns+0x1f4>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <WriteIns+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3300:	7c a1       	ldd	r23, Y+36	; 0x24
    3302:	8d a1       	ldd	r24, Y+37	; 0x25
    3304:	9e a1       	ldd	r25, Y+38	; 0x26
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9a a3       	std	Y+34, r25	; 0x22
    3310:	89 a3       	std	Y+33, r24	; 0x21
    3312:	89 a1       	ldd	r24, Y+33	; 0x21
    3314:	9a a1       	ldd	r25, Y+34	; 0x22
    3316:	9e 8f       	std	Y+30, r25	; 0x1e
    3318:	8d 8f       	std	Y+29, r24	; 0x1d
    331a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    331c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <WriteIns+0x23c>
    3322:	9e 8f       	std	Y+30, r25	; 0x1e
    3324:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_WritePin(D7,READ_BIT(ins,3));
    3326:	89 ad       	ldd	r24, Y+57	; 0x39
    3328:	86 95       	lsr	r24
    332a:	86 95       	lsr	r24
    332c:	86 95       	lsr	r24
    332e:	98 2f       	mov	r25, r24
    3330:	91 70       	andi	r25, 0x01	; 1
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	69 2f       	mov	r22, r25
    3336:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    333a:	89 ad       	ldd	r24, Y+57	; 0x39
    333c:	86 95       	lsr	r24
    333e:	86 95       	lsr	r24
    3340:	98 2f       	mov	r25, r24
    3342:	91 70       	andi	r25, 0x01	; 1
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	69 2f       	mov	r22, r25
    3348:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    334c:	89 ad       	ldd	r24, Y+57	; 0x39
    334e:	86 95       	lsr	r24
    3350:	98 2f       	mov	r25, r24
    3352:	91 70       	andi	r25, 0x01	; 1
    3354:	83 e0       	ldi	r24, 0x03	; 3
    3356:	69 2f       	mov	r22, r25
    3358:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    335c:	89 ad       	ldd	r24, Y+57	; 0x39
    335e:	98 2f       	mov	r25, r24
    3360:	91 70       	andi	r25, 0x01	; 1
    3362:	84 e0       	ldi	r24, 0x04	; 4
    3364:	69 2f       	mov	r22, r25
    3366:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    336a:	85 e0       	ldi	r24, 0x05	; 5
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a0 e8       	ldi	r26, 0x80	; 128
    3378:	bf e3       	ldi	r27, 0x3F	; 63
    337a:	89 8f       	std	Y+25, r24	; 0x19
    337c:	9a 8f       	std	Y+26, r25	; 0x1a
    337e:	ab 8f       	std	Y+27, r26	; 0x1b
    3380:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	69 8d       	ldd	r22, Y+25	; 0x19
    3384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8d 8b       	std	Y+21, r24	; 0x15
    339c:	9e 8b       	std	Y+22, r25	; 0x16
    339e:	af 8b       	std	Y+23, r26	; 0x17
    33a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33a2:	6d 89       	ldd	r22, Y+21	; 0x15
    33a4:	7e 89       	ldd	r23, Y+22	; 0x16
    33a6:	8f 89       	ldd	r24, Y+23	; 0x17
    33a8:	98 8d       	ldd	r25, Y+24	; 0x18
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <WriteIns+0x2e2>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9c 8b       	std	Y+20, r25	; 0x14
    33c0:	8b 8b       	std	Y+19, r24	; 0x13
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <WriteIns+0x360>
	else if (__tmp > 65535)
    33c4:	6d 89       	ldd	r22, Y+21	; 0x15
    33c6:	7e 89       	ldd	r23, Y+22	; 0x16
    33c8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ca:	98 8d       	ldd	r25, Y+24	; 0x18
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <WriteIns+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	69 8d       	ldd	r22, Y+25	; 0x19
    33de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9c 8b       	std	Y+20, r25	; 0x14
    3402:	8b 8b       	std	Y+19, r24	; 0x13
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <WriteIns+0x342>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9a 8b       	std	Y+18, r25	; 0x12
    340c:	89 8b       	std	Y+17, r24	; 0x11
    340e:	89 89       	ldd	r24, Y+17	; 0x11
    3410:	9a 89       	ldd	r25, Y+18	; 0x12
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <WriteIns+0x330>
    3416:	9a 8b       	std	Y+18, r25	; 0x12
    3418:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9c 8b       	std	Y+20, r25	; 0x14
    3422:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <WriteIns+0x324>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <WriteIns+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6d 89       	ldd	r22, Y+21	; 0x15
    3430:	7e 89       	ldd	r23, Y+22	; 0x16
    3432:	8f 89       	ldd	r24, Y+23	; 0x17
    3434:	98 8d       	ldd	r25, Y+24	; 0x18
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9c 8b       	std	Y+20, r25	; 0x14
    3440:	8b 8b       	std	Y+19, r24	; 0x13
    3442:	8b 89       	ldd	r24, Y+19	; 0x13
    3444:	9c 89       	ldd	r25, Y+20	; 0x14
    3446:	98 8b       	std	Y+16, r25	; 0x10
    3448:	8f 87       	std	Y+15, r24	; 0x0f
    344a:	8f 85       	ldd	r24, Y+15	; 0x0f
    344c:	98 89       	ldd	r25, Y+16	; 0x10
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <WriteIns+0x36c>
    3452:	98 8b       	std	Y+16, r25	; 0x10
    3454:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    3456:	85 e0       	ldi	r24, 0x05	; 5
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	a0 e8       	ldi	r26, 0x80	; 128
    3464:	bf e3       	ldi	r27, 0x3F	; 63
    3466:	8b 87       	std	Y+11, r24	; 0x0b
    3468:	9c 87       	std	Y+12, r25	; 0x0c
    346a:	ad 87       	std	Y+13, r26	; 0x0d
    346c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3470:	7c 85       	ldd	r23, Y+12	; 0x0c
    3472:	8d 85       	ldd	r24, Y+13	; 0x0d
    3474:	9e 85       	ldd	r25, Y+14	; 0x0e
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a ef       	ldi	r20, 0xFA	; 250
    347c:	54 e4       	ldi	r21, 0x44	; 68
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	8f 83       	std	Y+7, r24	; 0x07
    3488:	98 87       	std	Y+8, r25	; 0x08
    348a:	a9 87       	std	Y+9, r26	; 0x09
    348c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    348e:	6f 81       	ldd	r22, Y+7	; 0x07
    3490:	78 85       	ldd	r23, Y+8	; 0x08
    3492:	89 85       	ldd	r24, Y+9	; 0x09
    3494:	9a 85       	ldd	r25, Y+10	; 0x0a
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <WriteIns+0x3ce>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	8d 83       	std	Y+5, r24	; 0x05
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <WriteIns+0x44c>
	else if (__tmp > 65535)
    34b0:	6f 81       	ldd	r22, Y+7	; 0x07
    34b2:	78 85       	ldd	r23, Y+8	; 0x08
    34b4:	89 85       	ldd	r24, Y+9	; 0x09
    34b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <WriteIns+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9e 83       	std	Y+6, r25	; 0x06
    34ee:	8d 83       	std	Y+5, r24	; 0x05
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <WriteIns+0x42e>
    34f2:	88 ec       	ldi	r24, 0xC8	; 200
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9c 83       	std	Y+4, r25	; 0x04
    34f8:	8b 83       	std	Y+3, r24	; 0x03
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <WriteIns+0x41c>
    3502:	9c 83       	std	Y+4, r25	; 0x04
    3504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9e 83       	std	Y+6, r25	; 0x06
    350e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	9e 81       	ldd	r25, Y+6	; 0x06
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <WriteIns+0x410>
    3518:	14 c0       	rjmp	.+40     	; 0x3542 <WriteIns+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	6f 81       	ldd	r22, Y+7	; 0x07
    351c:	78 85       	ldd	r23, Y+8	; 0x08
    351e:	89 85       	ldd	r24, Y+9	; 0x09
    3520:	9a 85       	ldd	r25, Y+10	; 0x0a
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <WriteIns+0x458>
    353e:	9a 83       	std	Y+2, r25	; 0x02
    3540:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3542:	e9 96       	adiw	r28, 0x39	; 57
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <WriteData>:

static void WriteData(u8 data)
{
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	e9 97       	sbiw	r28, 0x39	; 57
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	de bf       	out	0x3e, r29	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,HIGH);
    356a:	86 e0       	ldi	r24, 0x06	; 6
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
    3572:	89 ad       	ldd	r24, Y+57	; 0x39
    3574:	98 2f       	mov	r25, r24
    3576:	99 1f       	adc	r25, r25
    3578:	99 27       	eor	r25, r25
    357a:	99 1f       	adc	r25, r25
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	69 2f       	mov	r22, r25
    3580:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    3584:	89 ad       	ldd	r24, Y+57	; 0x39
    3586:	82 95       	swap	r24
    3588:	86 95       	lsr	r24
    358a:	86 95       	lsr	r24
    358c:	83 70       	andi	r24, 0x03	; 3
    358e:	98 2f       	mov	r25, r24
    3590:	91 70       	andi	r25, 0x01	; 1
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	69 2f       	mov	r22, r25
    3596:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    359a:	89 ad       	ldd	r24, Y+57	; 0x39
    359c:	82 95       	swap	r24
    359e:	86 95       	lsr	r24
    35a0:	87 70       	andi	r24, 0x07	; 7
    35a2:	98 2f       	mov	r25, r24
    35a4:	91 70       	andi	r25, 0x01	; 1
    35a6:	83 e0       	ldi	r24, 0x03	; 3
    35a8:	69 2f       	mov	r22, r25
    35aa:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    35ae:	89 ad       	ldd	r24, Y+57	; 0x39
    35b0:	82 95       	swap	r24
    35b2:	8f 70       	andi	r24, 0x0F	; 15
    35b4:	98 2f       	mov	r25, r24
    35b6:	91 70       	andi	r25, 0x01	; 1
    35b8:	84 e0       	ldi	r24, 0x04	; 4
    35ba:	69 2f       	mov	r22, r25
    35bc:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    35c0:	85 e0       	ldi	r24, 0x05	; 5
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e8       	ldi	r26, 0x80	; 128
    35ce:	bf e3       	ldi	r27, 0x3F	; 63
    35d0:	8d ab       	std	Y+53, r24	; 0x35
    35d2:	9e ab       	std	Y+54, r25	; 0x36
    35d4:	af ab       	std	Y+55, r26	; 0x37
    35d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	6d a9       	ldd	r22, Y+53	; 0x35
    35da:	7e a9       	ldd	r23, Y+54	; 0x36
    35dc:	8f a9       	ldd	r24, Y+55	; 0x37
    35de:	98 ad       	ldd	r25, Y+56	; 0x38
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a ef       	ldi	r20, 0xFA	; 250
    35e6:	54 e4       	ldi	r21, 0x44	; 68
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	89 ab       	std	Y+49, r24	; 0x31
    35f2:	9a ab       	std	Y+50, r25	; 0x32
    35f4:	ab ab       	std	Y+51, r26	; 0x33
    35f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35f8:	69 a9       	ldd	r22, Y+49	; 0x31
    35fa:	7a a9       	ldd	r23, Y+50	; 0x32
    35fc:	8b a9       	ldd	r24, Y+51	; 0x33
    35fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <WriteData+0xc6>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	98 ab       	std	Y+48, r25	; 0x30
    3616:	8f a7       	std	Y+47, r24	; 0x2f
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <WriteData+0x144>
	else if (__tmp > 65535)
    361a:	69 a9       	ldd	r22, Y+49	; 0x31
    361c:	7a a9       	ldd	r23, Y+50	; 0x32
    361e:	8b a9       	ldd	r24, Y+51	; 0x33
    3620:	9c a9       	ldd	r25, Y+52	; 0x34
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	4f e7       	ldi	r20, 0x7F	; 127
    3628:	57 e4       	ldi	r21, 0x47	; 71
    362a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	6d a9       	ldd	r22, Y+53	; 0x35
    3634:	7e a9       	ldd	r23, Y+54	; 0x36
    3636:	8f a9       	ldd	r24, Y+55	; 0x37
    3638:	98 ad       	ldd	r25, Y+56	; 0x38
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e2       	ldi	r20, 0x20	; 32
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	98 ab       	std	Y+48, r25	; 0x30
    3658:	8f a7       	std	Y+47, r24	; 0x2f
    365a:	0f c0       	rjmp	.+30     	; 0x367a <WriteData+0x126>
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9e a7       	std	Y+46, r25	; 0x2e
    3662:	8d a7       	std	Y+45, r24	; 0x2d
    3664:	8d a5       	ldd	r24, Y+45	; 0x2d
    3666:	9e a5       	ldd	r25, Y+46	; 0x2e
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <WriteData+0x114>
    366c:	9e a7       	std	Y+46, r25	; 0x2e
    366e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8f a5       	ldd	r24, Y+47	; 0x2f
    3672:	98 a9       	ldd	r25, Y+48	; 0x30
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	98 ab       	std	Y+48, r25	; 0x30
    3678:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8f a5       	ldd	r24, Y+47	; 0x2f
    367c:	98 a9       	ldd	r25, Y+48	; 0x30
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	69 f7       	brne	.-38     	; 0x365c <WriteData+0x108>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	69 a9       	ldd	r22, Y+49	; 0x31
    3686:	7a a9       	ldd	r23, Y+50	; 0x32
    3688:	8b a9       	ldd	r24, Y+51	; 0x33
    368a:	9c a9       	ldd	r25, Y+52	; 0x34
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	98 ab       	std	Y+48, r25	; 0x30
    3696:	8f a7       	std	Y+47, r24	; 0x2f
    3698:	8f a5       	ldd	r24, Y+47	; 0x2f
    369a:	98 a9       	ldd	r25, Y+48	; 0x30
    369c:	9c a7       	std	Y+44, r25	; 0x2c
    369e:	8b a7       	std	Y+43, r24	; 0x2b
    36a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    36a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <WriteData+0x150>
    36a8:	9c a7       	std	Y+44, r25	; 0x2c
    36aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    36ac:	85 e0       	ldi	r24, 0x05	; 5
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 e8       	ldi	r26, 0x80	; 128
    36ba:	bf e3       	ldi	r27, 0x3F	; 63
    36bc:	8f a3       	std	Y+39, r24	; 0x27
    36be:	98 a7       	std	Y+40, r25	; 0x28
    36c0:	a9 a7       	std	Y+41, r26	; 0x29
    36c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6f a1       	ldd	r22, Y+39	; 0x27
    36c6:	78 a5       	ldd	r23, Y+40	; 0x28
    36c8:	89 a5       	ldd	r24, Y+41	; 0x29
    36ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	8b a3       	std	Y+35, r24	; 0x23
    36de:	9c a3       	std	Y+36, r25	; 0x24
    36e0:	ad a3       	std	Y+37, r26	; 0x25
    36e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36e4:	6b a1       	ldd	r22, Y+35	; 0x23
    36e6:	7c a1       	ldd	r23, Y+36	; 0x24
    36e8:	8d a1       	ldd	r24, Y+37	; 0x25
    36ea:	9e a1       	ldd	r25, Y+38	; 0x26
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <WriteData+0x1b2>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9a a3       	std	Y+34, r25	; 0x22
    3702:	89 a3       	std	Y+33, r24	; 0x21
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <WriteData+0x230>
	else if (__tmp > 65535)
    3706:	6b a1       	ldd	r22, Y+35	; 0x23
    3708:	7c a1       	ldd	r23, Y+36	; 0x24
    370a:	8d a1       	ldd	r24, Y+37	; 0x25
    370c:	9e a1       	ldd	r25, Y+38	; 0x26
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6f a1       	ldd	r22, Y+39	; 0x27
    3720:	78 a5       	ldd	r23, Y+40	; 0x28
    3722:	89 a5       	ldd	r24, Y+41	; 0x29
    3724:	9a a5       	ldd	r25, Y+42	; 0x2a
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9a a3       	std	Y+34, r25	; 0x22
    3744:	89 a3       	std	Y+33, r24	; 0x21
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <WriteData+0x212>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	98 a3       	std	Y+32, r25	; 0x20
    374e:	8f 8f       	std	Y+31, r24	; 0x1f
    3750:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3752:	98 a1       	ldd	r25, Y+32	; 0x20
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <WriteData+0x200>
    3758:	98 a3       	std	Y+32, r25	; 0x20
    375a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	89 a1       	ldd	r24, Y+33	; 0x21
    375e:	9a a1       	ldd	r25, Y+34	; 0x22
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9a a3       	std	Y+34, r25	; 0x22
    3764:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	89 a1       	ldd	r24, Y+33	; 0x21
    3768:	9a a1       	ldd	r25, Y+34	; 0x22
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <WriteData+0x1f4>
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	6b a1       	ldd	r22, Y+35	; 0x23
    3772:	7c a1       	ldd	r23, Y+36	; 0x24
    3774:	8d a1       	ldd	r24, Y+37	; 0x25
    3776:	9e a1       	ldd	r25, Y+38	; 0x26
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9a a3       	std	Y+34, r25	; 0x22
    3782:	89 a3       	std	Y+33, r24	; 0x21
    3784:	89 a1       	ldd	r24, Y+33	; 0x21
    3786:	9a a1       	ldd	r25, Y+34	; 0x22
    3788:	9e 8f       	std	Y+30, r25	; 0x1e
    378a:	8d 8f       	std	Y+29, r24	; 0x1d
    378c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    378e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <WriteData+0x23c>
    3794:	9e 8f       	std	Y+30, r25	; 0x1e
    3796:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_WritePin(D7,READ_BIT(data,3));
    3798:	89 ad       	ldd	r24, Y+57	; 0x39
    379a:	86 95       	lsr	r24
    379c:	86 95       	lsr	r24
    379e:	86 95       	lsr	r24
    37a0:	98 2f       	mov	r25, r24
    37a2:	91 70       	andi	r25, 0x01	; 1
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	69 2f       	mov	r22, r25
    37a8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    37ac:	89 ad       	ldd	r24, Y+57	; 0x39
    37ae:	86 95       	lsr	r24
    37b0:	86 95       	lsr	r24
    37b2:	98 2f       	mov	r25, r24
    37b4:	91 70       	andi	r25, 0x01	; 1
    37b6:	82 e0       	ldi	r24, 0x02	; 2
    37b8:	69 2f       	mov	r22, r25
    37ba:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    37be:	89 ad       	ldd	r24, Y+57	; 0x39
    37c0:	86 95       	lsr	r24
    37c2:	98 2f       	mov	r25, r24
    37c4:	91 70       	andi	r25, 0x01	; 1
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	69 2f       	mov	r22, r25
    37ca:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    37ce:	89 ad       	ldd	r24, Y+57	; 0x39
    37d0:	98 2f       	mov	r25, r24
    37d2:	91 70       	andi	r25, 0x01	; 1
    37d4:	84 e0       	ldi	r24, 0x04	; 4
    37d6:	69 2f       	mov	r22, r25
    37d8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    37dc:	85 e0       	ldi	r24, 0x05	; 5
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 e8       	ldi	r26, 0x80	; 128
    37ea:	bf e3       	ldi	r27, 0x3F	; 63
    37ec:	89 8f       	std	Y+25, r24	; 0x19
    37ee:	9a 8f       	std	Y+26, r25	; 0x1a
    37f0:	ab 8f       	std	Y+27, r26	; 0x1b
    37f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	69 8d       	ldd	r22, Y+25	; 0x19
    37f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4a ef       	ldi	r20, 0xFA	; 250
    3802:	54 e4       	ldi	r21, 0x44	; 68
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	8d 8b       	std	Y+21, r24	; 0x15
    380e:	9e 8b       	std	Y+22, r25	; 0x16
    3810:	af 8b       	std	Y+23, r26	; 0x17
    3812:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3814:	6d 89       	ldd	r22, Y+21	; 0x15
    3816:	7e 89       	ldd	r23, Y+22	; 0x16
    3818:	8f 89       	ldd	r24, Y+23	; 0x17
    381a:	98 8d       	ldd	r25, Y+24	; 0x18
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	2c f4       	brge	.+10     	; 0x3836 <WriteData+0x2e2>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9c 8b       	std	Y+20, r25	; 0x14
    3832:	8b 8b       	std	Y+19, r24	; 0x13
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <WriteData+0x360>
	else if (__tmp > 65535)
    3836:	6d 89       	ldd	r22, Y+21	; 0x15
    3838:	7e 89       	ldd	r23, Y+22	; 0x16
    383a:	8f 89       	ldd	r24, Y+23	; 0x17
    383c:	98 8d       	ldd	r25, Y+24	; 0x18
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	4c f5       	brge	.+82     	; 0x38a0 <WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	69 8d       	ldd	r22, Y+25	; 0x19
    3850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9c 8b       	std	Y+20, r25	; 0x14
    3874:	8b 8b       	std	Y+19, r24	; 0x13
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <WriteData+0x342>
    3878:	88 ec       	ldi	r24, 0xC8	; 200
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	9a 8b       	std	Y+18, r25	; 0x12
    387e:	89 8b       	std	Y+17, r24	; 0x11
    3880:	89 89       	ldd	r24, Y+17	; 0x11
    3882:	9a 89       	ldd	r25, Y+18	; 0x12
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <WriteData+0x330>
    3888:	9a 8b       	std	Y+18, r25	; 0x12
    388a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388c:	8b 89       	ldd	r24, Y+19	; 0x13
    388e:	9c 89       	ldd	r25, Y+20	; 0x14
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	9c 8b       	std	Y+20, r25	; 0x14
    3894:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	8b 89       	ldd	r24, Y+19	; 0x13
    3898:	9c 89       	ldd	r25, Y+20	; 0x14
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	69 f7       	brne	.-38     	; 0x3878 <WriteData+0x324>
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a0:	6d 89       	ldd	r22, Y+21	; 0x15
    38a2:	7e 89       	ldd	r23, Y+22	; 0x16
    38a4:	8f 89       	ldd	r24, Y+23	; 0x17
    38a6:	98 8d       	ldd	r25, Y+24	; 0x18
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9c 8b       	std	Y+20, r25	; 0x14
    38b2:	8b 8b       	std	Y+19, r24	; 0x13
    38b4:	8b 89       	ldd	r24, Y+19	; 0x13
    38b6:	9c 89       	ldd	r25, Y+20	; 0x14
    38b8:	98 8b       	std	Y+16, r25	; 0x10
    38ba:	8f 87       	std	Y+15, r24	; 0x0f
    38bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38be:	98 89       	ldd	r25, Y+16	; 0x10
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <WriteData+0x36c>
    38c4:	98 8b       	std	Y+16, r25	; 0x10
    38c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    38c8:	85 e0       	ldi	r24, 0x05	; 5
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a0 e8       	ldi	r26, 0x80	; 128
    38d6:	bf e3       	ldi	r27, 0x3F	; 63
    38d8:	8b 87       	std	Y+11, r24	; 0x0b
    38da:	9c 87       	std	Y+12, r25	; 0x0c
    38dc:	ad 87       	std	Y+13, r26	; 0x0d
    38de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	4a ef       	ldi	r20, 0xFA	; 250
    38ee:	54 e4       	ldi	r21, 0x44	; 68
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8f 83       	std	Y+7, r24	; 0x07
    38fa:	98 87       	std	Y+8, r25	; 0x08
    38fc:	a9 87       	std	Y+9, r26	; 0x09
    38fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	2c f4       	brge	.+10     	; 0x3922 <WriteData+0x3ce>
		__ticks = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9e 83       	std	Y+6, r25	; 0x06
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	3f c0       	rjmp	.+126    	; 0x39a0 <WriteData+0x44c>
	else if (__tmp > 65535)
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	4c f5       	brge	.+82     	; 0x398c <WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393a:	6b 85       	ldd	r22, Y+11	; 0x0b
    393c:	7c 85       	ldd	r23, Y+12	; 0x0c
    393e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3940:	9e 85       	ldd	r25, Y+14	; 0x0e
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e2       	ldi	r20, 0x20	; 32
    3948:	51 e4       	ldi	r21, 0x41	; 65
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	bc 01       	movw	r22, r24
    3954:	cd 01       	movw	r24, r26
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <WriteData+0x42e>
    3964:	88 ec       	ldi	r24, 0xC8	; 200
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <WriteData+0x41c>
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	69 f7       	brne	.-38     	; 0x3964 <WriteData+0x410>
    398a:	14 c0       	rjmp	.+40     	; 0x39b4 <WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	6f 81       	ldd	r22, Y+7	; 0x07
    398e:	78 85       	ldd	r23, Y+8	; 0x08
    3990:	89 85       	ldd	r24, Y+9	; 0x09
    3992:	9a 85       	ldd	r25, Y+10	; 0x0a
    3994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9e 83       	std	Y+6, r25	; 0x06
    399e:	8d 83       	std	Y+5, r24	; 0x05
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <WriteData+0x458>
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    39b4:	e9 96       	adiw	r28, 0x39	; 57
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <LCD_init>:

void LCD_init()
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	6c 97       	sbiw	r28, 0x1c	; 28
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a8 e4       	ldi	r26, 0x48	; 72
    39e0:	b2 e4       	ldi	r27, 0x42	; 66
    39e2:	89 8f       	std	Y+25, r24	; 0x19
    39e4:	9a 8f       	std	Y+26, r25	; 0x1a
    39e6:	ab 8f       	std	Y+27, r26	; 0x1b
    39e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	69 8d       	ldd	r22, Y+25	; 0x19
    39ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	4a ef       	ldi	r20, 0xFA	; 250
    39f8:	54 e4       	ldi	r21, 0x44	; 68
    39fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	8d 8b       	std	Y+21, r24	; 0x15
    3a04:	9e 8b       	std	Y+22, r25	; 0x16
    3a06:	af 8b       	std	Y+23, r26	; 0x17
    3a08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a10:	98 8d       	ldd	r25, Y+24	; 0x18
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	5f e3       	ldi	r21, 0x3F	; 63
    3a1a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3a1e:	88 23       	and	r24, r24
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <LCD_init+0x66>
		__ticks = 1;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <LCD_init+0xe4>
	else if (__tmp > 65535)
    3a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a30:	8f 89       	ldd	r24, Y+23	; 0x17
    3a32:	98 8d       	ldd	r25, Y+24	; 0x18
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	4c f5       	brge	.+82     	; 0x3a96 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	69 8d       	ldd	r22, Y+25	; 0x19
    3a46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	9c 8b       	std	Y+20, r25	; 0x14
    3a6a:	8b 8b       	std	Y+19, r24	; 0x13
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <LCD_init+0xc6>
    3a6e:	88 ec       	ldi	r24, 0xC8	; 200
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9a 8b       	std	Y+18, r25	; 0x12
    3a74:	89 8b       	std	Y+17, r24	; 0x11
    3a76:	89 89       	ldd	r24, Y+17	; 0x11
    3a78:	9a 89       	ldd	r25, Y+18	; 0x12
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <LCD_init+0xb4>
    3a7e:	9a 8b       	std	Y+18, r25	; 0x12
    3a80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	8b 89       	ldd	r24, Y+19	; 0x13
    3a84:	9c 89       	ldd	r25, Y+20	; 0x14
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	9c 8b       	std	Y+20, r25	; 0x14
    3a8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	69 f7       	brne	.-38     	; 0x3a6e <LCD_init+0xa8>
    3a94:	14 c0       	rjmp	.+40     	; 0x3abe <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a96:	6d 89       	ldd	r22, Y+21	; 0x15
    3a98:	7e 89       	ldd	r23, Y+22	; 0x16
    3a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9c 8b       	std	Y+20, r25	; 0x14
    3aa8:	8b 8b       	std	Y+19, r24	; 0x13
    3aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    3aac:	9c 89       	ldd	r25, Y+20	; 0x14
    3aae:	98 8b       	std	Y+16, r25	; 0x10
    3ab0:	8f 87       	std	Y+15, r24	; 0x0f
    3ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab4:	98 89       	ldd	r25, Y+16	; 0x10
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <LCD_init+0xf0>
    3aba:	98 8b       	std	Y+16, r25	; 0x10
    3abc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	WriteIns(0x02);
    3abe:	82 e0       	ldi	r24, 0x02	; 2
    3ac0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
	WriteIns(0x28);
    3ac4:	88 e2       	ldi	r24, 0x28	; 40
    3ac6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
	WriteIns(Cursor_Mode);
    3aca:	8c e0       	ldi	r24, 0x0C	; 12
    3acc:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
	WriteIns(0x01);
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	a0 e8       	ldi	r26, 0x80	; 128
    3adc:	bf e3       	ldi	r27, 0x3F	; 63
    3ade:	8b 87       	std	Y+11, r24	; 0x0b
    3ae0:	9c 87       	std	Y+12, r25	; 0x0c
    3ae2:	ad 87       	std	Y+13, r26	; 0x0d
    3ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	4a ef       	ldi	r20, 0xFA	; 250
    3af4:	54 e4       	ldi	r21, 0x44	; 68
    3af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8f 83       	std	Y+7, r24	; 0x07
    3b00:	98 87       	std	Y+8, r25	; 0x08
    3b02:	a9 87       	std	Y+9, r26	; 0x09
    3b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e8       	ldi	r20, 0x80	; 128
    3b14:	5f e3       	ldi	r21, 0x3F	; 63
    3b16:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3b1a:	88 23       	and	r24, r24
    3b1c:	2c f4       	brge	.+10     	; 0x3b28 <LCD_init+0x162>
		__ticks = 1;
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9e 83       	std	Y+6, r25	; 0x06
    3b24:	8d 83       	std	Y+5, r24	; 0x05
    3b26:	3f c0       	rjmp	.+126    	; 0x3ba6 <LCD_init+0x1e0>
	else if (__tmp > 65535)
    3b28:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2a:	78 85       	ldd	r23, Y+8	; 0x08
    3b2c:	89 85       	ldd	r24, Y+9	; 0x09
    3b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	4c f5       	brge	.+82     	; 0x3b92 <LCD_init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e2       	ldi	r20, 0x20	; 32
    3b4e:	51 e4       	ldi	r21, 0x41	; 65
    3b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9e 83       	std	Y+6, r25	; 0x06
    3b66:	8d 83       	std	Y+5, r24	; 0x05
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <LCD_init+0x1c2>
    3b6a:	88 ec       	ldi	r24, 0xC8	; 200
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9c 83       	std	Y+4, r25	; 0x04
    3b70:	8b 83       	std	Y+3, r24	; 0x03
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <LCD_init+0x1b0>
    3b7a:	9c 83       	std	Y+4, r25	; 0x04
    3b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	9e 83       	std	Y+6, r25	; 0x06
    3b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	69 f7       	brne	.-38     	; 0x3b6a <LCD_init+0x1a4>
    3b90:	14 c0       	rjmp	.+40     	; 0x3bba <LCD_init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b92:	6f 81       	ldd	r22, Y+7	; 0x07
    3b94:	78 85       	ldd	r23, Y+8	; 0x08
    3b96:	89 85       	ldd	r24, Y+9	; 0x09
    3b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
    3ba4:	8d 83       	std	Y+5, r24	; 0x05
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	9a 83       	std	Y+2, r25	; 0x02
    3bac:	89 83       	std	Y+1, r24	; 0x01
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <LCD_init+0x1ec>
    3bb6:	9a 83       	std	Y+2, r25	; 0x02
    3bb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	WriteIns(mode);
    3bba:	80 91 36 03 	lds	r24, 0x0336
    3bbe:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
}
    3bc2:	6c 96       	adiw	r28, 0x1c	; 28
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <LCD_Clear>:

#endif

void LCD_Clear()
{
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
	WriteIns(0x01);
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
	cursor_line=LINE1;
    3be2:	10 92 34 03 	sts	0x0334, r1
	cursor_cell=0;
    3be6:	10 92 35 03 	sts	0x0335, r1
	if ( mode == RtoL)
    3bea:	80 91 36 03 	lds	r24, 0x0336
    3bee:	81 30       	cpi	r24, 0x01	; 1
    3bf0:	51 f4       	brne	.+20     	; 0x3c06 <LCD_Clear+0x32>
	{
		Write_Mode(RtoL);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <Write_Mode>
		LCD_SETCURSOR(LINE1,15);
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	6f e0       	ldi	r22, 0x0F	; 15
    3bfc:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
		cursor_cell=15;
    3c00:	8f e0       	ldi	r24, 0x0F	; 15
    3c02:	80 93 35 03 	sts	0x0335, r24
	}
}
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <Write_Mode>:

void Write_Mode(Write_M m)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	0f 92       	push	r0
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	89 83       	std	Y+1, r24	; 0x01
	if (m==LtoR)
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	88 23       	and	r24, r24
    3c1c:	31 f4       	brne	.+12     	; 0x3c2a <Write_Mode+0x1e>
	{
		mode=LtoR;
    3c1e:	10 92 36 03 	sts	0x0336, r1
		WriteIns(0x06);
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
    3c28:	06 c0       	rjmp	.+12     	; 0x3c36 <Write_Mode+0x2a>
	}
	else
	{
		mode=RtoL;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	80 93 36 03 	sts	0x0336, r24
		WriteIns(0x04);
    3c30:	84 e0       	ldi	r24, 0x04	; 4
    3c32:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
	}
}
    3c36:	0f 90       	pop	r0
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	08 95       	ret

00003c3e <LCD_SETCURSOR>:

void LCD_SETCURSOR(LINE_NUMBER line ,u8 cell)
{
    3c3e:	df 93       	push	r29
    3c40:	cf 93       	push	r28
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <LCD_SETCURSOR+0x6>
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	89 83       	std	Y+1, r24	; 0x01
    3c4a:	6a 83       	std	Y+2, r22	; 0x02
	cursor_line=line;
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	80 93 34 03 	sts	0x0334, r24
	cursor_cell=cell;
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	80 93 35 03 	sts	0x0335, r24
	WriteIns((0x80+line)+cell);
    3c58:	99 81       	ldd	r25, Y+1	; 0x01
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	89 0f       	add	r24, r25
    3c5e:	80 58       	subi	r24, 0x80	; 128
    3c60:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
}
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	cf 91       	pop	r28
    3c6a:	df 91       	pop	r29
    3c6c:	08 95       	ret

00003c6e <LCD_WriteChar>:

void LCD_WriteChar(u8 data)
{
    3c6e:	df 93       	push	r29
    3c70:	cf 93       	push	r28
    3c72:	0f 92       	push	r0
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	89 83       	std	Y+1, r24	; 0x01
	if (mode == LtoR)
    3c7a:	80 91 36 03 	lds	r24, 0x0336
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <LCD_WriteChar+0x16>
    3c82:	40 c0       	rjmp	.+128    	; 0x3d04 <LCD_WriteChar+0x96>
	{
		if (cursor_cell==20)
    3c84:	80 91 35 03 	lds	r24, 0x0335
    3c88:	84 31       	cpi	r24, 0x14	; 20
    3c8a:	b1 f5       	brne	.+108    	; 0x3cf8 <LCD_WriteChar+0x8a>
		{
			if (cursor_line==LINE1)
    3c8c:	80 91 34 03 	lds	r24, 0x0334
    3c90:	88 23       	and	r24, r24
    3c92:	51 f4       	brne	.+20     	; 0x3ca8 <LCD_WriteChar+0x3a>
			{
				LCD_SETCURSOR(LINE2,0);
    3c94:	80 e4       	ldi	r24, 0x40	; 64
    3c96:	60 e0       	ldi	r22, 0x00	; 0
    3c98:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE2;
    3c9c:	80 e4       	ldi	r24, 0x40	; 64
    3c9e:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=0;
    3ca2:	10 92 35 03 	sts	0x0335, r1
    3ca6:	28 c0       	rjmp	.+80     	; 0x3cf8 <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE2)
    3ca8:	80 91 34 03 	lds	r24, 0x0334
    3cac:	80 34       	cpi	r24, 0x40	; 64
    3cae:	51 f4       	brne	.+20     	; 0x3cc4 <LCD_WriteChar+0x56>
			{
				LCD_SETCURSOR(LINE3,0);
    3cb0:	84 e1       	ldi	r24, 0x14	; 20
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE3;
    3cb8:	84 e1       	ldi	r24, 0x14	; 20
    3cba:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=0;
    3cbe:	10 92 35 03 	sts	0x0335, r1
    3cc2:	1a c0       	rjmp	.+52     	; 0x3cf8 <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE3)
    3cc4:	80 91 34 03 	lds	r24, 0x0334
    3cc8:	84 31       	cpi	r24, 0x14	; 20
    3cca:	51 f4       	brne	.+20     	; 0x3ce0 <LCD_WriteChar+0x72>
			{
				LCD_SETCURSOR(LINE4,0);
    3ccc:	84 e5       	ldi	r24, 0x54	; 84
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE4;
    3cd4:	84 e5       	ldi	r24, 0x54	; 84
    3cd6:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=0;
    3cda:	10 92 35 03 	sts	0x0335, r1
    3cde:	0c c0       	rjmp	.+24     	; 0x3cf8 <LCD_WriteChar+0x8a>
			}
			else if (cursor_line==LINE4)
    3ce0:	80 91 34 03 	lds	r24, 0x0334
    3ce4:	84 35       	cpi	r24, 0x54	; 84
    3ce6:	41 f4       	brne	.+16     	; 0x3cf8 <LCD_WriteChar+0x8a>
			{
				LCD_SETCURSOR(LINE1,0);
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE1;
    3cf0:	10 92 34 03 	sts	0x0334, r1
				cursor_cell=0;
    3cf4:	10 92 35 03 	sts	0x0335, r1
			}
		}
		cursor_cell++;
    3cf8:	80 91 35 03 	lds	r24, 0x0335
    3cfc:	8f 5f       	subi	r24, 0xFF	; 255
    3cfe:	80 93 35 03 	sts	0x0335, r24
    3d02:	43 c0       	rjmp	.+134    	; 0x3d8a <LCD_WriteChar+0x11c>
	}
	else
	{
		if (cursor_cell<0)
    3d04:	80 91 35 03 	lds	r24, 0x0335
    3d08:	88 23       	and	r24, r24
    3d0a:	d4 f5       	brge	.+116    	; 0x3d80 <LCD_WriteChar+0x112>
		{
			if (cursor_line==LINE1)
    3d0c:	80 91 34 03 	lds	r24, 0x0334
    3d10:	88 23       	and	r24, r24
    3d12:	59 f4       	brne	.+22     	; 0x3d2a <LCD_WriteChar+0xbc>
			{
				LCD_SETCURSOR(LINE2,19);
    3d14:	80 e4       	ldi	r24, 0x40	; 64
    3d16:	63 e1       	ldi	r22, 0x13	; 19
    3d18:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE2;
    3d1c:	80 e4       	ldi	r24, 0x40	; 64
    3d1e:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=19;
    3d22:	83 e1       	ldi	r24, 0x13	; 19
    3d24:	80 93 35 03 	sts	0x0335, r24
    3d28:	2b c0       	rjmp	.+86     	; 0x3d80 <LCD_WriteChar+0x112>
			}
			else if(cursor_line==LINE2)
    3d2a:	80 91 34 03 	lds	r24, 0x0334
    3d2e:	80 34       	cpi	r24, 0x40	; 64
    3d30:	59 f4       	brne	.+22     	; 0x3d48 <LCD_WriteChar+0xda>
			{
				LCD_SETCURSOR(LINE3,19);
    3d32:	84 e1       	ldi	r24, 0x14	; 20
    3d34:	63 e1       	ldi	r22, 0x13	; 19
    3d36:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE3;
    3d3a:	84 e1       	ldi	r24, 0x14	; 20
    3d3c:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=19;
    3d40:	83 e1       	ldi	r24, 0x13	; 19
    3d42:	80 93 35 03 	sts	0x0335, r24
    3d46:	1c c0       	rjmp	.+56     	; 0x3d80 <LCD_WriteChar+0x112>
			}
			else if (cursor_line==LINE3)
    3d48:	80 91 34 03 	lds	r24, 0x0334
    3d4c:	84 31       	cpi	r24, 0x14	; 20
    3d4e:	59 f4       	brne	.+22     	; 0x3d66 <LCD_WriteChar+0xf8>
			{
				LCD_SETCURSOR(LINE4,19);
    3d50:	84 e5       	ldi	r24, 0x54	; 84
    3d52:	63 e1       	ldi	r22, 0x13	; 19
    3d54:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE4;
    3d58:	84 e5       	ldi	r24, 0x54	; 84
    3d5a:	80 93 34 03 	sts	0x0334, r24
				cursor_cell=19;
    3d5e:	83 e1       	ldi	r24, 0x13	; 19
    3d60:	80 93 35 03 	sts	0x0335, r24
    3d64:	0d c0       	rjmp	.+26     	; 0x3d80 <LCD_WriteChar+0x112>
			}
			else if (cursor_line==LINE4)
    3d66:	80 91 34 03 	lds	r24, 0x0334
    3d6a:	84 35       	cpi	r24, 0x54	; 84
    3d6c:	49 f4       	brne	.+18     	; 0x3d80 <LCD_WriteChar+0x112>
			{
				LCD_SETCURSOR(LINE1,19);
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	63 e1       	ldi	r22, 0x13	; 19
    3d72:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
				cursor_line=LINE1;
    3d76:	10 92 34 03 	sts	0x0334, r1
				cursor_cell=19;
    3d7a:	83 e1       	ldi	r24, 0x13	; 19
    3d7c:	80 93 35 03 	sts	0x0335, r24
			}
		}
		cursor_cell--;
    3d80:	80 91 35 03 	lds	r24, 0x0335
    3d84:	81 50       	subi	r24, 0x01	; 1
    3d86:	80 93 35 03 	sts	0x0335, r24
	}
	WriteData(data);
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <WriteData>
	
}
    3d90:	0f 90       	pop	r0
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <LCD_WriteString>:

void LCD_WriteString(u8* s)
{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <LCD_WriteString+0x6>
    3d9e:	0f 92       	push	r0
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	9b 83       	std	Y+3, r25	; 0x03
    3da6:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; s[i] ; i++)
    3da8:	19 82       	std	Y+1, r1	; 0x01
    3daa:	0e c0       	rjmp	.+28     	; 0x3dc8 <LCD_WriteString+0x30>
	{
		LCD_WriteChar(s[i]);
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	28 2f       	mov	r18, r24
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	9b 81       	ldd	r25, Y+3	; 0x03
    3db6:	fc 01       	movw	r30, r24
    3db8:	e2 0f       	add	r30, r18
    3dba:	f3 1f       	adc	r31, r19
    3dbc:	80 81       	ld	r24, Z
    3dbe:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	
}

void LCD_WriteString(u8* s)
{
	for (u8 i = 0; s[i] ; i++)
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	89 83       	std	Y+1, r24	; 0x01
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	28 2f       	mov	r18, r24
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	e2 0f       	add	r30, r18
    3dd6:	f3 1f       	adc	r31, r19
    3dd8:	80 81       	ld	r24, Z
    3dda:	88 23       	and	r24, r24
    3ddc:	39 f7       	brne	.-50     	; 0x3dac <LCD_WriteString+0x14>
	{
		LCD_WriteChar(s[i]);
	}
}
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	61 97       	sbiw	r28, 0x11	; 17
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	6e 87       	std	Y+14, r22	; 0x0e
    3e04:	7f 87       	std	Y+15, r23	; 0x0f
    3e06:	88 8b       	std	Y+16, r24	; 0x10
    3e08:	99 8b       	std	Y+17, r25	; 0x11
	u8 str[12];
	u8 i=0;
    3e0a:	19 82       	std	Y+1, r1	; 0x01
	if(num==0)
    3e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e10:	a8 89       	ldd	r26, Y+16	; 0x10
    3e12:	b9 89       	ldd	r27, Y+17	; 0x11
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	a1 05       	cpc	r26, r1
    3e18:	b1 05       	cpc	r27, r1
    3e1a:	19 f4       	brne	.+6      	; 0x3e22 <LCD_WriteNumber+0x38>
	{
		LCD_WriteChar('0');
    3e1c:	80 e3       	ldi	r24, 0x30	; 48
    3e1e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	}
	if(num<0)
    3e22:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e24:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e26:	a8 89       	ldd	r26, Y+16	; 0x10
    3e28:	b9 89       	ldd	r27, Y+17	; 0x11
    3e2a:	bb 23       	and	r27, r27
    3e2c:	0c f0       	brlt	.+2      	; 0x3e30 <LCD_WriteNumber+0x46>
    3e2e:	41 c0       	rjmp	.+130    	; 0x3eb2 <LCD_WriteNumber+0xc8>
	{
		LCD_WriteChar('-');
    3e30:	8d e2       	ldi	r24, 0x2D	; 45
    3e32:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
		num*=-1;
    3e36:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e38:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e3a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e3c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e3e:	b0 95       	com	r27
    3e40:	a0 95       	com	r26
    3e42:	90 95       	com	r25
    3e44:	81 95       	neg	r24
    3e46:	9f 4f       	sbci	r25, 0xFF	; 255
    3e48:	af 4f       	sbci	r26, 0xFF	; 255
    3e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e4c:	8e 87       	std	Y+14, r24	; 0x0e
    3e4e:	9f 87       	std	Y+15, r25	; 0x0f
    3e50:	a8 8b       	std	Y+16, r26	; 0x10
    3e52:	b9 8b       	std	Y+17, r27	; 0x11
    3e54:	2e c0       	rjmp	.+92     	; 0x3eb2 <LCD_WriteNumber+0xc8>
	}
	while(num)
	{
		str[i]=num%10 + '0';
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	08 2f       	mov	r16, r24
    3e5a:	10 e0       	ldi	r17, 0x00	; 0
    3e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e60:	a8 89       	ldd	r26, Y+16	; 0x10
    3e62:	b9 89       	ldd	r27, Y+17	; 0x11
    3e64:	2a e0       	ldi	r18, 0x0A	; 10
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	28 2f       	mov	r18, r24
    3e7a:	20 5d       	subi	r18, 0xD0	; 208
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	02 96       	adiw	r24, 0x02	; 2
    3e80:	fc 01       	movw	r30, r24
    3e82:	e0 0f       	add	r30, r16
    3e84:	f1 1f       	adc	r31, r17
    3e86:	20 83       	st	Z, r18
		num/=10;
    3e88:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e8c:	a8 89       	ldd	r26, Y+16	; 0x10
    3e8e:	b9 89       	ldd	r27, Y+17	; 0x11
    3e90:	2a e0       	ldi	r18, 0x0A	; 10
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    3ea0:	da 01       	movw	r26, r20
    3ea2:	c9 01       	movw	r24, r18
    3ea4:	8e 87       	std	Y+14, r24	; 0x0e
    3ea6:	9f 87       	std	Y+15, r25	; 0x0f
    3ea8:	a8 8b       	std	Y+16, r26	; 0x10
    3eaa:	b9 8b       	std	Y+17, r27	; 0x11
		i++;
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	8f 5f       	subi	r24, 0xFF	; 255
    3eb0:	89 83       	std	Y+1, r24	; 0x01
	if(num<0)
	{
		LCD_WriteChar('-');
		num*=-1;
	}
	while(num)
    3eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eb6:	a8 89       	ldd	r26, Y+16	; 0x10
    3eb8:	b9 89       	ldd	r27, Y+17	; 0x11
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	a1 05       	cpc	r26, r1
    3ebe:	b1 05       	cpc	r27, r1
    3ec0:	51 f6       	brne	.-108    	; 0x3e56 <LCD_WriteNumber+0x6c>
    3ec2:	11 c0       	rjmp	.+34     	; 0x3ee6 <LCD_WriteNumber+0xfc>
		num/=10;
		i++;
	}
	for (;i;i--)
	{
		LCD_WriteChar(str[i-1]);
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	88 2f       	mov	r24, r24
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	9c 01       	movw	r18, r24
    3ecc:	21 50       	subi	r18, 0x01	; 1
    3ece:	30 40       	sbci	r19, 0x00	; 0
    3ed0:	ce 01       	movw	r24, r28
    3ed2:	02 96       	adiw	r24, 0x02	; 2
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	e2 0f       	add	r30, r18
    3ed8:	f3 1f       	adc	r31, r19
    3eda:	80 81       	ld	r24, Z
    3edc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	{
		str[i]=num%10 + '0';
		num/=10;
		i++;
	}
	for (;i;i--)
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	81 50       	subi	r24, 0x01	; 1
    3ee4:	89 83       	std	Y+1, r24	; 0x01
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	88 23       	and	r24, r24
    3eea:	61 f7       	brne	.-40     	; 0x3ec4 <LCD_WriteNumber+0xda>
	{
		LCD_WriteChar(str[i-1]);
	}
}
    3eec:	61 96       	adiw	r28, 0x11	; 17
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	1f 91       	pop	r17
    3efe:	0f 91       	pop	r16
    3f00:	08 95       	ret

00003f02 <LCD_WriteBinary>:

void LCD_WriteBinary(u32 num)
{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	27 97       	sbiw	r28, 0x07	; 7
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	6b 83       	std	Y+3, r22	; 0x03
    3f18:	7c 83       	std	Y+4, r23	; 0x04
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	9e 83       	std	Y+6, r25	; 0x06
	u8 f=0;
    3f1e:	1a 82       	std	Y+2, r1	; 0x02
	for(s8 i=31;i>=0;i--)
    3f20:	8f e1       	ldi	r24, 0x1F	; 31
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	3d c0       	rjmp	.+122    	; 0x3fa0 <LCD_WriteBinary+0x9e>
	{
		if ((f==0)&&(READ_BIT(num,i)?'1':'0')=='1')
    3f26:	8a 81       	ldd	r24, Y+2	; 0x02
    3f28:	88 23       	and	r24, r24
    3f2a:	b9 f4       	brne	.+46     	; 0x3f5a <LCD_WriteBinary+0x58>
    3f2c:	89 81       	ldd	r24, Y+1	; 0x01
    3f2e:	28 2f       	mov	r18, r24
    3f30:	33 27       	eor	r19, r19
    3f32:	27 fd       	sbrc	r18, 7
    3f34:	30 95       	com	r19
    3f36:	8b 81       	ldd	r24, Y+3	; 0x03
    3f38:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f3c:	be 81       	ldd	r27, Y+6	; 0x06
    3f3e:	02 2e       	mov	r0, r18
    3f40:	04 c0       	rjmp	.+8      	; 0x3f4a <LCD_WriteBinary+0x48>
    3f42:	b6 95       	lsr	r27
    3f44:	a7 95       	ror	r26
    3f46:	97 95       	ror	r25
    3f48:	87 95       	ror	r24
    3f4a:	0a 94       	dec	r0
    3f4c:	d2 f7       	brpl	.-12     	; 0x3f42 <LCD_WriteBinary+0x40>
    3f4e:	81 70       	andi	r24, 0x01	; 1
    3f50:	90 70       	andi	r25, 0x00	; 0
    3f52:	88 23       	and	r24, r24
    3f54:	11 f0       	breq	.+4      	; 0x3f5a <LCD_WriteBinary+0x58>
		{
			f=1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (f==1)
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	e9 f4       	brne	.+58     	; 0x3f9a <LCD_WriteBinary+0x98>
		{
			LCD_WriteChar(READ_BIT(num,i)?'1':'0');
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	28 2f       	mov	r18, r24
    3f64:	33 27       	eor	r19, r19
    3f66:	27 fd       	sbrc	r18, 7
    3f68:	30 95       	com	r19
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	ad 81       	ldd	r26, Y+5	; 0x05
    3f70:	be 81       	ldd	r27, Y+6	; 0x06
    3f72:	02 2e       	mov	r0, r18
    3f74:	04 c0       	rjmp	.+8      	; 0x3f7e <LCD_WriteBinary+0x7c>
    3f76:	b6 95       	lsr	r27
    3f78:	a7 95       	ror	r26
    3f7a:	97 95       	ror	r25
    3f7c:	87 95       	ror	r24
    3f7e:	0a 94       	dec	r0
    3f80:	d2 f7       	brpl	.-12     	; 0x3f76 <LCD_WriteBinary+0x74>
    3f82:	81 70       	andi	r24, 0x01	; 1
    3f84:	90 70       	andi	r25, 0x00	; 0
    3f86:	88 23       	and	r24, r24
    3f88:	19 f0       	breq	.+6      	; 0x3f90 <LCD_WriteBinary+0x8e>
    3f8a:	81 e3       	ldi	r24, 0x31	; 49
    3f8c:	8f 83       	std	Y+7, r24	; 0x07
    3f8e:	02 c0       	rjmp	.+4      	; 0x3f94 <LCD_WriteBinary+0x92>
    3f90:	80 e3       	ldi	r24, 0x30	; 48
    3f92:	8f 83       	std	Y+7, r24	; 0x07
    3f94:	8f 81       	ldd	r24, Y+7	; 0x07
    3f96:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
}

void LCD_WriteBinary(u32 num)
{
	u8 f=0;
	for(s8 i=31;i>=0;i--)
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	81 50       	subi	r24, 0x01	; 1
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	88 23       	and	r24, r24
    3fa4:	0c f0       	brlt	.+2      	; 0x3fa8 <LCD_WriteBinary+0xa6>
    3fa6:	bf cf       	rjmp	.-130    	; 0x3f26 <LCD_WriteBinary+0x24>
		{
			LCD_WriteChar(READ_BIT(num,i)?'1':'0');
		}
		
	}
}
    3fa8:	27 96       	adiw	r28, 0x07	; 7
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	cf 91       	pop	r28
    3fb6:	df 91       	pop	r29
    3fb8:	08 95       	ret

00003fba <LCD_WriteHex>:

void LCD_WriteHex(u32 num)
{
    3fba:	df 93       	push	r29
    3fbc:	cf 93       	push	r28
    3fbe:	00 d0       	rcall	.+0      	; 0x3fc0 <LCD_WriteHex+0x6>
    3fc0:	00 d0       	rcall	.+0      	; 0x3fc2 <LCD_WriteHex+0x8>
    3fc2:	00 d0       	rcall	.+0      	; 0x3fc4 <LCD_WriteHex+0xa>
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    3fc8:	6b 83       	std	Y+3, r22	; 0x03
    3fca:	7c 83       	std	Y+4, r23	; 0x04
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
    3fce:	9e 83       	std	Y+6, r25	; 0x06
	u8 f=0;
    3fd0:	1a 82       	std	Y+2, r1	; 0x02
	LCD_WriteChar('0');
    3fd2:	80 e3       	ldi	r24, 0x30	; 48
    3fd4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	LCD_WriteChar('x');
    3fd8:	88 e7       	ldi	r24, 0x78	; 120
    3fda:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	for(s8 i = 28; i>=0 ; i-=4)
    3fde:	8c e1       	ldi	r24, 0x1C	; 28
    3fe0:	89 83       	std	Y+1, r24	; 0x01
    3fe2:	90 c0       	rjmp	.+288    	; 0x4104 <LCD_WriteHex+0x14a>
	{
		if (num>>i)
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	33 27       	eor	r19, r19
    3fea:	27 fd       	sbrc	r18, 7
    3fec:	30 95       	com	r19
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ff4:	be 81       	ldd	r27, Y+6	; 0x06
    3ff6:	02 2e       	mov	r0, r18
    3ff8:	04 c0       	rjmp	.+8      	; 0x4002 <LCD_WriteHex+0x48>
    3ffa:	b6 95       	lsr	r27
    3ffc:	a7 95       	ror	r26
    3ffe:	97 95       	ror	r25
    4000:	87 95       	ror	r24
    4002:	0a 94       	dec	r0
    4004:	d2 f7       	brpl	.-12     	; 0x3ffa <LCD_WriteHex+0x40>
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	a1 05       	cpc	r26, r1
    400a:	b1 05       	cpc	r27, r1
    400c:	11 f0       	breq	.+4      	; 0x4012 <LCD_WriteHex+0x58>
		{
			f=1;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (f)
    4012:	8a 81       	ldd	r24, Y+2	; 0x02
    4014:	88 23       	and	r24, r24
    4016:	09 f4       	brne	.+2      	; 0x401a <LCD_WriteHex+0x60>
    4018:	3d c0       	rjmp	.+122    	; 0x4094 <LCD_WriteHex+0xda>
		{
			if((num>>i)>9)
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	28 2f       	mov	r18, r24
    401e:	33 27       	eor	r19, r19
    4020:	27 fd       	sbrc	r18, 7
    4022:	30 95       	com	r19
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	9c 81       	ldd	r25, Y+4	; 0x04
    4028:	ad 81       	ldd	r26, Y+5	; 0x05
    402a:	be 81       	ldd	r27, Y+6	; 0x06
    402c:	02 2e       	mov	r0, r18
    402e:	04 c0       	rjmp	.+8      	; 0x4038 <LCD_WriteHex+0x7e>
    4030:	b6 95       	lsr	r27
    4032:	a7 95       	ror	r26
    4034:	97 95       	ror	r25
    4036:	87 95       	ror	r24
    4038:	0a 94       	dec	r0
    403a:	d2 f7       	brpl	.-12     	; 0x4030 <LCD_WriteHex+0x76>
    403c:	8a 30       	cpi	r24, 0x0A	; 10
    403e:	91 05       	cpc	r25, r1
    4040:	a1 05       	cpc	r26, r1
    4042:	b1 05       	cpc	r27, r1
    4044:	a0 f0       	brcs	.+40     	; 0x406e <LCD_WriteHex+0xb4>
			{
				LCD_WriteChar((num>>i)+55);
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	28 2f       	mov	r18, r24
    404a:	33 27       	eor	r19, r19
    404c:	27 fd       	sbrc	r18, 7
    404e:	30 95       	com	r19
    4050:	8b 81       	ldd	r24, Y+3	; 0x03
    4052:	9c 81       	ldd	r25, Y+4	; 0x04
    4054:	ad 81       	ldd	r26, Y+5	; 0x05
    4056:	be 81       	ldd	r27, Y+6	; 0x06
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <LCD_WriteHex+0xa8>
    405a:	b6 95       	lsr	r27
    405c:	a7 95       	ror	r26
    405e:	97 95       	ror	r25
    4060:	87 95       	ror	r24
    4062:	2a 95       	dec	r18
    4064:	d2 f7       	brpl	.-12     	; 0x405a <LCD_WriteHex+0xa0>
    4066:	89 5c       	subi	r24, 0xC9	; 201
    4068:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
    406c:	13 c0       	rjmp	.+38     	; 0x4094 <LCD_WriteHex+0xda>
			}
			else
			{
				LCD_WriteChar((num>>i)+'0');
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	28 2f       	mov	r18, r24
    4072:	33 27       	eor	r19, r19
    4074:	27 fd       	sbrc	r18, 7
    4076:	30 95       	com	r19
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	ad 81       	ldd	r26, Y+5	; 0x05
    407e:	be 81       	ldd	r27, Y+6	; 0x06
    4080:	04 c0       	rjmp	.+8      	; 0x408a <LCD_WriteHex+0xd0>
    4082:	b6 95       	lsr	r27
    4084:	a7 95       	ror	r26
    4086:	97 95       	ror	r25
    4088:	87 95       	ror	r24
    408a:	2a 95       	dec	r18
    408c:	d2 f7       	brpl	.-12     	; 0x4082 <LCD_WriteHex+0xc8>
    408e:	80 5d       	subi	r24, 0xD0	; 208
    4090:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
			}
		}
		
		num=num<<(32-i);
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	28 2f       	mov	r18, r24
    4098:	33 27       	eor	r19, r19
    409a:	27 fd       	sbrc	r18, 7
    409c:	30 95       	com	r19
    409e:	80 e2       	ldi	r24, 0x20	; 32
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	ac 01       	movw	r20, r24
    40a4:	42 1b       	sub	r20, r18
    40a6:	53 0b       	sbc	r21, r19
    40a8:	9a 01       	movw	r18, r20
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	9c 81       	ldd	r25, Y+4	; 0x04
    40ae:	ad 81       	ldd	r26, Y+5	; 0x05
    40b0:	be 81       	ldd	r27, Y+6	; 0x06
    40b2:	04 c0       	rjmp	.+8      	; 0x40bc <LCD_WriteHex+0x102>
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	aa 1f       	adc	r26, r26
    40ba:	bb 1f       	adc	r27, r27
    40bc:	2a 95       	dec	r18
    40be:	d2 f7       	brpl	.-12     	; 0x40b4 <LCD_WriteHex+0xfa>
    40c0:	8b 83       	std	Y+3, r24	; 0x03
    40c2:	9c 83       	std	Y+4, r25	; 0x04
    40c4:	ad 83       	std	Y+5, r26	; 0x05
    40c6:	be 83       	std	Y+6, r27	; 0x06
		num=num>>(32-i);
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	28 2f       	mov	r18, r24
    40cc:	33 27       	eor	r19, r19
    40ce:	27 fd       	sbrc	r18, 7
    40d0:	30 95       	com	r19
    40d2:	80 e2       	ldi	r24, 0x20	; 32
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	ac 01       	movw	r20, r24
    40d8:	42 1b       	sub	r20, r18
    40da:	53 0b       	sbc	r21, r19
    40dc:	9a 01       	movw	r18, r20
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	9c 81       	ldd	r25, Y+4	; 0x04
    40e2:	ad 81       	ldd	r26, Y+5	; 0x05
    40e4:	be 81       	ldd	r27, Y+6	; 0x06
    40e6:	02 2e       	mov	r0, r18
    40e8:	04 c0       	rjmp	.+8      	; 0x40f2 <LCD_WriteHex+0x138>
    40ea:	b6 95       	lsr	r27
    40ec:	a7 95       	ror	r26
    40ee:	97 95       	ror	r25
    40f0:	87 95       	ror	r24
    40f2:	0a 94       	dec	r0
    40f4:	d2 f7       	brpl	.-12     	; 0x40ea <LCD_WriteHex+0x130>
    40f6:	8b 83       	std	Y+3, r24	; 0x03
    40f8:	9c 83       	std	Y+4, r25	; 0x04
    40fa:	ad 83       	std	Y+5, r26	; 0x05
    40fc:	be 83       	std	Y+6, r27	; 0x06
void LCD_WriteHex(u32 num)
{
	u8 f=0;
	LCD_WriteChar('0');
	LCD_WriteChar('x');
	for(s8 i = 28; i>=0 ; i-=4)
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	84 50       	subi	r24, 0x04	; 4
    4102:	89 83       	std	Y+1, r24	; 0x01
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	88 23       	and	r24, r24
    4108:	0c f0       	brlt	.+2      	; 0x410c <LCD_WriteHex+0x152>
    410a:	6c cf       	rjmp	.-296    	; 0x3fe4 <LCD_WriteHex+0x2a>
		
		num=num<<(32-i);
		num=num>>(32-i);
	}
	
}
    410c:	26 96       	adiw	r28, 0x06	; 6
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <Insert_Char>:

void Insert_Char(u8 adress,u8* Character)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	00 d0       	rcall	.+0      	; 0x4124 <Insert_Char+0x6>
    4124:	00 d0       	rcall	.+0      	; 0x4126 <Insert_Char+0x8>
    4126:	0f 92       	push	r0
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	8b 83       	std	Y+3, r24	; 0x03
    412e:	7d 83       	std	Y+5, r23	; 0x05
    4130:	6c 83       	std	Y+4, r22	; 0x04
	if (mode == LtoR)
    4132:	80 91 36 03 	lds	r24, 0x0336
    4136:	88 23       	and	r24, r24
    4138:	01 f5       	brne	.+64     	; 0x417a <Insert_Char+0x5c>
	{
		WriteIns(64+adress*8);
    413a:	8b 81       	ldd	r24, Y+3	; 0x03
    413c:	88 2f       	mov	r24, r24
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	08 96       	adiw	r24, 0x08	; 8
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	88 0f       	add	r24, r24
    4148:	99 1f       	adc	r25, r25
    414a:	88 0f       	add	r24, r24
    414c:	99 1f       	adc	r25, r25
    414e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
		for (u8 i=0 ; i<8 ; i++)
    4152:	1a 82       	std	Y+2, r1	; 0x02
    4154:	0e c0       	rjmp	.+28     	; 0x4172 <Insert_Char+0x54>
		{
			WriteData(Character[i]);
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	8c 81       	ldd	r24, Y+4	; 0x04
    415e:	9d 81       	ldd	r25, Y+5	; 0x05
    4160:	fc 01       	movw	r30, r24
    4162:	e2 0f       	add	r30, r18
    4164:	f3 1f       	adc	r31, r19
    4166:	80 81       	ld	r24, Z
    4168:	0e 94 aa 1a 	call	0x3554	; 0x3554 <WriteData>
void Insert_Char(u8 adress,u8* Character)
{
	if (mode == LtoR)
	{
		WriteIns(64+adress*8);
		for (u8 i=0 ; i<8 ; i++)
    416c:	8a 81       	ldd	r24, Y+2	; 0x02
    416e:	8f 5f       	subi	r24, 0xFF	; 255
    4170:	8a 83       	std	Y+2, r24	; 0x02
    4172:	8a 81       	ldd	r24, Y+2	; 0x02
    4174:	88 30       	cpi	r24, 0x08	; 8
    4176:	78 f3       	brcs	.-34     	; 0x4156 <Insert_Char+0x38>
    4178:	25 c0       	rjmp	.+74     	; 0x41c4 <Insert_Char+0xa6>
			WriteData(Character[i]);
		}
	}
	else
	{
		WriteIns(64+((adress+1)*8)-1);
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	88 2f       	mov	r24, r24
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	09 96       	adiw	r24, 0x09	; 9
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	81 50       	subi	r24, 0x01	; 1
    4190:	0e 94 71 18 	call	0x30e2	; 0x30e2 <WriteIns>
		for (u8 i=0 ; i<8 ; i++)
    4194:	19 82       	std	Y+1, r1	; 0x01
    4196:	13 c0       	rjmp	.+38     	; 0x41be <Insert_Char+0xa0>
		{
			WriteData(Character[7-i]);
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	28 2f       	mov	r18, r24
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	87 e0       	ldi	r24, 0x07	; 7
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	82 1b       	sub	r24, r18
    41a4:	93 0b       	sbc	r25, r19
    41a6:	9c 01       	movw	r18, r24
    41a8:	8c 81       	ldd	r24, Y+4	; 0x04
    41aa:	9d 81       	ldd	r25, Y+5	; 0x05
    41ac:	fc 01       	movw	r30, r24
    41ae:	e2 0f       	add	r30, r18
    41b0:	f3 1f       	adc	r31, r19
    41b2:	80 81       	ld	r24, Z
    41b4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <WriteData>
		}
	}
	else
	{
		WriteIns(64+((adress+1)*8)-1);
		for (u8 i=0 ; i<8 ; i++)
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	8f 5f       	subi	r24, 0xFF	; 255
    41bc:	89 83       	std	Y+1, r24	; 0x01
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	88 30       	cpi	r24, 0x08	; 8
    41c2:	50 f3       	brcs	.-44     	; 0x4198 <Insert_Char+0x7a>
		{
			WriteData(Character[7-i]);
		}
	}
}
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	cf 91       	pop	r28
    41d0:	df 91       	pop	r29
    41d2:	08 95       	ret

000041d4 <Array_Fill>:

void Array_Fill(u8* arr,u8 p0,u8 p1,u8 p2,u8 p3,u8 p4,u8 p5,u8 p6,u8 p7)
{
    41d4:	8f 92       	push	r8
    41d6:	af 92       	push	r10
    41d8:	cf 92       	push	r12
    41da:	ef 92       	push	r14
    41dc:	0f 93       	push	r16
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	2a 97       	sbiw	r28, 0x0a	; 10
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	6b 83       	std	Y+3, r22	; 0x03
    41f8:	4c 83       	std	Y+4, r20	; 0x04
    41fa:	2d 83       	std	Y+5, r18	; 0x05
    41fc:	0e 83       	std	Y+6, r16	; 0x06
    41fe:	ef 82       	std	Y+7, r14	; 0x07
    4200:	c8 86       	std	Y+8, r12	; 0x08
    4202:	a9 86       	std	Y+9, r10	; 0x09
    4204:	8a 86       	std	Y+10, r8	; 0x0a
	arr[0]=p0;
    4206:	e9 81       	ldd	r30, Y+1	; 0x01
    4208:	fa 81       	ldd	r31, Y+2	; 0x02
    420a:	8b 81       	ldd	r24, Y+3	; 0x03
    420c:	80 83       	st	Z, r24
	arr[1]=p1;
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	9a 81       	ldd	r25, Y+2	; 0x02
    4212:	fc 01       	movw	r30, r24
    4214:	31 96       	adiw	r30, 0x01	; 1
    4216:	8c 81       	ldd	r24, Y+4	; 0x04
    4218:	80 83       	st	Z, r24
	arr[2]=p2;
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	fc 01       	movw	r30, r24
    4220:	32 96       	adiw	r30, 0x02	; 2
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	80 83       	st	Z, r24
	arr[3]=p3;
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	fc 01       	movw	r30, r24
    422c:	33 96       	adiw	r30, 0x03	; 3
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	80 83       	st	Z, r24
	arr[4]=p4;
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	fc 01       	movw	r30, r24
    4238:	34 96       	adiw	r30, 0x04	; 4
    423a:	8f 81       	ldd	r24, Y+7	; 0x07
    423c:	80 83       	st	Z, r24
	arr[5]=p5;
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	9a 81       	ldd	r25, Y+2	; 0x02
    4242:	fc 01       	movw	r30, r24
    4244:	35 96       	adiw	r30, 0x05	; 5
    4246:	88 85       	ldd	r24, Y+8	; 0x08
    4248:	80 83       	st	Z, r24
	arr[6]=p6;
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	fc 01       	movw	r30, r24
    4250:	36 96       	adiw	r30, 0x06	; 6
    4252:	89 85       	ldd	r24, Y+9	; 0x09
    4254:	80 83       	st	Z, r24
	arr[7]=p7;
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	fc 01       	movw	r30, r24
    425c:	37 96       	adiw	r30, 0x07	; 7
    425e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4260:	80 83       	st	Z, r24
}
    4262:	2a 96       	adiw	r28, 0x0a	; 10
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	cf 91       	pop	r28
    4270:	df 91       	pop	r29
    4272:	0f 91       	pop	r16
    4274:	ef 90       	pop	r14
    4276:	cf 90       	pop	r12
    4278:	af 90       	pop	r10
    427a:	8f 90       	pop	r8
    427c:	08 95       	ret

0000427e <KeyPad_init>:
#include "DIO/DIO_Inteface.h"
#include "KeyPad/KeyPad_Cfg.h"
#include "KeyPad/KeyPad_Interface.h"

void KeyPad_init()
{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	0f 92       	push	r0
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
	for (u8 r=0;r<ROWS;r++)
    4288:	19 82       	std	Y+1, r1	; 0x01
    428a:	0d c0       	rjmp	.+26     	; 0x42a6 <KeyPad_init+0x28>
	{
		DIO_WritePin(Rows_pins[r],HIGH);
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	88 2f       	mov	r24, r24
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	fc 01       	movw	r30, r24
    4294:	e6 57       	subi	r30, 0x76	; 118
    4296:	fd 4f       	sbci	r31, 0xFD	; 253
    4298:	80 81       	ld	r24, Z
    429a:	61 e0       	ldi	r22, 0x01	; 1
    429c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
#include "KeyPad/KeyPad_Cfg.h"
#include "KeyPad/KeyPad_Interface.h"

void KeyPad_init()
{
	for (u8 r=0;r<ROWS;r++)
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	8f 5f       	subi	r24, 0xFF	; 255
    42a4:	89 83       	std	Y+1, r24	; 0x01
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	84 30       	cpi	r24, 0x04	; 4
    42aa:	80 f3       	brcs	.-32     	; 0x428c <KeyPad_init+0xe>
	{
		DIO_WritePin(Rows_pins[r],HIGH);
	}
}
    42ac:	0f 90       	pop	r0
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <KeyPad_get>:

u8 KeyPad_get()
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	cd b7       	in	r28, 0x3d	; 61
    42ba:	de b7       	in	r29, 0x3e	; 62
    42bc:	61 97       	sbiw	r28, 0x11	; 17
    42be:	0f b6       	in	r0, 0x3f	; 63
    42c0:	f8 94       	cli
    42c2:	de bf       	out	0x3e, r29	; 62
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	cd bf       	out	0x3d, r28	; 61
	u8 key=NO_KEY;
    42c8:	84 e5       	ldi	r24, 0x54	; 84
    42ca:	89 8b       	std	Y+17, r24	; 0x11
	for (u8 r=0;r<ROWS;r++)
    42cc:	18 8a       	std	Y+16, r1	; 0x10
    42ce:	bb c0       	rjmp	.+374    	; 0x4446 <KeyPad_get+0x192>
	{
		DIO_WritePin(Rows_pins[r],LOW);
    42d0:	88 89       	ldd	r24, Y+16	; 0x10
    42d2:	88 2f       	mov	r24, r24
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	fc 01       	movw	r30, r24
    42d8:	e6 57       	subi	r30, 0x76	; 118
    42da:	fd 4f       	sbci	r31, 0xFD	; 253
    42dc:	80 81       	ld	r24, Z
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		for (u8 c=0;c<COLS;c++)
    42e4:	1f 86       	std	Y+15, r1	; 0x0f
    42e6:	9e c0       	rjmp	.+316    	; 0x4424 <KeyPad_get+0x170>
		{
			if (DIO_ReadPin(Cols_pins[c])==LOW)
    42e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	fc 01       	movw	r30, r24
    42f0:	e2 57       	subi	r30, 0x72	; 114
    42f2:	fd 4f       	sbci	r31, 0xFD	; 253
    42f4:	80 81       	ld	r24, Z
    42f6:	0e 94 27 14 	call	0x284e	; 0x284e <DIO_ReadPin>
    42fa:	88 23       	and	r24, r24
    42fc:	09 f0       	breq	.+2      	; 0x4300 <KeyPad_get+0x4c>
    42fe:	8f c0       	rjmp	.+286    	; 0x441e <KeyPad_get+0x16a>
			{
				key=keys[r][c];
    4300:	88 89       	ldd	r24, Y+16	; 0x10
    4302:	48 2f       	mov	r20, r24
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	8f 85       	ldd	r24, Y+15	; 0x0f
    4308:	28 2f       	mov	r18, r24
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	ca 01       	movw	r24, r20
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	82 0f       	add	r24, r18
    4318:	93 1f       	adc	r25, r19
    431a:	fc 01       	movw	r30, r24
    431c:	e6 58       	subi	r30, 0x86	; 134
    431e:	fd 4f       	sbci	r31, 0xFD	; 253
    4320:	80 81       	ld	r24, Z
    4322:	89 8b       	std	Y+17, r24	; 0x11
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a0 e2       	ldi	r26, 0x20	; 32
    432a:	b1 e4       	ldi	r27, 0x41	; 65
    432c:	8b 87       	std	Y+11, r24	; 0x0b
    432e:	9c 87       	std	Y+12, r25	; 0x0c
    4330:	ad 87       	std	Y+13, r26	; 0x0d
    4332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	6b 85       	ldd	r22, Y+11	; 0x0b
    4336:	7c 85       	ldd	r23, Y+12	; 0x0c
    4338:	8d 85       	ldd	r24, Y+13	; 0x0d
    433a:	9e 85       	ldd	r25, Y+14	; 0x0e
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	4a ef       	ldi	r20, 0xFA	; 250
    4342:	54 e4       	ldi	r21, 0x44	; 68
    4344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	8f 83       	std	Y+7, r24	; 0x07
    434e:	98 87       	std	Y+8, r25	; 0x08
    4350:	a9 87       	std	Y+9, r26	; 0x09
    4352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	5f e3       	ldi	r21, 0x3F	; 63
    4364:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4368:	88 23       	and	r24, r24
    436a:	2c f4       	brge	.+10     	; 0x4376 <KeyPad_get+0xc2>
		__ticks = 1;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	9e 83       	std	Y+6, r25	; 0x06
    4372:	8d 83       	std	Y+5, r24	; 0x05
    4374:	3f c0       	rjmp	.+126    	; 0x43f4 <KeyPad_get+0x140>
	else if (__tmp > 65535)
    4376:	6f 81       	ldd	r22, Y+7	; 0x07
    4378:	78 85       	ldd	r23, Y+8	; 0x08
    437a:	89 85       	ldd	r24, Y+9	; 0x09
    437c:	9a 85       	ldd	r25, Y+10	; 0x0a
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	4f e7       	ldi	r20, 0x7F	; 127
    4384:	57 e4       	ldi	r21, 0x47	; 71
    4386:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    438a:	18 16       	cp	r1, r24
    438c:	4c f5       	brge	.+82     	; 0x43e0 <KeyPad_get+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4390:	7c 85       	ldd	r23, Y+12	; 0x0c
    4392:	8d 85       	ldd	r24, Y+13	; 0x0d
    4394:	9e 85       	ldd	r25, Y+14	; 0x0e
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e2       	ldi	r20, 0x20	; 32
    439c:	51 e4       	ldi	r21, 0x41	; 65
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9e 83       	std	Y+6, r25	; 0x06
    43b4:	8d 83       	std	Y+5, r24	; 0x05
    43b6:	0f c0       	rjmp	.+30     	; 0x43d6 <KeyPad_get+0x122>
    43b8:	88 ec       	ldi	r24, 0xC8	; 200
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	9c 83       	std	Y+4, r25	; 0x04
    43be:	8b 83       	std	Y+3, r24	; 0x03
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <KeyPad_get+0x110>
    43c8:	9c 83       	std	Y+4, r25	; 0x04
    43ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	9e 81       	ldd	r25, Y+6	; 0x06
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	9e 83       	std	Y+6, r25	; 0x06
    43d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d6:	8d 81       	ldd	r24, Y+5	; 0x05
    43d8:	9e 81       	ldd	r25, Y+6	; 0x06
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	69 f7       	brne	.-38     	; 0x43b8 <KeyPad_get+0x104>
    43de:	14 c0       	rjmp	.+40     	; 0x4408 <KeyPad_get+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e0:	6f 81       	ldd	r22, Y+7	; 0x07
    43e2:	78 85       	ldd	r23, Y+8	; 0x08
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	9a 83       	std	Y+2, r25	; 0x02
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <KeyPad_get+0x14c>
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				while(DIO_ReadPin(Cols_pins[c])==LOW);
    4408:	8f 85       	ldd	r24, Y+15	; 0x0f
    440a:	88 2f       	mov	r24, r24
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	fc 01       	movw	r30, r24
    4410:	e2 57       	subi	r30, 0x72	; 114
    4412:	fd 4f       	sbci	r31, 0xFD	; 253
    4414:	80 81       	ld	r24, Z
    4416:	0e 94 27 14 	call	0x284e	; 0x284e <DIO_ReadPin>
    441a:	88 23       	and	r24, r24
    441c:	a9 f3       	breq	.-22     	; 0x4408 <KeyPad_get+0x154>
{
	u8 key=NO_KEY;
	for (u8 r=0;r<ROWS;r++)
	{
		DIO_WritePin(Rows_pins[r],LOW);
		for (u8 c=0;c<COLS;c++)
    441e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4420:	8f 5f       	subi	r24, 0xFF	; 255
    4422:	8f 87       	std	Y+15, r24	; 0x0f
    4424:	8f 85       	ldd	r24, Y+15	; 0x0f
    4426:	84 30       	cpi	r24, 0x04	; 4
    4428:	08 f4       	brcc	.+2      	; 0x442c <KeyPad_get+0x178>
    442a:	5e cf       	rjmp	.-324    	; 0x42e8 <KeyPad_get+0x34>
				key=keys[r][c];
				_delay_ms(10);
				while(DIO_ReadPin(Cols_pins[c])==LOW);
			}
		}
		DIO_WritePin(Rows_pins[r],HIGH);
    442c:	88 89       	ldd	r24, Y+16	; 0x10
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	fc 01       	movw	r30, r24
    4434:	e6 57       	subi	r30, 0x76	; 118
    4436:	fd 4f       	sbci	r31, 0xFD	; 253
    4438:	80 81       	ld	r24, Z
    443a:	61 e0       	ldi	r22, 0x01	; 1
    443c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}

u8 KeyPad_get()
{
	u8 key=NO_KEY;
	for (u8 r=0;r<ROWS;r++)
    4440:	88 89       	ldd	r24, Y+16	; 0x10
    4442:	8f 5f       	subi	r24, 0xFF	; 255
    4444:	88 8b       	std	Y+16, r24	; 0x10
    4446:	88 89       	ldd	r24, Y+16	; 0x10
    4448:	84 30       	cpi	r24, 0x04	; 4
    444a:	08 f4       	brcc	.+2      	; 0x444e <KeyPad_get+0x19a>
    444c:	41 cf       	rjmp	.-382    	; 0x42d0 <KeyPad_get+0x1c>
				while(DIO_ReadPin(Cols_pins[c])==LOW);
			}
		}
		DIO_WritePin(Rows_pins[r],HIGH);
	}
	return key;
    444e:	89 89       	ldd	r24, Y+17	; 0x11
}
    4450:	61 96       	adiw	r28, 0x11	; 17
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	f8 94       	cli
    4456:	de bf       	out	0x3e, r29	; 62
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	cf 91       	pop	r28
    445e:	df 91       	pop	r29
    4460:	08 95       	ret

00004462 <EEPROM_init>:
#include "EEPROM_Interface.h"
#include "LCD/LCD_Interface.h"


void EEPROM_init(void)
{
    4462:	df 93       	push	r29
    4464:	cf 93       	push	r28
    4466:	cd b7       	in	r28, 0x3d	; 61
    4468:	de b7       	in	r29, 0x3e	; 62
	I2c_Master_init(200);
    446a:	88 ec       	ldi	r24, 0xC8	; 200
    446c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <I2c_Master_init>
}
    4470:	cf 91       	pop	r28
    4472:	df 91       	pop	r29
    4474:	08 95       	ret

00004476 <EEPROM_WriteByte>:
void EEPROM_WriteByte(u16 add,u8 data)
{
    4476:	df 93       	push	r29
    4478:	cf 93       	push	r28
    447a:	cd b7       	in	r28, 0x3d	; 61
    447c:	de b7       	in	r29, 0x3e	; 62
    447e:	62 97       	sbiw	r28, 0x12	; 18
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	99 8b       	std	Y+17, r25	; 0x11
    448c:	88 8b       	std	Y+16, r24	; 0x10
    448e:	6a 8b       	std	Y+18, r22	; 0x12
	u8 address = (add>>8) | 0x50;
    4490:	88 89       	ldd	r24, Y+16	; 0x10
    4492:	99 89       	ldd	r25, Y+17	; 0x11
    4494:	89 2f       	mov	r24, r25
    4496:	99 27       	eor	r25, r25
    4498:	80 65       	ori	r24, 0x50	; 80
    449a:	8f 87       	std	Y+15, r24	; 0x0f
	I2C_SendStartCondition();
    449c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <I2C_SendStartCondition>
	I2C_SendSlaveAdd_Write(address);
    44a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <I2C_SendSlaveAdd_Write>
	I2C_MasterData_Send((u8)add);
    44a6:	88 89       	ldd	r24, Y+16	; 0x10
    44a8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
	I2C_MasterData_Send(data);
    44ac:	8a 89       	ldd	r24, Y+18	; 0x12
    44ae:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
	I2C_SendStopCondition();
    44b2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <I2C_SendStopCondition>
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	a0 ea       	ldi	r26, 0xA0	; 160
    44bc:	b0 e4       	ldi	r27, 0x40	; 64
    44be:	8b 87       	std	Y+11, r24	; 0x0b
    44c0:	9c 87       	std	Y+12, r25	; 0x0c
    44c2:	ad 87       	std	Y+13, r26	; 0x0d
    44c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    44cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	4a ef       	ldi	r20, 0xFA	; 250
    44d4:	54 e4       	ldi	r21, 0x44	; 68
    44d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	8f 83       	std	Y+7, r24	; 0x07
    44e0:	98 87       	std	Y+8, r25	; 0x08
    44e2:	a9 87       	std	Y+9, r26	; 0x09
    44e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44e6:	6f 81       	ldd	r22, Y+7	; 0x07
    44e8:	78 85       	ldd	r23, Y+8	; 0x08
    44ea:	89 85       	ldd	r24, Y+9	; 0x09
    44ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e8       	ldi	r20, 0x80	; 128
    44f4:	5f e3       	ldi	r21, 0x3F	; 63
    44f6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    44fa:	88 23       	and	r24, r24
    44fc:	2c f4       	brge	.+10     	; 0x4508 <EEPROM_WriteByte+0x92>
		__ticks = 1;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	9e 83       	std	Y+6, r25	; 0x06
    4504:	8d 83       	std	Y+5, r24	; 0x05
    4506:	3f c0       	rjmp	.+126    	; 0x4586 <EEPROM_WriteByte+0x110>
	else if (__tmp > 65535)
    4508:	6f 81       	ldd	r22, Y+7	; 0x07
    450a:	78 85       	ldd	r23, Y+8	; 0x08
    450c:	89 85       	ldd	r24, Y+9	; 0x09
    450e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	3f ef       	ldi	r19, 0xFF	; 255
    4514:	4f e7       	ldi	r20, 0x7F	; 127
    4516:	57 e4       	ldi	r21, 0x47	; 71
    4518:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    451c:	18 16       	cp	r1, r24
    451e:	4c f5       	brge	.+82     	; 0x4572 <EEPROM_WriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4520:	6b 85       	ldd	r22, Y+11	; 0x0b
    4522:	7c 85       	ldd	r23, Y+12	; 0x0c
    4524:	8d 85       	ldd	r24, Y+13	; 0x0d
    4526:	9e 85       	ldd	r25, Y+14	; 0x0e
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e2       	ldi	r20, 0x20	; 32
    452e:	51 e4       	ldi	r21, 0x41	; 65
    4530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	bc 01       	movw	r22, r24
    453a:	cd 01       	movw	r24, r26
    453c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	9e 83       	std	Y+6, r25	; 0x06
    4546:	8d 83       	std	Y+5, r24	; 0x05
    4548:	0f c0       	rjmp	.+30     	; 0x4568 <EEPROM_WriteByte+0xf2>
    454a:	88 ec       	ldi	r24, 0xC8	; 200
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	9c 83       	std	Y+4, r25	; 0x04
    4550:	8b 83       	std	Y+3, r24	; 0x03
    4552:	8b 81       	ldd	r24, Y+3	; 0x03
    4554:	9c 81       	ldd	r25, Y+4	; 0x04
    4556:	01 97       	sbiw	r24, 0x01	; 1
    4558:	f1 f7       	brne	.-4      	; 0x4556 <EEPROM_WriteByte+0xe0>
    455a:	9c 83       	std	Y+4, r25	; 0x04
    455c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    455e:	8d 81       	ldd	r24, Y+5	; 0x05
    4560:	9e 81       	ldd	r25, Y+6	; 0x06
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	9e 83       	std	Y+6, r25	; 0x06
    4566:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4568:	8d 81       	ldd	r24, Y+5	; 0x05
    456a:	9e 81       	ldd	r25, Y+6	; 0x06
    456c:	00 97       	sbiw	r24, 0x00	; 0
    456e:	69 f7       	brne	.-38     	; 0x454a <EEPROM_WriteByte+0xd4>
    4570:	14 c0       	rjmp	.+40     	; 0x459a <EEPROM_WriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4572:	6f 81       	ldd	r22, Y+7	; 0x07
    4574:	78 85       	ldd	r23, Y+8	; 0x08
    4576:	89 85       	ldd	r24, Y+9	; 0x09
    4578:	9a 85       	ldd	r25, Y+10	; 0x0a
    457a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	9e 83       	std	Y+6, r25	; 0x06
    4584:	8d 83       	std	Y+5, r24	; 0x05
    4586:	8d 81       	ldd	r24, Y+5	; 0x05
    4588:	9e 81       	ldd	r25, Y+6	; 0x06
    458a:	9a 83       	std	Y+2, r25	; 0x02
    458c:	89 83       	std	Y+1, r24	; 0x01
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	9a 81       	ldd	r25, Y+2	; 0x02
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	f1 f7       	brne	.-4      	; 0x4592 <EEPROM_WriteByte+0x11c>
    4596:	9a 83       	std	Y+2, r25	; 0x02
    4598:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    459a:	62 96       	adiw	r28, 0x12	; 18
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	de bf       	out	0x3e, r29	; 62
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	08 95       	ret

000045ac <EEPROM_ReadByte>:

void EEPROM_ReadByte(u16 add,u8* data)
{
    45ac:	df 93       	push	r29
    45ae:	cf 93       	push	r28
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
    45b4:	63 97       	sbiw	r28, 0x13	; 19
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	99 8b       	std	Y+17, r25	; 0x11
    45c2:	88 8b       	std	Y+16, r24	; 0x10
    45c4:	7b 8b       	std	Y+19, r23	; 0x13
    45c6:	6a 8b       	std	Y+18, r22	; 0x12
	u8 address = (add>>8) | 0x50;
    45c8:	88 89       	ldd	r24, Y+16	; 0x10
    45ca:	99 89       	ldd	r25, Y+17	; 0x11
    45cc:	89 2f       	mov	r24, r25
    45ce:	99 27       	eor	r25, r25
    45d0:	80 65       	ori	r24, 0x50	; 80
    45d2:	8f 87       	std	Y+15, r24	; 0x0f
	//LCD_WriteNumber(0);
	I2C_SendStartCondition();
    45d4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <I2C_SendStartCondition>
	//LCD_WriteNumber(1);
	I2C_SendSlaveAdd_Write(address);
    45d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45da:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <I2C_SendSlaveAdd_Write>
	//LCD_WriteNumber(2);
	I2C_MasterData_Send((u8)add);
    45de:	88 89       	ldd	r24, Y+16	; 0x10
    45e0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
	//LCD_WriteNumber(3);
	I2C_SendRepStartCondition();
    45e4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <I2C_SendRepStartCondition>
	//LCD_WriteNumber(4);
	I2C_SendSlaveAdd_Read(address);
    45e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ea:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <I2C_SendSlaveAdd_Read>
	//LCD_WriteNumber(5);
	*data=I2C_MasterData_Read();
    45ee:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <I2C_MasterData_Read>
    45f2:	ea 89       	ldd	r30, Y+18	; 0x12
    45f4:	fb 89       	ldd	r31, Y+19	; 0x13
    45f6:	80 83       	st	Z, r24
	//LCD_WriteNumber(6);
	I2C_SendStopCondition();
    45f8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <I2C_SendStopCondition>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	a0 ea       	ldi	r26, 0xA0	; 160
    4602:	b0 e4       	ldi	r27, 0x40	; 64
    4604:	8b 87       	std	Y+11, r24	; 0x0b
    4606:	9c 87       	std	Y+12, r25	; 0x0c
    4608:	ad 87       	std	Y+13, r26	; 0x0d
    460a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460c:	6b 85       	ldd	r22, Y+11	; 0x0b
    460e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	4a ef       	ldi	r20, 0xFA	; 250
    461a:	54 e4       	ldi	r21, 0x44	; 68
    461c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	8f 83       	std	Y+7, r24	; 0x07
    4626:	98 87       	std	Y+8, r25	; 0x08
    4628:	a9 87       	std	Y+9, r26	; 0x09
    462a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    462c:	6f 81       	ldd	r22, Y+7	; 0x07
    462e:	78 85       	ldd	r23, Y+8	; 0x08
    4630:	89 85       	ldd	r24, Y+9	; 0x09
    4632:	9a 85       	ldd	r25, Y+10	; 0x0a
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e8       	ldi	r20, 0x80	; 128
    463a:	5f e3       	ldi	r21, 0x3F	; 63
    463c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4640:	88 23       	and	r24, r24
    4642:	2c f4       	brge	.+10     	; 0x464e <EEPROM_ReadByte+0xa2>
		__ticks = 1;
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	9e 83       	std	Y+6, r25	; 0x06
    464a:	8d 83       	std	Y+5, r24	; 0x05
    464c:	3f c0       	rjmp	.+126    	; 0x46cc <EEPROM_ReadByte+0x120>
	else if (__tmp > 65535)
    464e:	6f 81       	ldd	r22, Y+7	; 0x07
    4650:	78 85       	ldd	r23, Y+8	; 0x08
    4652:	89 85       	ldd	r24, Y+9	; 0x09
    4654:	9a 85       	ldd	r25, Y+10	; 0x0a
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	3f ef       	ldi	r19, 0xFF	; 255
    465a:	4f e7       	ldi	r20, 0x7F	; 127
    465c:	57 e4       	ldi	r21, 0x47	; 71
    465e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4662:	18 16       	cp	r1, r24
    4664:	4c f5       	brge	.+82     	; 0x46b8 <EEPROM_ReadByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4666:	6b 85       	ldd	r22, Y+11	; 0x0b
    4668:	7c 85       	ldd	r23, Y+12	; 0x0c
    466a:	8d 85       	ldd	r24, Y+13	; 0x0d
    466c:	9e 85       	ldd	r25, Y+14	; 0x0e
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e2       	ldi	r20, 0x20	; 32
    4674:	51 e4       	ldi	r21, 0x41	; 65
    4676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	bc 01       	movw	r22, r24
    4680:	cd 01       	movw	r24, r26
    4682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	9e 83       	std	Y+6, r25	; 0x06
    468c:	8d 83       	std	Y+5, r24	; 0x05
    468e:	0f c0       	rjmp	.+30     	; 0x46ae <EEPROM_ReadByte+0x102>
    4690:	88 ec       	ldi	r24, 0xC8	; 200
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	9c 83       	std	Y+4, r25	; 0x04
    4696:	8b 83       	std	Y+3, r24	; 0x03
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	9c 81       	ldd	r25, Y+4	; 0x04
    469c:	01 97       	sbiw	r24, 0x01	; 1
    469e:	f1 f7       	brne	.-4      	; 0x469c <EEPROM_ReadByte+0xf0>
    46a0:	9c 83       	std	Y+4, r25	; 0x04
    46a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a4:	8d 81       	ldd	r24, Y+5	; 0x05
    46a6:	9e 81       	ldd	r25, Y+6	; 0x06
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	9e 83       	std	Y+6, r25	; 0x06
    46ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ae:	8d 81       	ldd	r24, Y+5	; 0x05
    46b0:	9e 81       	ldd	r25, Y+6	; 0x06
    46b2:	00 97       	sbiw	r24, 0x00	; 0
    46b4:	69 f7       	brne	.-38     	; 0x4690 <EEPROM_ReadByte+0xe4>
    46b6:	14 c0       	rjmp	.+40     	; 0x46e0 <EEPROM_ReadByte+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b8:	6f 81       	ldd	r22, Y+7	; 0x07
    46ba:	78 85       	ldd	r23, Y+8	; 0x08
    46bc:	89 85       	ldd	r24, Y+9	; 0x09
    46be:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	8d 81       	ldd	r24, Y+5	; 0x05
    46ce:	9e 81       	ldd	r25, Y+6	; 0x06
    46d0:	9a 83       	std	Y+2, r25	; 0x02
    46d2:	89 83       	std	Y+1, r24	; 0x01
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	f1 f7       	brne	.-4      	; 0x46d8 <EEPROM_ReadByte+0x12c>
    46dc:	9a 83       	std	Y+2, r25	; 0x02
    46de:	89 83       	std	Y+1, r24	; 0x01
	//LCD_WriteNumber(7);
	_delay_ms(5);
}
    46e0:	63 96       	adiw	r28, 0x13	; 19
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	f8 94       	cli
    46e6:	de bf       	out	0x3e, r29	; 62
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	cd bf       	out	0x3d, r28	; 61
    46ec:	cf 91       	pop	r28
    46ee:	df 91       	pop	r29
    46f0:	08 95       	ret

000046f2 <EEPROM_WritePage>:

void EEPROM_WritePage(u16 add,u8* data_arr,u8 length)
{u8  x=0;
    46f2:	df 93       	push	r29
    46f4:	cf 93       	push	r28
    46f6:	cd b7       	in	r28, 0x3d	; 61
    46f8:	de b7       	in	r29, 0x3e	; 62
    46fa:	6a 97       	sbiw	r28, 0x1a	; 26
    46fc:	0f b6       	in	r0, 0x3f	; 63
    46fe:	f8 94       	cli
    4700:	de bf       	out	0x3e, r29	; 62
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	cd bf       	out	0x3d, r28	; 61
    4706:	9d 8b       	std	Y+21, r25	; 0x15
    4708:	8c 8b       	std	Y+20, r24	; 0x14
    470a:	7f 8b       	std	Y+23, r23	; 0x17
    470c:	6e 8b       	std	Y+22, r22	; 0x16
    470e:	48 8f       	std	Y+24, r20	; 0x18
    4710:	1b 8a       	std	Y+19, r1	; 0x13
	u8 counter=(length/16)+(length%16?1:0);
    4712:	88 8d       	ldd	r24, Y+24	; 0x18
    4714:	68 2f       	mov	r22, r24
    4716:	62 95       	swap	r22
    4718:	6f 70       	andi	r22, 0x0F	; 15
    471a:	6a 8f       	std	Y+26, r22	; 0x1a
    471c:	88 8d       	ldd	r24, Y+24	; 0x18
    471e:	88 2f       	mov	r24, r24
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	8f 70       	andi	r24, 0x0F	; 15
    4724:	90 70       	andi	r25, 0x00	; 0
    4726:	19 8e       	std	Y+25, r1	; 0x19
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	11 f0       	breq	.+4      	; 0x4730 <EEPROM_WritePage+0x3e>
    472c:	71 e0       	ldi	r23, 0x01	; 1
    472e:	79 8f       	std	Y+25, r23	; 0x19
    4730:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4732:	99 8d       	ldd	r25, Y+25	; 0x19
    4734:	89 0f       	add	r24, r25
    4736:	8a 8b       	std	Y+18, r24	; 0x12
	u8 c=counter;
    4738:	8a 89       	ldd	r24, Y+18	; 0x12
    473a:	89 8b       	std	Y+17, r24	; 0x11
	u8 i = 0;
    473c:	18 8a       	std	Y+16, r1	; 0x10
    473e:	b4 c0       	rjmp	.+360    	; 0x48a8 <EEPROM_WritePage+0x1b6>
	for(;counter>0;counter--)
	{
		u8 address = (add>>8) | 0x50;
    4740:	8c 89       	ldd	r24, Y+20	; 0x14
    4742:	9d 89       	ldd	r25, Y+21	; 0x15
    4744:	89 2f       	mov	r24, r25
    4746:	99 27       	eor	r25, r25
    4748:	80 65       	ori	r24, 0x50	; 80
    474a:	8f 87       	std	Y+15, r24	; 0x0f
		I2C_SendStartCondition();
    474c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <I2C_SendStartCondition>
		I2C_SendSlaveAdd_Write(address);
    4750:	8f 85       	ldd	r24, Y+15	; 0x0f
    4752:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <I2C_SendSlaveAdd_Write>
		I2C_MasterData_Send((u8)add);
    4756:	8c 89       	ldd	r24, Y+20	; 0x14
    4758:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
    475c:	0e c0       	rjmp	.+28     	; 0x477a <EEPROM_WritePage+0x88>

		for (; (i < (16*(c-counter)+16))&&(i<length) ; i++)
		{
			I2C_MasterData_Send(data_arr[i]);
    475e:	88 89       	ldd	r24, Y+16	; 0x10
    4760:	28 2f       	mov	r18, r24
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	8e 89       	ldd	r24, Y+22	; 0x16
    4766:	9f 89       	ldd	r25, Y+23	; 0x17
    4768:	fc 01       	movw	r30, r24
    476a:	e2 0f       	add	r30, r18
    476c:	f3 1f       	adc	r31, r19
    476e:	80 81       	ld	r24, Z
    4770:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
		u8 address = (add>>8) | 0x50;
		I2C_SendStartCondition();
		I2C_SendSlaveAdd_Write(address);
		I2C_MasterData_Send((u8)add);

		for (; (i < (16*(c-counter)+16))&&(i<length) ; i++)
    4774:	88 89       	ldd	r24, Y+16	; 0x10
    4776:	8f 5f       	subi	r24, 0xFF	; 255
    4778:	88 8b       	std	Y+16, r24	; 0x10
    477a:	88 89       	ldd	r24, Y+16	; 0x10
    477c:	48 2f       	mov	r20, r24
    477e:	50 e0       	ldi	r21, 0x00	; 0
    4780:	89 89       	ldd	r24, Y+17	; 0x11
    4782:	28 2f       	mov	r18, r24
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	8a 89       	ldd	r24, Y+18	; 0x12
    4788:	88 2f       	mov	r24, r24
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	b9 01       	movw	r22, r18
    478e:	68 1b       	sub	r22, r24
    4790:	79 0b       	sbc	r23, r25
    4792:	cb 01       	movw	r24, r22
    4794:	01 96       	adiw	r24, 0x01	; 1
    4796:	82 95       	swap	r24
    4798:	92 95       	swap	r25
    479a:	90 7f       	andi	r25, 0xF0	; 240
    479c:	98 27       	eor	r25, r24
    479e:	80 7f       	andi	r24, 0xF0	; 240
    47a0:	98 27       	eor	r25, r24
    47a2:	48 17       	cp	r20, r24
    47a4:	59 07       	cpc	r21, r25
    47a6:	24 f4       	brge	.+8      	; 0x47b0 <EEPROM_WritePage+0xbe>
    47a8:	98 89       	ldd	r25, Y+16	; 0x10
    47aa:	88 8d       	ldd	r24, Y+24	; 0x18
    47ac:	98 17       	cp	r25, r24
    47ae:	b8 f2       	brcs	.-82     	; 0x475e <EEPROM_WritePage+0x6c>
		{
			I2C_MasterData_Send(data_arr[i]);
		}
		I2C_SendStopCondition();
    47b0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <I2C_SendStopCondition>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	a8 ec       	ldi	r26, 0xC8	; 200
    47ba:	b2 e4       	ldi	r27, 0x42	; 66
    47bc:	8b 87       	std	Y+11, r24	; 0x0b
    47be:	9c 87       	std	Y+12, r25	; 0x0c
    47c0:	ad 87       	std	Y+13, r26	; 0x0d
    47c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	4a ef       	ldi	r20, 0xFA	; 250
    47d2:	54 e4       	ldi	r21, 0x44	; 68
    47d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	8f 83       	std	Y+7, r24	; 0x07
    47de:	98 87       	std	Y+8, r25	; 0x08
    47e0:	a9 87       	std	Y+9, r26	; 0x09
    47e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47e4:	6f 81       	ldd	r22, Y+7	; 0x07
    47e6:	78 85       	ldd	r23, Y+8	; 0x08
    47e8:	89 85       	ldd	r24, Y+9	; 0x09
    47ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e8       	ldi	r20, 0x80	; 128
    47f2:	5f e3       	ldi	r21, 0x3F	; 63
    47f4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    47f8:	88 23       	and	r24, r24
    47fa:	2c f4       	brge	.+10     	; 0x4806 <EEPROM_WritePage+0x114>
		__ticks = 1;
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	9e 83       	std	Y+6, r25	; 0x06
    4802:	8d 83       	std	Y+5, r24	; 0x05
    4804:	3f c0       	rjmp	.+126    	; 0x4884 <EEPROM_WritePage+0x192>
	else if (__tmp > 65535)
    4806:	6f 81       	ldd	r22, Y+7	; 0x07
    4808:	78 85       	ldd	r23, Y+8	; 0x08
    480a:	89 85       	ldd	r24, Y+9	; 0x09
    480c:	9a 85       	ldd	r25, Y+10	; 0x0a
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	3f ef       	ldi	r19, 0xFF	; 255
    4812:	4f e7       	ldi	r20, 0x7F	; 127
    4814:	57 e4       	ldi	r21, 0x47	; 71
    4816:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    481a:	18 16       	cp	r1, r24
    481c:	4c f5       	brge	.+82     	; 0x4870 <EEPROM_WritePage+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4820:	7c 85       	ldd	r23, Y+12	; 0x0c
    4822:	8d 85       	ldd	r24, Y+13	; 0x0d
    4824:	9e 85       	ldd	r25, Y+14	; 0x0e
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e2       	ldi	r20, 0x20	; 32
    482c:	51 e4       	ldi	r21, 0x41	; 65
    482e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	bc 01       	movw	r22, r24
    4838:	cd 01       	movw	r24, r26
    483a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	9e 83       	std	Y+6, r25	; 0x06
    4844:	8d 83       	std	Y+5, r24	; 0x05
    4846:	0f c0       	rjmp	.+30     	; 0x4866 <EEPROM_WritePage+0x174>
    4848:	88 ec       	ldi	r24, 0xC8	; 200
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	9c 83       	std	Y+4, r25	; 0x04
    484e:	8b 83       	std	Y+3, r24	; 0x03
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	9c 81       	ldd	r25, Y+4	; 0x04
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <EEPROM_WritePage+0x162>
    4858:	9c 83       	std	Y+4, r25	; 0x04
    485a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4866:	8d 81       	ldd	r24, Y+5	; 0x05
    4868:	9e 81       	ldd	r25, Y+6	; 0x06
    486a:	00 97       	sbiw	r24, 0x00	; 0
    486c:	69 f7       	brne	.-38     	; 0x4848 <EEPROM_WritePage+0x156>
    486e:	14 c0       	rjmp	.+40     	; 0x4898 <EEPROM_WritePage+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4870:	6f 81       	ldd	r22, Y+7	; 0x07
    4872:	78 85       	ldd	r23, Y+8	; 0x08
    4874:	89 85       	ldd	r24, Y+9	; 0x09
    4876:	9a 85       	ldd	r25, Y+10	; 0x0a
    4878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	9e 83       	std	Y+6, r25	; 0x06
    4882:	8d 83       	std	Y+5, r24	; 0x05
    4884:	8d 81       	ldd	r24, Y+5	; 0x05
    4886:	9e 81       	ldd	r25, Y+6	; 0x06
    4888:	9a 83       	std	Y+2, r25	; 0x02
    488a:	89 83       	std	Y+1, r24	; 0x01
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a 81       	ldd	r25, Y+2	; 0x02
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	f1 f7       	brne	.-4      	; 0x4890 <EEPROM_WritePage+0x19e>
    4894:	9a 83       	std	Y+2, r25	; 0x02
    4896:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
		add+=(u16)16;
    4898:	8c 89       	ldd	r24, Y+20	; 0x14
    489a:	9d 89       	ldd	r25, Y+21	; 0x15
    489c:	40 96       	adiw	r24, 0x10	; 16
    489e:	9d 8b       	std	Y+21, r25	; 0x15
    48a0:	8c 8b       	std	Y+20, r24	; 0x14
void EEPROM_WritePage(u16 add,u8* data_arr,u8 length)
{u8  x=0;
	u8 counter=(length/16)+(length%16?1:0);
	u8 c=counter;
	u8 i = 0;
	for(;counter>0;counter--)
    48a2:	8a 89       	ldd	r24, Y+18	; 0x12
    48a4:	81 50       	subi	r24, 0x01	; 1
    48a6:	8a 8b       	std	Y+18, r24	; 0x12
    48a8:	8a 89       	ldd	r24, Y+18	; 0x12
    48aa:	88 23       	and	r24, r24
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <EEPROM_WritePage+0x1be>
    48ae:	48 cf       	rjmp	.-368    	; 0x4740 <EEPROM_WritePage+0x4e>
		}
		I2C_SendStopCondition();
			_delay_ms(100);
		add+=(u16)16;
	}
}
    48b0:	6a 96       	adiw	r28, 0x1a	; 26
    48b2:	0f b6       	in	r0, 0x3f	; 63
    48b4:	f8 94       	cli
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	cd bf       	out	0x3d, r28	; 61
    48bc:	cf 91       	pop	r28
    48be:	df 91       	pop	r29
    48c0:	08 95       	ret

000048c2 <EEPROM_ReadSeq>:

void EEPROM_ReadSeq(u16 add,u8* data_arr,u8 length)
{
    48c2:	0f 93       	push	r16
    48c4:	1f 93       	push	r17
    48c6:	df 93       	push	r29
    48c8:	cf 93       	push	r28
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	65 97       	sbiw	r28, 0x15	; 21
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	cd bf       	out	0x3d, r28	; 61
    48da:	9a 8b       	std	Y+18, r25	; 0x12
    48dc:	89 8b       	std	Y+17, r24	; 0x11
    48de:	7c 8b       	std	Y+20, r23	; 0x14
    48e0:	6b 8b       	std	Y+19, r22	; 0x13
    48e2:	4d 8b       	std	Y+21, r20	; 0x15
	u8 address = (add>>8) | 0x50;
    48e4:	89 89       	ldd	r24, Y+17	; 0x11
    48e6:	9a 89       	ldd	r25, Y+18	; 0x12
    48e8:	89 2f       	mov	r24, r25
    48ea:	99 27       	eor	r25, r25
    48ec:	80 65       	ori	r24, 0x50	; 80
    48ee:	88 8b       	std	Y+16, r24	; 0x10
	I2C_SendStartCondition();
    48f0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <I2C_SendStartCondition>
	I2C_SendSlaveAdd_Write(address);
    48f4:	88 89       	ldd	r24, Y+16	; 0x10
    48f6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <I2C_SendSlaveAdd_Write>
	I2C_MasterData_Send((u8)add);
    48fa:	89 89       	ldd	r24, Y+17	; 0x11
    48fc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <I2C_MasterData_Send>
	I2C_SendRepStartCondition();
    4900:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <I2C_SendRepStartCondition>
	I2C_SendSlaveAdd_Read(address);
    4904:	88 89       	ldd	r24, Y+16	; 0x10
    4906:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <I2C_SendSlaveAdd_Read>

	for (u8 i = 0; i < length; i++)
    490a:	1f 86       	std	Y+15, r1	; 0x0f
    490c:	23 c0       	rjmp	.+70     	; 0x4954 <EEPROM_ReadSeq+0x92>
	{
		data_arr[i]=I2C_MasterData_Read();
    490e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4910:	28 2f       	mov	r18, r24
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	8b 89       	ldd	r24, Y+19	; 0x13
    4916:	9c 89       	ldd	r25, Y+20	; 0x14
    4918:	8c 01       	movw	r16, r24
    491a:	02 0f       	add	r16, r18
    491c:	13 1f       	adc	r17, r19
    491e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <I2C_MasterData_Read>
    4922:	f8 01       	movw	r30, r16
    4924:	80 83       	st	Z, r24
		LCD_WriteNumber(data_arr[i]);
    4926:	8f 85       	ldd	r24, Y+15	; 0x0f
    4928:	28 2f       	mov	r18, r24
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	8b 89       	ldd	r24, Y+19	; 0x13
    492e:	9c 89       	ldd	r25, Y+20	; 0x14
    4930:	fc 01       	movw	r30, r24
    4932:	e2 0f       	add	r30, r18
    4934:	f3 1f       	adc	r31, r19
    4936:	80 81       	ld	r24, Z
    4938:	88 2f       	mov	r24, r24
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	a0 e0       	ldi	r26, 0x00	; 0
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	bc 01       	movw	r22, r24
    4942:	cd 01       	movw	r24, r26
    4944:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
		LCD_WriteChar(' ');
    4948:	80 e2       	ldi	r24, 0x20	; 32
    494a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	I2C_SendSlaveAdd_Write(address);
	I2C_MasterData_Send((u8)add);
	I2C_SendRepStartCondition();
	I2C_SendSlaveAdd_Read(address);

	for (u8 i = 0; i < length; i++)
    494e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4950:	8f 5f       	subi	r24, 0xFF	; 255
    4952:	8f 87       	std	Y+15, r24	; 0x0f
    4954:	9f 85       	ldd	r25, Y+15	; 0x0f
    4956:	8d 89       	ldd	r24, Y+21	; 0x15
    4958:	98 17       	cp	r25, r24
    495a:	c8 f2       	brcs	.-78     	; 0x490e <EEPROM_ReadSeq+0x4c>
	{
		data_arr[i]=I2C_MasterData_Read();
		LCD_WriteNumber(data_arr[i]);
		LCD_WriteChar(' ');
	}
	I2C_SendStopCondition();
    495c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <I2C_SendStopCondition>
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	a8 ec       	ldi	r26, 0xC8	; 200
    4966:	b2 e4       	ldi	r27, 0x42	; 66
    4968:	8b 87       	std	Y+11, r24	; 0x0b
    496a:	9c 87       	std	Y+12, r25	; 0x0c
    496c:	ad 87       	std	Y+13, r26	; 0x0d
    496e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4970:	6b 85       	ldd	r22, Y+11	; 0x0b
    4972:	7c 85       	ldd	r23, Y+12	; 0x0c
    4974:	8d 85       	ldd	r24, Y+13	; 0x0d
    4976:	9e 85       	ldd	r25, Y+14	; 0x0e
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	4a ef       	ldi	r20, 0xFA	; 250
    497e:	54 e4       	ldi	r21, 0x44	; 68
    4980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	8f 83       	std	Y+7, r24	; 0x07
    498a:	98 87       	std	Y+8, r25	; 0x08
    498c:	a9 87       	std	Y+9, r26	; 0x09
    498e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4990:	6f 81       	ldd	r22, Y+7	; 0x07
    4992:	78 85       	ldd	r23, Y+8	; 0x08
    4994:	89 85       	ldd	r24, Y+9	; 0x09
    4996:	9a 85       	ldd	r25, Y+10	; 0x0a
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	40 e8       	ldi	r20, 0x80	; 128
    499e:	5f e3       	ldi	r21, 0x3F	; 63
    49a0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    49a4:	88 23       	and	r24, r24
    49a6:	2c f4       	brge	.+10     	; 0x49b2 <EEPROM_ReadSeq+0xf0>
		__ticks = 1;
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	8d 83       	std	Y+5, r24	; 0x05
    49b0:	3f c0       	rjmp	.+126    	; 0x4a30 <EEPROM_ReadSeq+0x16e>
	else if (__tmp > 65535)
    49b2:	6f 81       	ldd	r22, Y+7	; 0x07
    49b4:	78 85       	ldd	r23, Y+8	; 0x08
    49b6:	89 85       	ldd	r24, Y+9	; 0x09
    49b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	3f ef       	ldi	r19, 0xFF	; 255
    49be:	4f e7       	ldi	r20, 0x7F	; 127
    49c0:	57 e4       	ldi	r21, 0x47	; 71
    49c2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    49c6:	18 16       	cp	r1, r24
    49c8:	4c f5       	brge	.+82     	; 0x4a1c <EEPROM_ReadSeq+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    49cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	40 e2       	ldi	r20, 0x20	; 32
    49d8:	51 e4       	ldi	r21, 0x41	; 65
    49da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	bc 01       	movw	r22, r24
    49e4:	cd 01       	movw	r24, r26
    49e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ea:	dc 01       	movw	r26, r24
    49ec:	cb 01       	movw	r24, r22
    49ee:	9e 83       	std	Y+6, r25	; 0x06
    49f0:	8d 83       	std	Y+5, r24	; 0x05
    49f2:	0f c0       	rjmp	.+30     	; 0x4a12 <EEPROM_ReadSeq+0x150>
    49f4:	88 ec       	ldi	r24, 0xC8	; 200
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	9c 83       	std	Y+4, r25	; 0x04
    49fa:	8b 83       	std	Y+3, r24	; 0x03
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <EEPROM_ReadSeq+0x13e>
    4a04:	9c 83       	std	Y+4, r25	; 0x04
    4a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a08:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	9e 83       	std	Y+6, r25	; 0x06
    4a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a12:	8d 81       	ldd	r24, Y+5	; 0x05
    4a14:	9e 81       	ldd	r25, Y+6	; 0x06
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	69 f7       	brne	.-38     	; 0x49f4 <EEPROM_ReadSeq+0x132>
    4a1a:	14 c0       	rjmp	.+40     	; 0x4a44 <EEPROM_ReadSeq+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a1e:	78 85       	ldd	r23, Y+8	; 0x08
    4a20:	89 85       	ldd	r24, Y+9	; 0x09
    4a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	9e 83       	std	Y+6, r25	; 0x06
    4a2e:	8d 83       	std	Y+5, r24	; 0x05
    4a30:	8d 81       	ldd	r24, Y+5	; 0x05
    4a32:	9e 81       	ldd	r25, Y+6	; 0x06
    4a34:	9a 83       	std	Y+2, r25	; 0x02
    4a36:	89 83       	std	Y+1, r24	; 0x01
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	01 97       	sbiw	r24, 0x01	; 1
    4a3e:	f1 f7       	brne	.-4      	; 0x4a3c <EEPROM_ReadSeq+0x17a>
    4a40:	9a 83       	std	Y+2, r25	; 0x02
    4a42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    4a44:	65 96       	adiw	r28, 0x15	; 21
    4a46:	0f b6       	in	r0, 0x3f	; 63
    4a48:	f8 94       	cli
    4a4a:	de bf       	out	0x3e, r29	; 62
    4a4c:	0f be       	out	0x3f, r0	; 63
    4a4e:	cd bf       	out	0x3d, r28	; 61
    4a50:	cf 91       	pop	r28
    4a52:	df 91       	pop	r29
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	08 95       	ret

00004a5a <EEPROM_WritePage2>:

void EEPROM_WritePage2(u16 add,u8* data_arr)
{
    4a5a:	df 93       	push	r29
    4a5c:	cf 93       	push	r28
    4a5e:	00 d0       	rcall	.+0      	; 0x4a60 <EEPROM_WritePage2+0x6>
    4a60:	00 d0       	rcall	.+0      	; 0x4a62 <EEPROM_WritePage2+0x8>
    4a62:	00 d0       	rcall	.+0      	; 0x4a64 <EEPROM_WritePage2+0xa>
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	9c 83       	std	Y+4, r25	; 0x04
    4a6a:	8b 83       	std	Y+3, r24	; 0x03
    4a6c:	7e 83       	std	Y+6, r23	; 0x06
    4a6e:	6d 83       	std	Y+5, r22	; 0x05
	for (u16 i = 0; i < 30; i++)
    4a70:	1a 82       	std	Y+2, r1	; 0x02
    4a72:	19 82       	std	Y+1, r1	; 0x01
    4a74:	18 c0       	rjmp	.+48     	; 0x4aa6 <EEPROM_WritePage2+0x4c>
	{
		EEPROM_WriteByte(add+i,data_arr[i]);
    4a76:	2b 81       	ldd	r18, Y+3	; 0x03
    4a78:	3c 81       	ldd	r19, Y+4	; 0x04
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7e:	a9 01       	movw	r20, r18
    4a80:	48 0f       	add	r20, r24
    4a82:	59 1f       	adc	r21, r25
    4a84:	2d 81       	ldd	r18, Y+5	; 0x05
    4a86:	3e 81       	ldd	r19, Y+6	; 0x06
    4a88:	89 81       	ldd	r24, Y+1	; 0x01
    4a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8c:	f9 01       	movw	r30, r18
    4a8e:	e8 0f       	add	r30, r24
    4a90:	f9 1f       	adc	r31, r25
    4a92:	20 81       	ld	r18, Z
    4a94:	ca 01       	movw	r24, r20
    4a96:	62 2f       	mov	r22, r18
    4a98:	0e 94 3b 22 	call	0x4476	; 0x4476 <EEPROM_WriteByte>
	_delay_ms(100);
}

void EEPROM_WritePage2(u16 add,u8* data_arr)
{
	for (u16 i = 0; i < 30; i++)
    4a9c:	89 81       	ldd	r24, Y+1	; 0x01
    4a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa0:	01 96       	adiw	r24, 0x01	; 1
    4aa2:	9a 83       	std	Y+2, r25	; 0x02
    4aa4:	89 83       	std	Y+1, r24	; 0x01
    4aa6:	89 81       	ldd	r24, Y+1	; 0x01
    4aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aaa:	8e 31       	cpi	r24, 0x1E	; 30
    4aac:	91 05       	cpc	r25, r1
    4aae:	18 f3       	brcs	.-58     	; 0x4a76 <EEPROM_WritePage2+0x1c>
	{
		EEPROM_WriteByte(add+i,data_arr[i]);
	}
}
    4ab0:	26 96       	adiw	r28, 0x06	; 6
    4ab2:	0f b6       	in	r0, 0x3f	; 63
    4ab4:	f8 94       	cli
    4ab6:	de bf       	out	0x3e, r29	; 62
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	cd bf       	out	0x3d, r28	; 61
    4abc:	cf 91       	pop	r28
    4abe:	df 91       	pop	r29
    4ac0:	08 95       	ret

00004ac2 <EEPROM_ReadSeq2>:

void EEPROM_ReadSeq2(u16 add,u8* data_arr)
{
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	27 97       	sbiw	r28, 0x07	; 7
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	9d 83       	std	Y+5, r25	; 0x05
    4ad8:	8c 83       	std	Y+4, r24	; 0x04
    4ada:	7f 83       	std	Y+7, r23	; 0x07
    4adc:	6e 83       	std	Y+6, r22	; 0x06
	u8 x=0;
    4ade:	1b 82       	std	Y+3, r1	; 0x03
	for (u16 i = 0; i < 30; i++)
    4ae0:	1a 82       	std	Y+2, r1	; 0x02
    4ae2:	19 82       	std	Y+1, r1	; 0x01
    4ae4:	1a c0       	rjmp	.+52     	; 0x4b1a <EEPROM_ReadSeq2+0x58>
	{
		EEPROM_ReadByte(add+i,&x);
    4ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    4ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	9a 81       	ldd	r25, Y+2	; 0x02
    4aee:	82 0f       	add	r24, r18
    4af0:	93 1f       	adc	r25, r19
    4af2:	9e 01       	movw	r18, r28
    4af4:	2d 5f       	subi	r18, 0xFD	; 253
    4af6:	3f 4f       	sbci	r19, 0xFF	; 255
    4af8:	b9 01       	movw	r22, r18
    4afa:	0e 94 d6 22 	call	0x45ac	; 0x45ac <EEPROM_ReadByte>
		data_arr[i]=x;
    4afe:	2e 81       	ldd	r18, Y+6	; 0x06
    4b00:	3f 81       	ldd	r19, Y+7	; 0x07
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	9a 81       	ldd	r25, Y+2	; 0x02
    4b06:	f9 01       	movw	r30, r18
    4b08:	e8 0f       	add	r30, r24
    4b0a:	f9 1f       	adc	r31, r25
    4b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0e:	80 83       	st	Z, r24
}

void EEPROM_ReadSeq2(u16 add,u8* data_arr)
{
	u8 x=0;
	for (u16 i = 0; i < 30; i++)
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	9a 81       	ldd	r25, Y+2	; 0x02
    4b14:	01 96       	adiw	r24, 0x01	; 1
    4b16:	9a 83       	std	Y+2, r25	; 0x02
    4b18:	89 83       	std	Y+1, r24	; 0x01
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1e:	8e 31       	cpi	r24, 0x1E	; 30
    4b20:	91 05       	cpc	r25, r1
    4b22:	08 f3       	brcs	.-62     	; 0x4ae6 <EEPROM_ReadSeq2+0x24>
	{
		EEPROM_ReadByte(add+i,&x);
		data_arr[i]=x;
	}
}
    4b24:	27 96       	adiw	r28, 0x07	; 7
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	cf 91       	pop	r28
    4b32:	df 91       	pop	r29
    4b34:	08 95       	ret

00004b36 <MOTOR_Init>:
#include "DC_Motor/DC_Motor_Cfg.h"
#include "Timer/Timer0/Timer0_Interface.h"


void MOTOR_Init(void)
{
    4b36:	df 93       	push	r29
    4b38:	cf 93       	push	r28
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
	 MOTOR_Stop(M1);
    4b3e:	80 e0       	ldi	r24, 0x00	; 0
    4b40:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <MOTOR_Stop>
	 MOTOR_Stop(M2);
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <MOTOR_Stop>
	 MOTOR_Stop(M3);
    4b4a:	82 e0       	ldi	r24, 0x02	; 2
    4b4c:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <MOTOR_Stop>
	 MOTOR_Stop(M4);
    4b50:	83 e0       	ldi	r24, 0x03	; 3
    4b52:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <MOTOR_Stop>

}
    4b56:	cf 91       	pop	r28
    4b58:	df 91       	pop	r29
    4b5a:	08 95       	ret

00004b5c <MOTOR_Stop>:

void MOTOR_Stop(MOTOR_type m)
{
    4b5c:	df 93       	push	r29
    4b5e:	cf 93       	push	r28
    4b60:	0f 92       	push	r0
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	89 83       	std	Y+1, r24	; 0x01
	m*=2;
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	88 2f       	mov	r24, r24
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	88 0f       	add	r24, r24
    4b70:	99 1f       	adc	r25, r25
    4b72:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MOTOR_PinsArr[m],LOW);
    4b74:	89 81       	ldd	r24, Y+1	; 0x01
    4b76:	88 2f       	mov	r24, r24
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	e8 52       	subi	r30, 0x28	; 40
    4b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    4b80:	80 81       	ld	r24, Z
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsArr[m+1],LOW);
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	88 2f       	mov	r24, r24
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	01 96       	adiw	r24, 0x01	; 1
    4b90:	fc 01       	movw	r30, r24
    4b92:	e8 52       	subi	r30, 0x28	; 40
    4b94:	fd 4f       	sbci	r31, 0xFD	; 253
    4b96:	80 81       	ld	r24, Z
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}
    4b9e:	0f 90       	pop	r0
    4ba0:	cf 91       	pop	r28
    4ba2:	df 91       	pop	r29
    4ba4:	08 95       	ret

00004ba6 <MOTOR_CW>:

void MOTOR_CW(MOTOR_type m)
{
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	0f 92       	push	r0
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	89 83       	std	Y+1, r24	; 0x01
	m*=2;
    4bb2:	89 81       	ldd	r24, Y+1	; 0x01
    4bb4:	88 2f       	mov	r24, r24
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MOTOR_PinsArr[m],HIGH);
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
    4bc0:	88 2f       	mov	r24, r24
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	e8 52       	subi	r30, 0x28	; 40
    4bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    4bca:	80 81       	ld	r24, Z
    4bcc:	61 e0       	ldi	r22, 0x01	; 1
    4bce:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsArr[m+1],LOW);	
    4bd2:	89 81       	ldd	r24, Y+1	; 0x01
    4bd4:	88 2f       	mov	r24, r24
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	01 96       	adiw	r24, 0x01	; 1
    4bda:	fc 01       	movw	r30, r24
    4bdc:	e8 52       	subi	r30, 0x28	; 40
    4bde:	fd 4f       	sbci	r31, 0xFD	; 253
    4be0:	80 81       	ld	r24, Z
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}
    4be8:	0f 90       	pop	r0
    4bea:	cf 91       	pop	r28
    4bec:	df 91       	pop	r29
    4bee:	08 95       	ret

00004bf0 <MOTOR_CCW>:

void MOTOR_CCW(MOTOR_type m)
{
    4bf0:	df 93       	push	r29
    4bf2:	cf 93       	push	r28
    4bf4:	0f 92       	push	r0
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	89 83       	std	Y+1, r24	; 0x01
	m*=2;
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	88 2f       	mov	r24, r24
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	88 0f       	add	r24, r24
    4c04:	99 1f       	adc	r25, r25
    4c06:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MOTOR_PinsArr[m],LOW);
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	88 2f       	mov	r24, r24
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	fc 01       	movw	r30, r24
    4c10:	e8 52       	subi	r30, 0x28	; 40
    4c12:	fd 4f       	sbci	r31, 0xFD	; 253
    4c14:	80 81       	ld	r24, Z
    4c16:	60 e0       	ldi	r22, 0x00	; 0
    4c18:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsArr[m+1],HIGH);
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	88 2f       	mov	r24, r24
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	fc 01       	movw	r30, r24
    4c26:	e8 52       	subi	r30, 0x28	; 40
    4c28:	fd 4f       	sbci	r31, 0xFD	; 253
    4c2a:	80 81       	ld	r24, Z
    4c2c:	61 e0       	ldi	r22, 0x01	; 1
    4c2e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}
    4c32:	0f 90       	pop	r0
    4c34:	cf 91       	pop	r28
    4c36:	df 91       	pop	r29
    4c38:	08 95       	ret

00004c3a <MOTOR_Speed>:

void MOTOR_Speed(u8 speed)
{
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	0f 92       	push	r0
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
    4c44:	89 83       	std	Y+1, r24	; 0x01
	timer0_stop();
    4c46:	0e 94 3b 0b 	call	0x1676	; 0x1676 <timer0_stop>
	timer0_init();
    4c4a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <timer0_init>
	timer0_cmp_value(timer0_set_cmp(speed));
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <timer0_set_cmp>
    4c54:	0e 94 2d 0b 	call	0x165a	; 0x165a <timer0_cmp_value>
	timer0_start();
    4c58:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <timer0_start>
}
    4c5c:	0f 90       	pop	r0
    4c5e:	cf 91       	pop	r28
    4c60:	df 91       	pop	r29
    4c62:	08 95       	ret

00004c64 <start_screen>:

static u8 id_g,pass_g,func_g;
u8 mode_flag;

void start_screen()
{
    4c64:	df 93       	push	r29
    4c66:	cf 93       	push	r28
    4c68:	cd b7       	in	r28, 0x3d	; 61
    4c6a:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    4c6c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("User ID:");
    4c78:	80 e6       	ldi	r24, 0x60	; 96
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4c80:	80 e4       	ldi	r24, 0x40	; 64
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Password:");
    4c88:	89 e6       	ldi	r24, 0x69	; 105
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
}
    4c90:	cf 91       	pop	r28
    4c92:	df 91       	pop	r29
    4c94:	08 95       	ret

00004c96 <options_screen>:

void options_screen()
{
    4c96:	df 93       	push	r29
    4c98:	cf 93       	push	r28
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	2e 97       	sbiw	r28, 0x0e	; 14
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    4caa:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_WriteString("Select Operation :");
    4cae:	83 e7       	ldi	r24, 0x73	; 115
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	aa ef       	ldi	r26, 0xFA	; 250
    4cbc:	b3 e4       	ldi	r27, 0x43	; 67
    4cbe:	8b 87       	std	Y+11, r24	; 0x0b
    4cc0:	9c 87       	std	Y+12, r25	; 0x0c
    4cc2:	ad 87       	std	Y+13, r26	; 0x0d
    4cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	4a ef       	ldi	r20, 0xFA	; 250
    4cd4:	54 e4       	ldi	r21, 0x44	; 68
    4cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	8f 83       	std	Y+7, r24	; 0x07
    4ce0:	98 87       	std	Y+8, r25	; 0x08
    4ce2:	a9 87       	std	Y+9, r26	; 0x09
    4ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ce8:	78 85       	ldd	r23, Y+8	; 0x08
    4cea:	89 85       	ldd	r24, Y+9	; 0x09
    4cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	40 e8       	ldi	r20, 0x80	; 128
    4cf4:	5f e3       	ldi	r21, 0x3F	; 63
    4cf6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    4cfa:	88 23       	and	r24, r24
    4cfc:	2c f4       	brge	.+10     	; 0x4d08 <options_screen+0x72>
		__ticks = 1;
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	9e 83       	std	Y+6, r25	; 0x06
    4d04:	8d 83       	std	Y+5, r24	; 0x05
    4d06:	3f c0       	rjmp	.+126    	; 0x4d86 <options_screen+0xf0>
	else if (__tmp > 65535)
    4d08:	6f 81       	ldd	r22, Y+7	; 0x07
    4d0a:	78 85       	ldd	r23, Y+8	; 0x08
    4d0c:	89 85       	ldd	r24, Y+9	; 0x09
    4d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	3f ef       	ldi	r19, 0xFF	; 255
    4d14:	4f e7       	ldi	r20, 0x7F	; 127
    4d16:	57 e4       	ldi	r21, 0x47	; 71
    4d18:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    4d1c:	18 16       	cp	r1, r24
    4d1e:	4c f5       	brge	.+82     	; 0x4d72 <options_screen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e2       	ldi	r20, 0x20	; 32
    4d2e:	51 e4       	ldi	r21, 0x41	; 65
    4d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	bc 01       	movw	r22, r24
    4d3a:	cd 01       	movw	r24, r26
    4d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d40:	dc 01       	movw	r26, r24
    4d42:	cb 01       	movw	r24, r22
    4d44:	9e 83       	std	Y+6, r25	; 0x06
    4d46:	8d 83       	std	Y+5, r24	; 0x05
    4d48:	0f c0       	rjmp	.+30     	; 0x4d68 <options_screen+0xd2>
    4d4a:	88 ec       	ldi	r24, 0xC8	; 200
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	9c 83       	std	Y+4, r25	; 0x04
    4d50:	8b 83       	std	Y+3, r24	; 0x03
    4d52:	8b 81       	ldd	r24, Y+3	; 0x03
    4d54:	9c 81       	ldd	r25, Y+4	; 0x04
    4d56:	01 97       	sbiw	r24, 0x01	; 1
    4d58:	f1 f7       	brne	.-4      	; 0x4d56 <options_screen+0xc0>
    4d5a:	9c 83       	std	Y+4, r25	; 0x04
    4d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d60:	9e 81       	ldd	r25, Y+6	; 0x06
    4d62:	01 97       	sbiw	r24, 0x01	; 1
    4d64:	9e 83       	std	Y+6, r25	; 0x06
    4d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d68:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6c:	00 97       	sbiw	r24, 0x00	; 0
    4d6e:	69 f7       	brne	.-38     	; 0x4d4a <options_screen+0xb4>
    4d70:	14 c0       	rjmp	.+40     	; 0x4d9a <options_screen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d72:	6f 81       	ldd	r22, Y+7	; 0x07
    4d74:	78 85       	ldd	r23, Y+8	; 0x08
    4d76:	89 85       	ldd	r24, Y+9	; 0x09
    4d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	9e 83       	std	Y+6, r25	; 0x06
    4d84:	8d 83       	std	Y+5, r24	; 0x05
    4d86:	8d 81       	ldd	r24, Y+5	; 0x05
    4d88:	9e 81       	ldd	r25, Y+6	; 0x06
    4d8a:	9a 83       	std	Y+2, r25	; 0x02
    4d8c:	89 83       	std	Y+1, r24	; 0x01
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	9a 81       	ldd	r25, Y+2	; 0x02
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	f1 f7       	brne	.-4      	; 0x4d92 <options_screen+0xfc>
    4d96:	9a 83       	std	Y+2, r25	; 0x02
    4d98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_Clear();
    4d9a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	60 e0       	ldi	r22, 0x00	; 0
    4da2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("1.Control Led");
    4da6:	86 e8       	ldi	r24, 0x86	; 134
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4dae:	80 e4       	ldi	r24, 0x40	; 64
    4db0:	60 e0       	ldi	r22, 0x00	; 0
    4db2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("2.Control Door");
    4db6:	84 e9       	ldi	r24, 0x94	; 148
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE3,0);
    4dbe:	84 e1       	ldi	r24, 0x14	; 20
    4dc0:	60 e0       	ldi	r22, 0x00	; 0
    4dc2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("3.Control Fan");
    4dc6:	83 ea       	ldi	r24, 0xA3	; 163
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE4,0);
    4dce:	84 e5       	ldi	r24, 0x54	; 84
    4dd0:	60 e0       	ldi	r22, 0x00	; 0
    4dd2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("4.Control Dimmer");
    4dd6:	81 eb       	ldi	r24, 0xB1	; 177
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
}
    4dde:	2e 96       	adiw	r28, 0x0e	; 14
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	cf 91       	pop	r28
    4dec:	df 91       	pop	r29
    4dee:	08 95       	ret

00004df0 <leds_screen>:

void leds_screen()
{
    4df0:	df 93       	push	r29
    4df2:	cf 93       	push	r28
    4df4:	cd b7       	in	r28, 0x3d	; 61
    4df6:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    4df8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	60 e0       	ldi	r22, 0x00	; 0
    4e00:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Select Led:");
    4e04:	82 ec       	ldi	r24, 0xC2	; 194
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4e0c:	80 e4       	ldi	r24, 0x40	; 64
    4e0e:	60 e0       	ldi	r22, 0x00	; 0
    4e10:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("1.Led 1");
    4e14:	8e ec       	ldi	r24, 0xCE	; 206
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,8);
    4e1c:	80 e4       	ldi	r24, 0x40	; 64
    4e1e:	68 e0       	ldi	r22, 0x08	; 8
    4e20:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("2.Led 2");
    4e24:	86 ed       	ldi	r24, 0xD6	; 214
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE3,0);
    4e2c:	84 e1       	ldi	r24, 0x14	; 20
    4e2e:	60 e0       	ldi	r22, 0x00	; 0
    4e30:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("3.Led 3");
    4e34:	8e ed       	ldi	r24, 0xDE	; 222
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE3,8);
    4e3c:	84 e1       	ldi	r24, 0x14	; 20
    4e3e:	68 e0       	ldi	r22, 0x08	; 8
    4e40:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("4.Led 4");
    4e44:	86 ee       	ldi	r24, 0xE6	; 230
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE4,0);
    4e4c:	84 e5       	ldi	r24, 0x54	; 84
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("5.Led 5");
    4e54:	8e ee       	ldi	r24, 0xEE	; 238
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE4,8);
    4e5c:	84 e5       	ldi	r24, 0x54	; 84
    4e5e:	68 e0       	ldi	r22, 0x08	; 8
    4e60:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("6.LEDS OFF");
    4e64:	86 ef       	ldi	r24, 0xF6	; 246
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
}
    4e6c:	cf 91       	pop	r28
    4e6e:	df 91       	pop	r29
    4e70:	08 95       	ret

00004e72 <leds_status_screen>:

void leds_status_screen()
{
    4e72:	df 93       	push	r29
    4e74:	cf 93       	push	r28
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    4e7a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4e7e:	80 e0       	ldi	r24, 0x00	; 0
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Select Status:");
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	91 e0       	ldi	r25, 0x01	; 1
    4e8a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4e8e:	80 e4       	ldi	r24, 0x40	; 64
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("1.ON");
    4e96:	80 e1       	ldi	r24, 0x10	; 16
    4e98:	91 e0       	ldi	r25, 0x01	; 1
    4e9a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE3,0);
    4e9e:	84 e1       	ldi	r24, 0x14	; 20
    4ea0:	60 e0       	ldi	r22, 0x00	; 0
    4ea2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("2.OFF");
    4ea6:	85 e1       	ldi	r24, 0x15	; 21
    4ea8:	91 e0       	ldi	r25, 0x01	; 1
    4eaa:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
}
    4eae:	cf 91       	pop	r28
    4eb0:	df 91       	pop	r29
    4eb2:	08 95       	ret

00004eb4 <ctrl_led>:

void ctrl_led(u8* led_num,u8* led_state)
{
    4eb4:	df 93       	push	r29
    4eb6:	cf 93       	push	r28
    4eb8:	00 d0       	rcall	.+0      	; 0x4eba <ctrl_led+0x6>
    4eba:	00 d0       	rcall	.+0      	; 0x4ebc <ctrl_led+0x8>
    4ebc:	00 d0       	rcall	.+0      	; 0x4ebe <ctrl_led+0xa>
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
    4ec2:	9c 83       	std	Y+4, r25	; 0x04
    4ec4:	8b 83       	std	Y+3, r24	; 0x03
    4ec6:	7e 83       	std	Y+6, r23	; 0x06
    4ec8:	6d 83       	std	Y+5, r22	; 0x05
	leds_screen();
    4eca:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <leds_screen>
	u8 f=1;
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	8a 83       	std	Y+2, r24	; 0x02
    4ed2:	2a c0       	rjmp	.+84     	; 0x4f28 <ctrl_led+0x74>
	while(f)
	{
		u8 keyy=KeyPad_get();
    4ed4:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    4ed8:	89 83       	std	Y+1, r24	; 0x01
		if(keyy!=NO_KEY)
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	84 35       	cpi	r24, 0x54	; 84
    4ede:	21 f1       	breq	.+72     	; 0x4f28 <ctrl_led+0x74>
		{
			if(keyy=='6')
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	86 33       	cpi	r24, 0x36	; 54
    4ee4:	51 f4       	brne	.+20     	; 0x4efa <ctrl_led+0x46>
			{
				DIO_WritePort(PD,((0xE0&DIO_ReadPort(PD))));
    4ee6:	83 e0       	ldi	r24, 0x03	; 3
    4ee8:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_ReadPort>
    4eec:	98 2f       	mov	r25, r24
    4eee:	90 7e       	andi	r25, 0xE0	; 224
    4ef0:	83 e0       	ldi	r24, 0x03	; 3
    4ef2:	69 2f       	mov	r22, r25
    4ef4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_WritePort>
    4ef8:	1a c0       	rjmp	.+52     	; 0x4f2e <ctrl_led+0x7a>
				return ;
			}
			*led_num=keyy-'0';
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	80 53       	subi	r24, 0x30	; 48
    4efe:	eb 81       	ldd	r30, Y+3	; 0x03
    4f00:	fc 81       	ldd	r31, Y+4	; 0x04
    4f02:	80 83       	st	Z, r24
			leds_status_screen();
    4f04:	0e 94 39 27 	call	0x4e72	; 0x4e72 <leds_status_screen>
    4f08:	0c c0       	rjmp	.+24     	; 0x4f22 <ctrl_led+0x6e>
			while(f)
				{
					keyy=KeyPad_get();
    4f0a:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    4f0e:	89 83       	std	Y+1, r24	; 0x01
					if(keyy!=NO_KEY)
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	84 35       	cpi	r24, 0x54	; 84
    4f14:	31 f0       	breq	.+12     	; 0x4f22 <ctrl_led+0x6e>
					{
						*led_state=keyy-'0';
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	80 53       	subi	r24, 0x30	; 48
    4f1a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f1c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f1e:	80 83       	st	Z, r24
						f=0;
    4f20:	1a 82       	std	Y+2, r1	; 0x02
				DIO_WritePort(PD,((0xE0&DIO_ReadPort(PD))));
				return ;
			}
			*led_num=keyy-'0';
			leds_status_screen();
			while(f)
    4f22:	8a 81       	ldd	r24, Y+2	; 0x02
    4f24:	88 23       	and	r24, r24
    4f26:	89 f7       	brne	.-30     	; 0x4f0a <ctrl_led+0x56>

void ctrl_led(u8* led_num,u8* led_state)
{
	leds_screen();
	u8 f=1;
	while(f)
    4f28:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2a:	88 23       	and	r24, r24
    4f2c:	99 f6       	brne	.-90     	; 0x4ed4 <ctrl_led+0x20>
					}
				}
		}
	}

}
    4f2e:	26 96       	adiw	r28, 0x06	; 6
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
    4f3a:	cf 91       	pop	r28
    4f3c:	df 91       	pop	r29
    4f3e:	08 95       	ret

00004f40 <Door_status_screen>:

void Door_status_screen()
{
    4f40:	df 93       	push	r29
    4f42:	cf 93       	push	r28
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    4f48:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Select Status:");
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	91 e0       	ldi	r25, 0x01	; 1
    4f58:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4f5c:	80 e4       	ldi	r24, 0x40	; 64
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("1.OPEN");
    4f64:	8b e1       	ldi	r24, 0x1B	; 27
    4f66:	91 e0       	ldi	r25, 0x01	; 1
    4f68:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE3,0);
    4f6c:	84 e1       	ldi	r24, 0x14	; 20
    4f6e:	60 e0       	ldi	r22, 0x00	; 0
    4f70:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("2.CLOSE");
    4f74:	82 e2       	ldi	r24, 0x22	; 34
    4f76:	91 e0       	ldi	r25, 0x01	; 1
    4f78:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
}
    4f7c:	cf 91       	pop	r28
    4f7e:	df 91       	pop	r29
    4f80:	08 95       	ret

00004f82 <ctrl_door>:

void ctrl_door(u8* door_status)
{
    4f82:	df 93       	push	r29
    4f84:	cf 93       	push	r28
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <ctrl_door+0x6>
    4f88:	00 d0       	rcall	.+0      	; 0x4f8a <ctrl_door+0x8>
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62
    4f8e:	9c 83       	std	Y+4, r25	; 0x04
    4f90:	8b 83       	std	Y+3, r24	; 0x03
	Door_status_screen();
    4f92:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <Door_status_screen>
	u8 f=1;
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	8a 83       	std	Y+2, r24	; 0x02
    4f9a:	0c c0       	rjmp	.+24     	; 0x4fb4 <ctrl_door+0x32>
	while(f)
	{
		u8 keyy=KeyPad_get();
    4f9c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    4fa0:	89 83       	std	Y+1, r24	; 0x01
		if(keyy!=NO_KEY)
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	84 35       	cpi	r24, 0x54	; 84
    4fa6:	31 f0       	breq	.+12     	; 0x4fb4 <ctrl_door+0x32>
		{
			*door_status=keyy-'0';
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	80 53       	subi	r24, 0x30	; 48
    4fac:	eb 81       	ldd	r30, Y+3	; 0x03
    4fae:	fc 81       	ldd	r31, Y+4	; 0x04
    4fb0:	80 83       	st	Z, r24
			f=0;
    4fb2:	1a 82       	std	Y+2, r1	; 0x02

void ctrl_door(u8* door_status)
{
	Door_status_screen();
	u8 f=1;
	while(f)
    4fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb6:	88 23       	and	r24, r24
    4fb8:	89 f7       	brne	.-30     	; 0x4f9c <ctrl_door+0x1a>
		{
			*door_status=keyy-'0';
			f=0;
		}
	}
}
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
    4fbe:	0f 90       	pop	r0
    4fc0:	0f 90       	pop	r0
    4fc2:	cf 91       	pop	r28
    4fc4:	df 91       	pop	r29
    4fc6:	08 95       	ret

00004fc8 <Dimmer_screen>:

void Dimmer_screen()
{
    4fc8:	df 93       	push	r29
    4fca:	cf 93       	push	r28
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    4fd0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_SETCURSOR(LINE1,0);
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	60 e0       	ldi	r22, 0x00	; 0
    4fd8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Enter Speed(0 to 99)");
    4fdc:	8a e2       	ldi	r24, 0x2A	; 42
    4fde:	91 e0       	ldi	r25, 0x01	; 1
    4fe0:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,0);
    4fe4:	80 e4       	ldi	r24, 0x40	; 64
    4fe6:	60 e0       	ldi	r22, 0x00	; 0
    4fe8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
}
    4fec:	cf 91       	pop	r28
    4fee:	df 91       	pop	r29
    4ff0:	08 95       	ret

00004ff2 <ctrl_dimmer>:

void ctrl_dimmer(u8* speed)
{
    4ff2:	df 93       	push	r29
    4ff4:	cf 93       	push	r28
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	63 97       	sbiw	r28, 0x13	; 19
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	9b 8b       	std	Y+19, r25	; 0x13
    5008:	8a 8b       	std	Y+18, r24	; 0x12
	Dimmer_screen();
    500a:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <Dimmer_screen>
	u8 f=0,num=0;
    500e:	19 8a       	std	Y+17, r1	; 0x11
    5010:	18 8a       	std	Y+16, r1	; 0x10
    5012:	1e c0       	rjmp	.+60     	; 0x5050 <ctrl_dimmer+0x5e>
	while(f<2)
	{
		u8 keyy=KeyPad_get();
    5014:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    5018:	8f 87       	std	Y+15, r24	; 0x0f
		if(keyy!=NO_KEY)
    501a:	8f 85       	ldd	r24, Y+15	; 0x0f
    501c:	84 35       	cpi	r24, 0x54	; 84
    501e:	c1 f0       	breq	.+48     	; 0x5050 <ctrl_dimmer+0x5e>
		{
			LCD_WriteChar(keyy);
    5020:	8f 85       	ldd	r24, Y+15	; 0x0f
    5022:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
			num=num*10+(keyy-'0');
    5026:	88 89       	ldd	r24, Y+16	; 0x10
    5028:	88 2f       	mov	r24, r24
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	9c 01       	movw	r18, r24
    502e:	22 0f       	add	r18, r18
    5030:	33 1f       	adc	r19, r19
    5032:	c9 01       	movw	r24, r18
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	88 0f       	add	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	82 0f       	add	r24, r18
    503e:	93 1f       	adc	r25, r19
    5040:	98 2f       	mov	r25, r24
    5042:	8f 85       	ldd	r24, Y+15	; 0x0f
    5044:	89 0f       	add	r24, r25
    5046:	80 53       	subi	r24, 0x30	; 48
    5048:	88 8b       	std	Y+16, r24	; 0x10
			f++;
    504a:	89 89       	ldd	r24, Y+17	; 0x11
    504c:	8f 5f       	subi	r24, 0xFF	; 255
    504e:	89 8b       	std	Y+17, r24	; 0x11

void ctrl_dimmer(u8* speed)
{
	Dimmer_screen();
	u8 f=0,num=0;
	while(f<2)
    5050:	89 89       	ldd	r24, Y+17	; 0x11
    5052:	82 30       	cpi	r24, 0x02	; 2
    5054:	f8 f2       	brcs	.-66     	; 0x5014 <ctrl_dimmer+0x22>
			LCD_WriteChar(keyy);
			num=num*10+(keyy-'0');
			f++;
		}
	}
	*speed=num;
    5056:	ea 89       	ldd	r30, Y+18	; 0x12
    5058:	fb 89       	ldd	r31, Y+19	; 0x13
    505a:	88 89       	ldd	r24, Y+16	; 0x10
    505c:	80 83       	st	Z, r24
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	a8 e4       	ldi	r26, 0x48	; 72
    5064:	b2 e4       	ldi	r27, 0x42	; 66
    5066:	8b 87       	std	Y+11, r24	; 0x0b
    5068:	9c 87       	std	Y+12, r25	; 0x0c
    506a:	ad 87       	std	Y+13, r26	; 0x0d
    506c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    506e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5070:	7c 85       	ldd	r23, Y+12	; 0x0c
    5072:	8d 85       	ldd	r24, Y+13	; 0x0d
    5074:	9e 85       	ldd	r25, Y+14	; 0x0e
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	4a ef       	ldi	r20, 0xFA	; 250
    507c:	54 e4       	ldi	r21, 0x44	; 68
    507e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	8f 83       	std	Y+7, r24	; 0x07
    5088:	98 87       	std	Y+8, r25	; 0x08
    508a:	a9 87       	std	Y+9, r26	; 0x09
    508c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    508e:	6f 81       	ldd	r22, Y+7	; 0x07
    5090:	78 85       	ldd	r23, Y+8	; 0x08
    5092:	89 85       	ldd	r24, Y+9	; 0x09
    5094:	9a 85       	ldd	r25, Y+10	; 0x0a
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	40 e8       	ldi	r20, 0x80	; 128
    509c:	5f e3       	ldi	r21, 0x3F	; 63
    509e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    50a2:	88 23       	and	r24, r24
    50a4:	2c f4       	brge	.+10     	; 0x50b0 <ctrl_dimmer+0xbe>
		__ticks = 1;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	9e 83       	std	Y+6, r25	; 0x06
    50ac:	8d 83       	std	Y+5, r24	; 0x05
    50ae:	3f c0       	rjmp	.+126    	; 0x512e <ctrl_dimmer+0x13c>
	else if (__tmp > 65535)
    50b0:	6f 81       	ldd	r22, Y+7	; 0x07
    50b2:	78 85       	ldd	r23, Y+8	; 0x08
    50b4:	89 85       	ldd	r24, Y+9	; 0x09
    50b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	3f ef       	ldi	r19, 0xFF	; 255
    50bc:	4f e7       	ldi	r20, 0x7F	; 127
    50be:	57 e4       	ldi	r21, 0x47	; 71
    50c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    50c4:	18 16       	cp	r1, r24
    50c6:	4c f5       	brge	.+82     	; 0x511a <ctrl_dimmer+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    50ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    50cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    50ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	40 e2       	ldi	r20, 0x20	; 32
    50d6:	51 e4       	ldi	r21, 0x41	; 65
    50d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50dc:	dc 01       	movw	r26, r24
    50de:	cb 01       	movw	r24, r22
    50e0:	bc 01       	movw	r22, r24
    50e2:	cd 01       	movw	r24, r26
    50e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	9e 83       	std	Y+6, r25	; 0x06
    50ee:	8d 83       	std	Y+5, r24	; 0x05
    50f0:	0f c0       	rjmp	.+30     	; 0x5110 <ctrl_dimmer+0x11e>
    50f2:	88 ec       	ldi	r24, 0xC8	; 200
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	9c 83       	std	Y+4, r25	; 0x04
    50f8:	8b 83       	std	Y+3, r24	; 0x03
    50fa:	8b 81       	ldd	r24, Y+3	; 0x03
    50fc:	9c 81       	ldd	r25, Y+4	; 0x04
    50fe:	01 97       	sbiw	r24, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <ctrl_dimmer+0x10c>
    5102:	9c 83       	std	Y+4, r25	; 0x04
    5104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5106:	8d 81       	ldd	r24, Y+5	; 0x05
    5108:	9e 81       	ldd	r25, Y+6	; 0x06
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	9e 83       	std	Y+6, r25	; 0x06
    510e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5110:	8d 81       	ldd	r24, Y+5	; 0x05
    5112:	9e 81       	ldd	r25, Y+6	; 0x06
    5114:	00 97       	sbiw	r24, 0x00	; 0
    5116:	69 f7       	brne	.-38     	; 0x50f2 <ctrl_dimmer+0x100>
    5118:	14 c0       	rjmp	.+40     	; 0x5142 <ctrl_dimmer+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    511a:	6f 81       	ldd	r22, Y+7	; 0x07
    511c:	78 85       	ldd	r23, Y+8	; 0x08
    511e:	89 85       	ldd	r24, Y+9	; 0x09
    5120:	9a 85       	ldd	r25, Y+10	; 0x0a
    5122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	9e 83       	std	Y+6, r25	; 0x06
    512c:	8d 83       	std	Y+5, r24	; 0x05
    512e:	8d 81       	ldd	r24, Y+5	; 0x05
    5130:	9e 81       	ldd	r25, Y+6	; 0x06
    5132:	9a 83       	std	Y+2, r25	; 0x02
    5134:	89 83       	std	Y+1, r24	; 0x01
    5136:	89 81       	ldd	r24, Y+1	; 0x01
    5138:	9a 81       	ldd	r25, Y+2	; 0x02
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <ctrl_dimmer+0x148>
    513e:	9a 83       	std	Y+2, r25	; 0x02
    5140:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    5142:	63 96       	adiw	r28, 0x13	; 19
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	cf 91       	pop	r28
    5150:	df 91       	pop	r29
    5152:	08 95       	ret

00005154 <Led_Control>:

void Led_Control(DIO_Pin_type LedNumber , LED_Status_t LedState)
{
    5154:	df 93       	push	r29
    5156:	cf 93       	push	r28
    5158:	00 d0       	rcall	.+0      	; 0x515a <Led_Control+0x6>
    515a:	cd b7       	in	r28, 0x3d	; 61
    515c:	de b7       	in	r29, 0x3e	; 62
    515e:	89 83       	std	Y+1, r24	; 0x01
    5160:	6a 83       	std	Y+2, r22	; 0x02
	if(LED_ON == LedState)
    5162:	8a 81       	ldd	r24, Y+2	; 0x02
    5164:	81 30       	cpi	r24, 0x01	; 1
    5166:	29 f4       	brne	.+10     	; 0x5172 <Led_Control+0x1e>
	{
		DIO_WritePin(LedNumber , HIGH);
    5168:	89 81       	ldd	r24, Y+1	; 0x01
    516a:	61 e0       	ldi	r22, 0x01	; 1
    516c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    5170:	07 c0       	rjmp	.+14     	; 0x5180 <Led_Control+0x2c>
	}
	else if(LED_OFF == LedState)
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	82 30       	cpi	r24, 0x02	; 2
    5176:	21 f4       	brne	.+8      	; 0x5180 <Led_Control+0x2c>
	{
		DIO_WritePin(LedNumber , LOW);
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	60 e0       	ldi	r22, 0x00	; 0
    517c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	}
}
    5180:	0f 90       	pop	r0
    5182:	0f 90       	pop	r0
    5184:	cf 91       	pop	r28
    5186:	df 91       	pop	r29
    5188:	08 95       	ret

0000518a <Door_Control>:

void Door_Control(Door_Status_t DoorState)
{
    518a:	df 93       	push	r29
    518c:	cf 93       	push	r28
    518e:	0f 92       	push	r0
    5190:	cd b7       	in	r28, 0x3d	; 61
    5192:	de b7       	in	r29, 0x3e	; 62
    5194:	89 83       	std	Y+1, r24	; 0x01
	if(DOOR_CLOSE == DoorState)
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	21 f4       	brne	.+8      	; 0x51a4 <Door_Control+0x1a>
	{
		SRV_Motor_Start(45);
    519c:	8d e2       	ldi	r24, 0x2D	; 45
    519e:	0e 94 37 18 	call	0x306e	; 0x306e <SRV_Motor_Start>
    51a2:	06 c0       	rjmp	.+12     	; 0x51b0 <Door_Control+0x26>
	}
	else if(DOOR_OPEN == DoorState)
    51a4:	89 81       	ldd	r24, Y+1	; 0x01
    51a6:	81 30       	cpi	r24, 0x01	; 1
    51a8:	19 f4       	brne	.+6      	; 0x51b0 <Door_Control+0x26>
	{
		SRV_Motor_Start(90);
    51aa:	8a e5       	ldi	r24, 0x5A	; 90
    51ac:	0e 94 37 18 	call	0x306e	; 0x306e <SRV_Motor_Start>
	}
}
    51b0:	0f 90       	pop	r0
    51b2:	cf 91       	pop	r28
    51b4:	df 91       	pop	r29
    51b6:	08 95       	ret

000051b8 <Fan_Control>:

u8 Fan_Control(void)
{
    51b8:	df 93       	push	r29
    51ba:	cf 93       	push	r28
    51bc:	0f 92       	push	r0
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
	u8 temp = 0 ;
    51c2:	19 82       	std	Y+1, r1	; 0x01
	temp = Temp_Read();
    51c4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Temp_Read>
    51c8:	89 83       	std	Y+1, r24	; 0x01

	if( MAX_TEMP < temp)
    51ca:	89 81       	ldd	r24, Y+1	; 0x01
    51cc:	8d 31       	cpi	r24, 0x1D	; 29
    51ce:	20 f0       	brcs	.+8      	; 0x51d8 <Fan_Control+0x20>
	{
		MOTOR_CW(M1);
    51d0:	80 e0       	ldi	r24, 0x00	; 0
    51d2:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <MOTOR_CW>
    51d6:	06 c0       	rjmp	.+12     	; 0x51e4 <Fan_Control+0x2c>
	}
	else if( MIN_TEMP > temp )
    51d8:	89 81       	ldd	r24, Y+1	; 0x01
    51da:	85 31       	cpi	r24, 0x15	; 21
    51dc:	18 f4       	brcc	.+6      	; 0x51e4 <Fan_Control+0x2c>
	{
		MOTOR_Stop(M1);
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <MOTOR_Stop>
	}
	return temp;
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    51e6:	0f 90       	pop	r0
    51e8:	cf 91       	pop	r28
    51ea:	df 91       	pop	r29
    51ec:	08 95       	ret

000051ee <Dimmer_Control>:

void Dimmer_Control(u8 duty)
{
    51ee:	df 93       	push	r29
    51f0:	cf 93       	push	r28
    51f2:	0f 92       	push	r0
    51f4:	cd b7       	in	r28, 0x3d	; 61
    51f6:	de b7       	in	r29, 0x3e	; 62
    51f8:	89 83       	std	Y+1, r24	; 0x01
	if((duty < 100)&&(duty > 0))
    51fa:	89 81       	ldd	r24, Y+1	; 0x01
    51fc:	84 36       	cpi	r24, 0x64	; 100
    51fe:	58 f4       	brcc	.+22     	; 0x5216 <Dimmer_Control+0x28>
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	88 23       	and	r24, r24
    5204:	41 f0       	breq	.+16     	; 0x5216 <Dimmer_Control+0x28>
	{
		timer2_cmp_value(timer2_set_cmp(duty));
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	0e 94 3b 08 	call	0x1076	; 0x1076 <timer2_set_cmp>
    520c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer2_cmp_value>
		timer2_start();
    5210:	0e 94 18 08 	call	0x1030	; 0x1030 <timer2_start>
    5214:	09 c0       	rjmp	.+18     	; 0x5228 <Dimmer_Control+0x3a>
	}
	else if(duty==0)
    5216:	89 81       	ldd	r24, Y+1	; 0x01
    5218:	88 23       	and	r24, r24
    521a:	31 f4       	brne	.+12     	; 0x5228 <Dimmer_Control+0x3a>
	{
		timer2_stop();
    521c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <timer2_stop>
		DIO_WritePin(PIND7,LOW);
    5220:	8f e1       	ldi	r24, 0x1F	; 31
    5222:	60 e0       	ldi	r22, 0x00	; 0
    5224:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	}
}
    5228:	0f 90       	pop	r0
    522a:	cf 91       	pop	r28
    522c:	df 91       	pop	r29
    522e:	08 95       	ret

00005230 <SH_init>:

void SH_init()
{
    5230:	df 93       	push	r29
    5232:	cf 93       	push	r28
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    5238:	0e 94 dd 12 	call	0x25ba	; 0x25ba <DIO_Init>
	LCD_init();
    523c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <LCD_init>
	GIE_Enable();
    5240:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <GIE_Enable>
	ADC_init(VREF_AVCC,ADC_SCALER_64);
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	66 e0       	ldi	r22, 0x06	; 6
    5248:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <ADC_init>
	EXTI_Enable(EXTI2,EXTI_RISING_EDGE);
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	60 e0       	ldi	r22, 0x00	; 0
    5250:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <EXTI_Enable>
	KeyPad_init();
    5254:	0e 94 3f 21 	call	0x427e	; 0x427e <KeyPad_init>
	MOTOR_Init();
    5258:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <MOTOR_Init>
	SRV_Init();
    525c:	0e 94 2e 18 	call	0x305c	; 0x305c <SRV_Init>
	SPI_init();
    5260:	0e 94 44 0c 	call	0x1888	; 0x1888 <SPI_init>
	timer2_init();
    5264:	0e 94 fc 07 	call	0xff8	; 0xff8 <timer2_init>
	EEPROM_init();
    5268:	0e 94 31 22 	call	0x4462	; 0x4462 <EEPROM_init>
	EEPROM_WriteByte(0,123);
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	6b e7       	ldi	r22, 0x7B	; 123
    5272:	0e 94 3b 22 	call	0x4476	; 0x4476 <EEPROM_WriteByte>

	mode_flag=init_mode;
    5276:	83 e0       	ldi	r24, 0x03	; 3
    5278:	80 93 4b 03 	sts	0x034B, r24
	start_screen();
    527c:	0e 94 32 26 	call	0x4c64	; 0x4c64 <start_screen>
}
    5280:	cf 91       	pop	r28
    5282:	df 91       	pop	r29
    5284:	08 95       	ret

00005286 <SH_Runnable>:

void SH_Runnable()
{
    5286:	0f 93       	push	r16
    5288:	1f 93       	push	r17
    528a:	df 93       	push	r29
    528c:	cf 93       	push	r28
    528e:	cd b7       	in	r28, 0x3d	; 61
    5290:	de b7       	in	r29, 0x3e	; 62
    5292:	cf 57       	subi	r28, 0x7F	; 127
    5294:	d0 40       	sbci	r29, 0x00	; 0
    5296:	0f b6       	in	r0, 0x3f	; 63
    5298:	f8 94       	cli
    529a:	de bf       	out	0x3e, r29	; 62
    529c:	0f be       	out	0x3f, r0	; 63
    529e:	cd bf       	out	0x3d, r28	; 61
	if(mode_flag==init_mode)
    52a0:	80 91 4b 03 	lds	r24, 0x034B
    52a4:	83 30       	cpi	r24, 0x03	; 3
    52a6:	09 f0       	breq	.+2      	; 0x52aa <SH_Runnable+0x24>
    52a8:	05 c4       	rjmp	.+2058   	; 0x5ab4 <SH_Runnable+0x82e>
	{
		static u8 pass_trails = 0;
		u8 num = 0;
    52aa:	fe 01       	movw	r30, r28
    52ac:	e7 58       	subi	r30, 0x87	; 135
    52ae:	ff 4f       	sbci	r31, 0xFF	; 255
    52b0:	10 82       	st	Z, r1
		u8 i=0;
    52b2:	fe 01       	movw	r30, r28
    52b4:	e8 58       	subi	r30, 0x88	; 136
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	10 82       	st	Z, r1
		LCD_SETCURSOR(LINE1,8);
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	68 e0       	ldi	r22, 0x08	; 8
    52be:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    52c2:	3b c0       	rjmp	.+118    	; 0x533a <SH_Runnable+0xb4>
		while(i<3)
		{

			if(mode_flag==admin_mode)
    52c4:	80 91 4b 03 	lds	r24, 0x034B
    52c8:	81 30       	cpi	r24, 0x01	; 1
    52ca:	09 f4       	brne	.+2      	; 0x52ce <SH_Runnable+0x48>
    52cc:	44 c6       	rjmp	.+3208   	; 0x5f56 <SH_Runnable+0xcd0>
			{
				return ;
			}
			u8 id=KeyPad_get();
    52ce:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    52d2:	fe 01       	movw	r30, r28
    52d4:	e9 58       	subi	r30, 0x89	; 137
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	80 83       	st	Z, r24
			if(id!=NO_KEY)
    52da:	fe 01       	movw	r30, r28
    52dc:	e9 58       	subi	r30, 0x89	; 137
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	80 81       	ld	r24, Z
    52e2:	84 35       	cpi	r24, 0x54	; 84
    52e4:	51 f1       	breq	.+84     	; 0x533a <SH_Runnable+0xb4>
				{
					LCD_WriteChar(id);
    52e6:	fe 01       	movw	r30, r28
    52e8:	e9 58       	subi	r30, 0x89	; 137
    52ea:	ff 4f       	sbci	r31, 0xFF	; 255
    52ec:	80 81       	ld	r24, Z
    52ee:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
					num=num*10+(id-'0');
    52f2:	fe 01       	movw	r30, r28
    52f4:	e7 58       	subi	r30, 0x87	; 135
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	80 81       	ld	r24, Z
    52fa:	88 2f       	mov	r24, r24
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	9c 01       	movw	r18, r24
    5300:	22 0f       	add	r18, r18
    5302:	33 1f       	adc	r19, r19
    5304:	c9 01       	movw	r24, r18
    5306:	88 0f       	add	r24, r24
    5308:	99 1f       	adc	r25, r25
    530a:	88 0f       	add	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	82 0f       	add	r24, r18
    5310:	93 1f       	adc	r25, r19
    5312:	98 2f       	mov	r25, r24
    5314:	fe 01       	movw	r30, r28
    5316:	e9 58       	subi	r30, 0x89	; 137
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	89 0f       	add	r24, r25
    531e:	fe 01       	movw	r30, r28
    5320:	e7 58       	subi	r30, 0x87	; 135
    5322:	ff 4f       	sbci	r31, 0xFF	; 255
    5324:	80 53       	subi	r24, 0x30	; 48
    5326:	80 83       	st	Z, r24
					i++;
    5328:	de 01       	movw	r26, r28
    532a:	a8 58       	subi	r26, 0x88	; 136
    532c:	bf 4f       	sbci	r27, 0xFF	; 255
    532e:	fe 01       	movw	r30, r28
    5330:	e8 58       	subi	r30, 0x88	; 136
    5332:	ff 4f       	sbci	r31, 0xFF	; 255
    5334:	80 81       	ld	r24, Z
    5336:	8f 5f       	subi	r24, 0xFF	; 255
    5338:	8c 93       	st	X, r24
	{
		static u8 pass_trails = 0;
		u8 num = 0;
		u8 i=0;
		LCD_SETCURSOR(LINE1,8);
		while(i<3)
    533a:	fe 01       	movw	r30, r28
    533c:	e8 58       	subi	r30, 0x88	; 136
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	80 81       	ld	r24, Z
    5342:	83 30       	cpi	r24, 0x03	; 3
    5344:	08 f4       	brcc	.+2      	; 0x5348 <SH_Runnable+0xc2>
    5346:	be cf       	rjmp	.-132    	; 0x52c4 <SH_Runnable+0x3e>
					num=num*10+(id-'0');
					i++;
				}
		}
		u8 x;
		EEPROM_ReadByte(num*2,&x);
    5348:	fe 01       	movw	r30, r28
    534a:	e7 58       	subi	r30, 0x87	; 135
    534c:	ff 4f       	sbci	r31, 0xFF	; 255
    534e:	80 81       	ld	r24, Z
    5350:	88 2f       	mov	r24, r24
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	88 0f       	add	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	9e 01       	movw	r18, r28
    535a:	26 58       	subi	r18, 0x86	; 134
    535c:	3f 4f       	sbci	r19, 0xFF	; 255
    535e:	b9 01       	movw	r22, r18
    5360:	0e 94 d6 22 	call	0x45ac	; 0x45ac <EEPROM_ReadByte>
		if(x==255)
    5364:	fe 01       	movw	r30, r28
    5366:	e6 58       	subi	r30, 0x86	; 134
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	80 81       	ld	r24, Z
    536c:	8f 3f       	cpi	r24, 0xFF	; 255
    536e:	09 f0       	breq	.+2      	; 0x5372 <SH_Runnable+0xec>
    5370:	be c0       	rjmp	.+380    	; 0x54ee <SH_Runnable+0x268>
		{
			LCD_Clear();
    5372:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
			LCD_WriteString("Wrong ID !");
    5376:	8f e3       	ldi	r24, 0x3F	; 63
    5378:	91 e0       	ldi	r25, 0x01	; 1
    537a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    537e:	fe 01       	movw	r30, r28
    5380:	e3 59       	subi	r30, 0x93	; 147
    5382:	ff 4f       	sbci	r31, 0xFF	; 255
    5384:	80 e0       	ldi	r24, 0x00	; 0
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	aa ef       	ldi	r26, 0xFA	; 250
    538a:	b3 e4       	ldi	r27, 0x43	; 67
    538c:	80 83       	st	Z, r24
    538e:	91 83       	std	Z+1, r25	; 0x01
    5390:	a2 83       	std	Z+2, r26	; 0x02
    5392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5394:	8e 01       	movw	r16, r28
    5396:	07 59       	subi	r16, 0x97	; 151
    5398:	1f 4f       	sbci	r17, 0xFF	; 255
    539a:	fe 01       	movw	r30, r28
    539c:	e3 59       	subi	r30, 0x93	; 147
    539e:	ff 4f       	sbci	r31, 0xFF	; 255
    53a0:	60 81       	ld	r22, Z
    53a2:	71 81       	ldd	r23, Z+1	; 0x01
    53a4:	82 81       	ldd	r24, Z+2	; 0x02
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	4a ef       	ldi	r20, 0xFA	; 250
    53ae:	54 e4       	ldi	r21, 0x44	; 68
    53b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	f8 01       	movw	r30, r16
    53ba:	80 83       	st	Z, r24
    53bc:	91 83       	std	Z+1, r25	; 0x01
    53be:	a2 83       	std	Z+2, r26	; 0x02
    53c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53c2:	fe 01       	movw	r30, r28
    53c4:	e7 59       	subi	r30, 0x97	; 151
    53c6:	ff 4f       	sbci	r31, 0xFF	; 255
    53c8:	60 81       	ld	r22, Z
    53ca:	71 81       	ldd	r23, Z+1	; 0x01
    53cc:	82 81       	ldd	r24, Z+2	; 0x02
    53ce:	93 81       	ldd	r25, Z+3	; 0x03
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	40 e8       	ldi	r20, 0x80	; 128
    53d6:	5f e3       	ldi	r21, 0x3F	; 63
    53d8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    53dc:	88 23       	and	r24, r24
    53de:	44 f4       	brge	.+16     	; 0x53f0 <SH_Runnable+0x16a>
		__ticks = 1;
    53e0:	fe 01       	movw	r30, r28
    53e2:	e9 59       	subi	r30, 0x99	; 153
    53e4:	ff 4f       	sbci	r31, 0xFF	; 255
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	91 83       	std	Z+1, r25	; 0x01
    53ec:	80 83       	st	Z, r24
    53ee:	64 c0       	rjmp	.+200    	; 0x54b8 <SH_Runnable+0x232>
	else if (__tmp > 65535)
    53f0:	fe 01       	movw	r30, r28
    53f2:	e7 59       	subi	r30, 0x97	; 151
    53f4:	ff 4f       	sbci	r31, 0xFF	; 255
    53f6:	60 81       	ld	r22, Z
    53f8:	71 81       	ldd	r23, Z+1	; 0x01
    53fa:	82 81       	ldd	r24, Z+2	; 0x02
    53fc:	93 81       	ldd	r25, Z+3	; 0x03
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	3f ef       	ldi	r19, 0xFF	; 255
    5402:	4f e7       	ldi	r20, 0x7F	; 127
    5404:	57 e4       	ldi	r21, 0x47	; 71
    5406:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    540a:	18 16       	cp	r1, r24
    540c:	0c f0       	brlt	.+2      	; 0x5410 <SH_Runnable+0x18a>
    540e:	43 c0       	rjmp	.+134    	; 0x5496 <SH_Runnable+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5410:	fe 01       	movw	r30, r28
    5412:	e3 59       	subi	r30, 0x93	; 147
    5414:	ff 4f       	sbci	r31, 0xFF	; 255
    5416:	60 81       	ld	r22, Z
    5418:	71 81       	ldd	r23, Z+1	; 0x01
    541a:	82 81       	ldd	r24, Z+2	; 0x02
    541c:	93 81       	ldd	r25, Z+3	; 0x03
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	40 e2       	ldi	r20, 0x20	; 32
    5424:	51 e4       	ldi	r21, 0x41	; 65
    5426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	8e 01       	movw	r16, r28
    5430:	09 59       	subi	r16, 0x99	; 153
    5432:	1f 4f       	sbci	r17, 0xFF	; 255
    5434:	bc 01       	movw	r22, r24
    5436:	cd 01       	movw	r24, r26
    5438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	f8 01       	movw	r30, r16
    5442:	91 83       	std	Z+1, r25	; 0x01
    5444:	80 83       	st	Z, r24
    5446:	1f c0       	rjmp	.+62     	; 0x5486 <SH_Runnable+0x200>
    5448:	fe 01       	movw	r30, r28
    544a:	eb 59       	subi	r30, 0x9B	; 155
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	88 ec       	ldi	r24, 0xC8	; 200
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	91 83       	std	Z+1, r25	; 0x01
    5454:	80 83       	st	Z, r24
    5456:	fe 01       	movw	r30, r28
    5458:	eb 59       	subi	r30, 0x9B	; 155
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	80 81       	ld	r24, Z
    545e:	91 81       	ldd	r25, Z+1	; 0x01
    5460:	01 97       	sbiw	r24, 0x01	; 1
    5462:	f1 f7       	brne	.-4      	; 0x5460 <SH_Runnable+0x1da>
    5464:	fe 01       	movw	r30, r28
    5466:	eb 59       	subi	r30, 0x9B	; 155
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	91 83       	std	Z+1, r25	; 0x01
    546c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    546e:	de 01       	movw	r26, r28
    5470:	a9 59       	subi	r26, 0x99	; 153
    5472:	bf 4f       	sbci	r27, 0xFF	; 255
    5474:	fe 01       	movw	r30, r28
    5476:	e9 59       	subi	r30, 0x99	; 153
    5478:	ff 4f       	sbci	r31, 0xFF	; 255
    547a:	80 81       	ld	r24, Z
    547c:	91 81       	ldd	r25, Z+1	; 0x01
    547e:	01 97       	sbiw	r24, 0x01	; 1
    5480:	11 96       	adiw	r26, 0x01	; 1
    5482:	9c 93       	st	X, r25
    5484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5486:	fe 01       	movw	r30, r28
    5488:	e9 59       	subi	r30, 0x99	; 153
    548a:	ff 4f       	sbci	r31, 0xFF	; 255
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	00 97       	sbiw	r24, 0x00	; 0
    5492:	d1 f6       	brne	.-76     	; 0x5448 <SH_Runnable+0x1c2>
    5494:	27 c0       	rjmp	.+78     	; 0x54e4 <SH_Runnable+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5496:	8e 01       	movw	r16, r28
    5498:	09 59       	subi	r16, 0x99	; 153
    549a:	1f 4f       	sbci	r17, 0xFF	; 255
    549c:	fe 01       	movw	r30, r28
    549e:	e7 59       	subi	r30, 0x97	; 151
    54a0:	ff 4f       	sbci	r31, 0xFF	; 255
    54a2:	60 81       	ld	r22, Z
    54a4:	71 81       	ldd	r23, Z+1	; 0x01
    54a6:	82 81       	ldd	r24, Z+2	; 0x02
    54a8:	93 81       	ldd	r25, Z+3	; 0x03
    54aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	f8 01       	movw	r30, r16
    54b4:	91 83       	std	Z+1, r25	; 0x01
    54b6:	80 83       	st	Z, r24
    54b8:	de 01       	movw	r26, r28
    54ba:	ad 59       	subi	r26, 0x9D	; 157
    54bc:	bf 4f       	sbci	r27, 0xFF	; 255
    54be:	fe 01       	movw	r30, r28
    54c0:	e9 59       	subi	r30, 0x99	; 153
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	80 81       	ld	r24, Z
    54c6:	91 81       	ldd	r25, Z+1	; 0x01
    54c8:	8d 93       	st	X+, r24
    54ca:	9c 93       	st	X, r25
    54cc:	fe 01       	movw	r30, r28
    54ce:	ed 59       	subi	r30, 0x9D	; 157
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	f1 f7       	brne	.-4      	; 0x54d6 <SH_Runnable+0x250>
    54da:	fe 01       	movw	r30, r28
    54dc:	ed 59       	subi	r30, 0x9D	; 157
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	91 83       	std	Z+1, r25	; 0x01
    54e2:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_Clear();
    54e4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
			start_screen();
    54e8:	0e 94 32 26 	call	0x4c64	; 0x4c64 <start_screen>
    54ec:	34 c5       	rjmp	.+2664   	; 0x5f56 <SH_Runnable+0xcd0>
		}
		else
		{
			u16 num2 = 0;
    54ee:	fe 01       	movw	r30, r28
    54f0:	eb 58       	subi	r30, 0x8B	; 139
    54f2:	ff 4f       	sbci	r31, 0xFF	; 255
    54f4:	11 82       	std	Z+1, r1	; 0x01
    54f6:	10 82       	st	Z, r1
			u8 i2=0;
    54f8:	fe 01       	movw	r30, r28
    54fa:	ec 58       	subi	r30, 0x8C	; 140
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	10 82       	st	Z, r1
			LCD_SETCURSOR(LINE2,9);
    5500:	80 e4       	ldi	r24, 0x40	; 64
    5502:	69 e0       	ldi	r22, 0x09	; 9
    5504:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    5508:	3a c0       	rjmp	.+116    	; 0x557e <SH_Runnable+0x2f8>
			while(i2<3)
			{
				if(mode_flag==admin_mode)
    550a:	80 91 4b 03 	lds	r24, 0x034B
    550e:	81 30       	cpi	r24, 0x01	; 1
    5510:	09 f4       	brne	.+2      	; 0x5514 <SH_Runnable+0x28e>
    5512:	21 c5       	rjmp	.+2626   	; 0x5f56 <SH_Runnable+0xcd0>
				{
					return ;
				}
				u8 pass=KeyPad_get();
    5514:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    5518:	fe 01       	movw	r30, r28
    551a:	ed 58       	subi	r30, 0x8D	; 141
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	80 83       	st	Z, r24
				if(pass!=NO_KEY)
    5520:	fe 01       	movw	r30, r28
    5522:	ed 58       	subi	r30, 0x8D	; 141
    5524:	ff 4f       	sbci	r31, 0xFF	; 255
    5526:	80 81       	ld	r24, Z
    5528:	84 35       	cpi	r24, 0x54	; 84
    552a:	49 f1       	breq	.+82     	; 0x557e <SH_Runnable+0x2f8>
					{
						LCD_WriteChar('*');
    552c:	8a e2       	ldi	r24, 0x2A	; 42
    552e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
						num2=num2*10+(pass-'0');
    5532:	fe 01       	movw	r30, r28
    5534:	eb 58       	subi	r30, 0x8B	; 139
    5536:	ff 4f       	sbci	r31, 0xFF	; 255
    5538:	80 81       	ld	r24, Z
    553a:	91 81       	ldd	r25, Z+1	; 0x01
    553c:	9c 01       	movw	r18, r24
    553e:	22 0f       	add	r18, r18
    5540:	33 1f       	adc	r19, r19
    5542:	c9 01       	movw	r24, r18
    5544:	88 0f       	add	r24, r24
    5546:	99 1f       	adc	r25, r25
    5548:	88 0f       	add	r24, r24
    554a:	99 1f       	adc	r25, r25
    554c:	28 0f       	add	r18, r24
    554e:	39 1f       	adc	r19, r25
    5550:	fe 01       	movw	r30, r28
    5552:	ed 58       	subi	r30, 0x8D	; 141
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 81       	ld	r24, Z
    5558:	88 2f       	mov	r24, r24
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	82 0f       	add	r24, r18
    555e:	93 1f       	adc	r25, r19
    5560:	fe 01       	movw	r30, r28
    5562:	eb 58       	subi	r30, 0x8B	; 139
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	c0 97       	sbiw	r24, 0x30	; 48
    5568:	91 83       	std	Z+1, r25	; 0x01
    556a:	80 83       	st	Z, r24
						i2++;
    556c:	de 01       	movw	r26, r28
    556e:	ac 58       	subi	r26, 0x8C	; 140
    5570:	bf 4f       	sbci	r27, 0xFF	; 255
    5572:	fe 01       	movw	r30, r28
    5574:	ec 58       	subi	r30, 0x8C	; 140
    5576:	ff 4f       	sbci	r31, 0xFF	; 255
    5578:	80 81       	ld	r24, Z
    557a:	8f 5f       	subi	r24, 0xFF	; 255
    557c:	8c 93       	st	X, r24
		else
		{
			u16 num2 = 0;
			u8 i2=0;
			LCD_SETCURSOR(LINE2,9);
			while(i2<3)
    557e:	fe 01       	movw	r30, r28
    5580:	ec 58       	subi	r30, 0x8C	; 140
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	80 81       	ld	r24, Z
    5586:	83 30       	cpi	r24, 0x03	; 3
    5588:	08 f4       	brcc	.+2      	; 0x558c <SH_Runnable+0x306>
    558a:	bf cf       	rjmp	.-130    	; 0x550a <SH_Runnable+0x284>
    558c:	fe 01       	movw	r30, r28
    558e:	e1 5a       	subi	r30, 0xA1	; 161
    5590:	ff 4f       	sbci	r31, 0xFF	; 255
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	a8 e4       	ldi	r26, 0x48	; 72
    5598:	b2 e4       	ldi	r27, 0x42	; 66
    559a:	80 83       	st	Z, r24
    559c:	91 83       	std	Z+1, r25	; 0x01
    559e:	a2 83       	std	Z+2, r26	; 0x02
    55a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55a2:	8e 01       	movw	r16, r28
    55a4:	05 5a       	subi	r16, 0xA5	; 165
    55a6:	1f 4f       	sbci	r17, 0xFF	; 255
    55a8:	fe 01       	movw	r30, r28
    55aa:	e1 5a       	subi	r30, 0xA1	; 161
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	60 81       	ld	r22, Z
    55b0:	71 81       	ldd	r23, Z+1	; 0x01
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	4a ef       	ldi	r20, 0xFA	; 250
    55bc:	54 e4       	ldi	r21, 0x44	; 68
    55be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c2:	dc 01       	movw	r26, r24
    55c4:	cb 01       	movw	r24, r22
    55c6:	f8 01       	movw	r30, r16
    55c8:	80 83       	st	Z, r24
    55ca:	91 83       	std	Z+1, r25	; 0x01
    55cc:	a2 83       	std	Z+2, r26	; 0x02
    55ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55d0:	fe 01       	movw	r30, r28
    55d2:	e5 5a       	subi	r30, 0xA5	; 165
    55d4:	ff 4f       	sbci	r31, 0xFF	; 255
    55d6:	60 81       	ld	r22, Z
    55d8:	71 81       	ldd	r23, Z+1	; 0x01
    55da:	82 81       	ldd	r24, Z+2	; 0x02
    55dc:	93 81       	ldd	r25, Z+3	; 0x03
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	40 e8       	ldi	r20, 0x80	; 128
    55e4:	5f e3       	ldi	r21, 0x3F	; 63
    55e6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    55ea:	88 23       	and	r24, r24
    55ec:	44 f4       	brge	.+16     	; 0x55fe <SH_Runnable+0x378>
		__ticks = 1;
    55ee:	fe 01       	movw	r30, r28
    55f0:	e7 5a       	subi	r30, 0xA7	; 167
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	91 83       	std	Z+1, r25	; 0x01
    55fa:	80 83       	st	Z, r24
    55fc:	64 c0       	rjmp	.+200    	; 0x56c6 <SH_Runnable+0x440>
	else if (__tmp > 65535)
    55fe:	fe 01       	movw	r30, r28
    5600:	e5 5a       	subi	r30, 0xA5	; 165
    5602:	ff 4f       	sbci	r31, 0xFF	; 255
    5604:	60 81       	ld	r22, Z
    5606:	71 81       	ldd	r23, Z+1	; 0x01
    5608:	82 81       	ldd	r24, Z+2	; 0x02
    560a:	93 81       	ldd	r25, Z+3	; 0x03
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	3f ef       	ldi	r19, 0xFF	; 255
    5610:	4f e7       	ldi	r20, 0x7F	; 127
    5612:	57 e4       	ldi	r21, 0x47	; 71
    5614:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5618:	18 16       	cp	r1, r24
    561a:	0c f0       	brlt	.+2      	; 0x561e <SH_Runnable+0x398>
    561c:	43 c0       	rjmp	.+134    	; 0x56a4 <SH_Runnable+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    561e:	fe 01       	movw	r30, r28
    5620:	e1 5a       	subi	r30, 0xA1	; 161
    5622:	ff 4f       	sbci	r31, 0xFF	; 255
    5624:	60 81       	ld	r22, Z
    5626:	71 81       	ldd	r23, Z+1	; 0x01
    5628:	82 81       	ldd	r24, Z+2	; 0x02
    562a:	93 81       	ldd	r25, Z+3	; 0x03
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	40 e2       	ldi	r20, 0x20	; 32
    5632:	51 e4       	ldi	r21, 0x41	; 65
    5634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5638:	dc 01       	movw	r26, r24
    563a:	cb 01       	movw	r24, r22
    563c:	8e 01       	movw	r16, r28
    563e:	07 5a       	subi	r16, 0xA7	; 167
    5640:	1f 4f       	sbci	r17, 0xFF	; 255
    5642:	bc 01       	movw	r22, r24
    5644:	cd 01       	movw	r24, r26
    5646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	f8 01       	movw	r30, r16
    5650:	91 83       	std	Z+1, r25	; 0x01
    5652:	80 83       	st	Z, r24
    5654:	1f c0       	rjmp	.+62     	; 0x5694 <SH_Runnable+0x40e>
    5656:	fe 01       	movw	r30, r28
    5658:	e9 5a       	subi	r30, 0xA9	; 169
    565a:	ff 4f       	sbci	r31, 0xFF	; 255
    565c:	88 ec       	ldi	r24, 0xC8	; 200
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	91 83       	std	Z+1, r25	; 0x01
    5662:	80 83       	st	Z, r24
    5664:	fe 01       	movw	r30, r28
    5666:	e9 5a       	subi	r30, 0xA9	; 169
    5668:	ff 4f       	sbci	r31, 0xFF	; 255
    566a:	80 81       	ld	r24, Z
    566c:	91 81       	ldd	r25, Z+1	; 0x01
    566e:	01 97       	sbiw	r24, 0x01	; 1
    5670:	f1 f7       	brne	.-4      	; 0x566e <SH_Runnable+0x3e8>
    5672:	fe 01       	movw	r30, r28
    5674:	e9 5a       	subi	r30, 0xA9	; 169
    5676:	ff 4f       	sbci	r31, 0xFF	; 255
    5678:	91 83       	std	Z+1, r25	; 0x01
    567a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    567c:	de 01       	movw	r26, r28
    567e:	a7 5a       	subi	r26, 0xA7	; 167
    5680:	bf 4f       	sbci	r27, 0xFF	; 255
    5682:	fe 01       	movw	r30, r28
    5684:	e7 5a       	subi	r30, 0xA7	; 167
    5686:	ff 4f       	sbci	r31, 0xFF	; 255
    5688:	80 81       	ld	r24, Z
    568a:	91 81       	ldd	r25, Z+1	; 0x01
    568c:	01 97       	sbiw	r24, 0x01	; 1
    568e:	11 96       	adiw	r26, 0x01	; 1
    5690:	9c 93       	st	X, r25
    5692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5694:	fe 01       	movw	r30, r28
    5696:	e7 5a       	subi	r30, 0xA7	; 167
    5698:	ff 4f       	sbci	r31, 0xFF	; 255
    569a:	80 81       	ld	r24, Z
    569c:	91 81       	ldd	r25, Z+1	; 0x01
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	d1 f6       	brne	.-76     	; 0x5656 <SH_Runnable+0x3d0>
    56a2:	28 c0       	rjmp	.+80     	; 0x56f4 <SH_Runnable+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56a4:	8e 01       	movw	r16, r28
    56a6:	07 5a       	subi	r16, 0xA7	; 167
    56a8:	1f 4f       	sbci	r17, 0xFF	; 255
    56aa:	fe 01       	movw	r30, r28
    56ac:	e5 5a       	subi	r30, 0xA5	; 165
    56ae:	ff 4f       	sbci	r31, 0xFF	; 255
    56b0:	60 81       	ld	r22, Z
    56b2:	71 81       	ldd	r23, Z+1	; 0x01
    56b4:	82 81       	ldd	r24, Z+2	; 0x02
    56b6:	93 81       	ldd	r25, Z+3	; 0x03
    56b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	f8 01       	movw	r30, r16
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24
    56c6:	de 01       	movw	r26, r28
    56c8:	ab 5a       	subi	r26, 0xAB	; 171
    56ca:	bf 4f       	sbci	r27, 0xFF	; 255
    56cc:	fe 01       	movw	r30, r28
    56ce:	e7 5a       	subi	r30, 0xA7	; 167
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	80 81       	ld	r24, Z
    56d4:	91 81       	ldd	r25, Z+1	; 0x01
    56d6:	11 96       	adiw	r26, 0x01	; 1
    56d8:	9c 93       	st	X, r25
    56da:	8e 93       	st	-X, r24
    56dc:	fe 01       	movw	r30, r28
    56de:	eb 5a       	subi	r30, 0xAB	; 171
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	80 81       	ld	r24, Z
    56e4:	91 81       	ldd	r25, Z+1	; 0x01
    56e6:	01 97       	sbiw	r24, 0x01	; 1
    56e8:	f1 f7       	brne	.-4      	; 0x56e6 <SH_Runnable+0x460>
    56ea:	fe 01       	movw	r30, r28
    56ec:	eb 5a       	subi	r30, 0xAB	; 171
    56ee:	ff 4f       	sbci	r31, 0xFF	; 255
    56f0:	91 83       	std	Z+1, r25	; 0x01
    56f2:	80 83       	st	Z, r24
						num2=num2*10+(pass-'0');
						i2++;
					}
			}
			_delay_ms(50);
			if(x!=num2)
    56f4:	fe 01       	movw	r30, r28
    56f6:	e6 58       	subi	r30, 0x86	; 134
    56f8:	ff 4f       	sbci	r31, 0xFF	; 255
    56fa:	80 81       	ld	r24, Z
    56fc:	28 2f       	mov	r18, r24
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	fe 01       	movw	r30, r28
    5702:	eb 58       	subi	r30, 0x8B	; 139
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	80 81       	ld	r24, Z
    5708:	91 81       	ldd	r25, Z+1	; 0x01
    570a:	28 17       	cp	r18, r24
    570c:	39 07       	cpc	r19, r25
    570e:	09 f4       	brne	.+2      	; 0x5712 <SH_Runnable+0x48c>
    5710:	c9 c1       	rjmp	.+914    	; 0x5aa4 <SH_Runnable+0x81e>
			{
				pass_trails++;
    5712:	80 91 37 03 	lds	r24, 0x0337
    5716:	8f 5f       	subi	r24, 0xFF	; 255
    5718:	80 93 37 03 	sts	0x0337, r24
				LCD_Clear();
    571c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
				LCD_WriteString("Wrong Password !");
    5720:	8a e4       	ldi	r24, 0x4A	; 74
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    5728:	fe 01       	movw	r30, r28
    572a:	ef 5a       	subi	r30, 0xAF	; 175
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	80 e0       	ldi	r24, 0x00	; 0
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	aa ef       	ldi	r26, 0xFA	; 250
    5734:	b3 e4       	ldi	r27, 0x43	; 67
    5736:	80 83       	st	Z, r24
    5738:	91 83       	std	Z+1, r25	; 0x01
    573a:	a2 83       	std	Z+2, r26	; 0x02
    573c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    573e:	8e 01       	movw	r16, r28
    5740:	03 5b       	subi	r16, 0xB3	; 179
    5742:	1f 4f       	sbci	r17, 0xFF	; 255
    5744:	fe 01       	movw	r30, r28
    5746:	ef 5a       	subi	r30, 0xAF	; 175
    5748:	ff 4f       	sbci	r31, 0xFF	; 255
    574a:	60 81       	ld	r22, Z
    574c:	71 81       	ldd	r23, Z+1	; 0x01
    574e:	82 81       	ldd	r24, Z+2	; 0x02
    5750:	93 81       	ldd	r25, Z+3	; 0x03
    5752:	20 e0       	ldi	r18, 0x00	; 0
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	4a ef       	ldi	r20, 0xFA	; 250
    5758:	54 e4       	ldi	r21, 0x44	; 68
    575a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    575e:	dc 01       	movw	r26, r24
    5760:	cb 01       	movw	r24, r22
    5762:	f8 01       	movw	r30, r16
    5764:	80 83       	st	Z, r24
    5766:	91 83       	std	Z+1, r25	; 0x01
    5768:	a2 83       	std	Z+2, r26	; 0x02
    576a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    576c:	fe 01       	movw	r30, r28
    576e:	e3 5b       	subi	r30, 0xB3	; 179
    5770:	ff 4f       	sbci	r31, 0xFF	; 255
    5772:	60 81       	ld	r22, Z
    5774:	71 81       	ldd	r23, Z+1	; 0x01
    5776:	82 81       	ldd	r24, Z+2	; 0x02
    5778:	93 81       	ldd	r25, Z+3	; 0x03
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	40 e8       	ldi	r20, 0x80	; 128
    5780:	5f e3       	ldi	r21, 0x3F	; 63
    5782:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    5786:	88 23       	and	r24, r24
    5788:	44 f4       	brge	.+16     	; 0x579a <SH_Runnable+0x514>
		__ticks = 1;
    578a:	fe 01       	movw	r30, r28
    578c:	e5 5b       	subi	r30, 0xB5	; 181
    578e:	ff 4f       	sbci	r31, 0xFF	; 255
    5790:	81 e0       	ldi	r24, 0x01	; 1
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	91 83       	std	Z+1, r25	; 0x01
    5796:	80 83       	st	Z, r24
    5798:	64 c0       	rjmp	.+200    	; 0x5862 <SH_Runnable+0x5dc>
	else if (__tmp > 65535)
    579a:	fe 01       	movw	r30, r28
    579c:	e3 5b       	subi	r30, 0xB3	; 179
    579e:	ff 4f       	sbci	r31, 0xFF	; 255
    57a0:	60 81       	ld	r22, Z
    57a2:	71 81       	ldd	r23, Z+1	; 0x01
    57a4:	82 81       	ldd	r24, Z+2	; 0x02
    57a6:	93 81       	ldd	r25, Z+3	; 0x03
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	3f ef       	ldi	r19, 0xFF	; 255
    57ac:	4f e7       	ldi	r20, 0x7F	; 127
    57ae:	57 e4       	ldi	r21, 0x47	; 71
    57b0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    57b4:	18 16       	cp	r1, r24
    57b6:	0c f0       	brlt	.+2      	; 0x57ba <SH_Runnable+0x534>
    57b8:	43 c0       	rjmp	.+134    	; 0x5840 <SH_Runnable+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ba:	fe 01       	movw	r30, r28
    57bc:	ef 5a       	subi	r30, 0xAF	; 175
    57be:	ff 4f       	sbci	r31, 0xFF	; 255
    57c0:	60 81       	ld	r22, Z
    57c2:	71 81       	ldd	r23, Z+1	; 0x01
    57c4:	82 81       	ldd	r24, Z+2	; 0x02
    57c6:	93 81       	ldd	r25, Z+3	; 0x03
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	40 e2       	ldi	r20, 0x20	; 32
    57ce:	51 e4       	ldi	r21, 0x41	; 65
    57d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d4:	dc 01       	movw	r26, r24
    57d6:	cb 01       	movw	r24, r22
    57d8:	8e 01       	movw	r16, r28
    57da:	05 5b       	subi	r16, 0xB5	; 181
    57dc:	1f 4f       	sbci	r17, 0xFF	; 255
    57de:	bc 01       	movw	r22, r24
    57e0:	cd 01       	movw	r24, r26
    57e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	f8 01       	movw	r30, r16
    57ec:	91 83       	std	Z+1, r25	; 0x01
    57ee:	80 83       	st	Z, r24
    57f0:	1f c0       	rjmp	.+62     	; 0x5830 <SH_Runnable+0x5aa>
    57f2:	fe 01       	movw	r30, r28
    57f4:	e7 5b       	subi	r30, 0xB7	; 183
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	88 ec       	ldi	r24, 0xC8	; 200
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	80 83       	st	Z, r24
    5800:	fe 01       	movw	r30, r28
    5802:	e7 5b       	subi	r30, 0xB7	; 183
    5804:	ff 4f       	sbci	r31, 0xFF	; 255
    5806:	80 81       	ld	r24, Z
    5808:	91 81       	ldd	r25, Z+1	; 0x01
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <SH_Runnable+0x584>
    580e:	fe 01       	movw	r30, r28
    5810:	e7 5b       	subi	r30, 0xB7	; 183
    5812:	ff 4f       	sbci	r31, 0xFF	; 255
    5814:	91 83       	std	Z+1, r25	; 0x01
    5816:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5818:	de 01       	movw	r26, r28
    581a:	a5 5b       	subi	r26, 0xB5	; 181
    581c:	bf 4f       	sbci	r27, 0xFF	; 255
    581e:	fe 01       	movw	r30, r28
    5820:	e5 5b       	subi	r30, 0xB5	; 181
    5822:	ff 4f       	sbci	r31, 0xFF	; 255
    5824:	80 81       	ld	r24, Z
    5826:	91 81       	ldd	r25, Z+1	; 0x01
    5828:	01 97       	sbiw	r24, 0x01	; 1
    582a:	11 96       	adiw	r26, 0x01	; 1
    582c:	9c 93       	st	X, r25
    582e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5830:	fe 01       	movw	r30, r28
    5832:	e5 5b       	subi	r30, 0xB5	; 181
    5834:	ff 4f       	sbci	r31, 0xFF	; 255
    5836:	80 81       	ld	r24, Z
    5838:	91 81       	ldd	r25, Z+1	; 0x01
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	d1 f6       	brne	.-76     	; 0x57f2 <SH_Runnable+0x56c>
    583e:	28 c0       	rjmp	.+80     	; 0x5890 <SH_Runnable+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5840:	8e 01       	movw	r16, r28
    5842:	05 5b       	subi	r16, 0xB5	; 181
    5844:	1f 4f       	sbci	r17, 0xFF	; 255
    5846:	fe 01       	movw	r30, r28
    5848:	e3 5b       	subi	r30, 0xB3	; 179
    584a:	ff 4f       	sbci	r31, 0xFF	; 255
    584c:	60 81       	ld	r22, Z
    584e:	71 81       	ldd	r23, Z+1	; 0x01
    5850:	82 81       	ldd	r24, Z+2	; 0x02
    5852:	93 81       	ldd	r25, Z+3	; 0x03
    5854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5858:	dc 01       	movw	r26, r24
    585a:	cb 01       	movw	r24, r22
    585c:	f8 01       	movw	r30, r16
    585e:	91 83       	std	Z+1, r25	; 0x01
    5860:	80 83       	st	Z, r24
    5862:	de 01       	movw	r26, r28
    5864:	a9 5b       	subi	r26, 0xB9	; 185
    5866:	bf 4f       	sbci	r27, 0xFF	; 255
    5868:	fe 01       	movw	r30, r28
    586a:	e5 5b       	subi	r30, 0xB5	; 181
    586c:	ff 4f       	sbci	r31, 0xFF	; 255
    586e:	80 81       	ld	r24, Z
    5870:	91 81       	ldd	r25, Z+1	; 0x01
    5872:	11 96       	adiw	r26, 0x01	; 1
    5874:	9c 93       	st	X, r25
    5876:	8e 93       	st	-X, r24
    5878:	fe 01       	movw	r30, r28
    587a:	e9 5b       	subi	r30, 0xB9	; 185
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <SH_Runnable+0x5fc>
    5886:	fe 01       	movw	r30, r28
    5888:	e9 5b       	subi	r30, 0xB9	; 185
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	91 83       	std	Z+1, r25	; 0x01
    588e:	80 83       	st	Z, r24
				_delay_ms(500);
				if(pass_trails==3)
    5890:	80 91 37 03 	lds	r24, 0x0337
    5894:	83 30       	cpi	r24, 0x03	; 3
    5896:	09 f0       	breq	.+2      	; 0x589a <SH_Runnable+0x614>
    5898:	00 c1       	rjmp	.+512    	; 0x5a9a <SH_Runnable+0x814>
				{
					while(1)
					{
						DIO_WritePin(PINA7,HIGH);
    589a:	87 e0       	ldi	r24, 0x07	; 7
    589c:	61 e0       	ldi	r22, 0x01	; 1
    589e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    58a2:	fe 01       	movw	r30, r28
    58a4:	ed 5b       	subi	r30, 0xBD	; 189
    58a6:	ff 4f       	sbci	r31, 0xFF	; 255
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	aa ef       	ldi	r26, 0xFA	; 250
    58ae:	b3 e4       	ldi	r27, 0x43	; 67
    58b0:	80 83       	st	Z, r24
    58b2:	91 83       	std	Z+1, r25	; 0x01
    58b4:	a2 83       	std	Z+2, r26	; 0x02
    58b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58b8:	8e 01       	movw	r16, r28
    58ba:	01 5c       	subi	r16, 0xC1	; 193
    58bc:	1f 4f       	sbci	r17, 0xFF	; 255
    58be:	fe 01       	movw	r30, r28
    58c0:	ed 5b       	subi	r30, 0xBD	; 189
    58c2:	ff 4f       	sbci	r31, 0xFF	; 255
    58c4:	60 81       	ld	r22, Z
    58c6:	71 81       	ldd	r23, Z+1	; 0x01
    58c8:	82 81       	ldd	r24, Z+2	; 0x02
    58ca:	93 81       	ldd	r25, Z+3	; 0x03
    58cc:	20 e0       	ldi	r18, 0x00	; 0
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	4a ef       	ldi	r20, 0xFA	; 250
    58d2:	54 e4       	ldi	r21, 0x44	; 68
    58d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d8:	dc 01       	movw	r26, r24
    58da:	cb 01       	movw	r24, r22
    58dc:	f8 01       	movw	r30, r16
    58de:	80 83       	st	Z, r24
    58e0:	91 83       	std	Z+1, r25	; 0x01
    58e2:	a2 83       	std	Z+2, r26	; 0x02
    58e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58e6:	fe 01       	movw	r30, r28
    58e8:	ff 96       	adiw	r30, 0x3f	; 63
    58ea:	60 81       	ld	r22, Z
    58ec:	71 81       	ldd	r23, Z+1	; 0x01
    58ee:	82 81       	ldd	r24, Z+2	; 0x02
    58f0:	93 81       	ldd	r25, Z+3	; 0x03
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e8       	ldi	r20, 0x80	; 128
    58f8:	5f e3       	ldi	r21, 0x3F	; 63
    58fa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    58fe:	88 23       	and	r24, r24
    5900:	2c f4       	brge	.+10     	; 0x590c <SH_Runnable+0x686>
		__ticks = 1;
    5902:	81 e0       	ldi	r24, 0x01	; 1
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	9e af       	std	Y+62, r25	; 0x3e
    5908:	8d af       	std	Y+61, r24	; 0x3d
    590a:	46 c0       	rjmp	.+140    	; 0x5998 <SH_Runnable+0x712>
	else if (__tmp > 65535)
    590c:	fe 01       	movw	r30, r28
    590e:	ff 96       	adiw	r30, 0x3f	; 63
    5910:	60 81       	ld	r22, Z
    5912:	71 81       	ldd	r23, Z+1	; 0x01
    5914:	82 81       	ldd	r24, Z+2	; 0x02
    5916:	93 81       	ldd	r25, Z+3	; 0x03
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	3f ef       	ldi	r19, 0xFF	; 255
    591c:	4f e7       	ldi	r20, 0x7F	; 127
    591e:	57 e4       	ldi	r21, 0x47	; 71
    5920:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5924:	18 16       	cp	r1, r24
    5926:	64 f5       	brge	.+88     	; 0x5980 <SH_Runnable+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5928:	fe 01       	movw	r30, r28
    592a:	ed 5b       	subi	r30, 0xBD	; 189
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	60 81       	ld	r22, Z
    5930:	71 81       	ldd	r23, Z+1	; 0x01
    5932:	82 81       	ldd	r24, Z+2	; 0x02
    5934:	93 81       	ldd	r25, Z+3	; 0x03
    5936:	20 e0       	ldi	r18, 0x00	; 0
    5938:	30 e0       	ldi	r19, 0x00	; 0
    593a:	40 e2       	ldi	r20, 0x20	; 32
    593c:	51 e4       	ldi	r21, 0x41	; 65
    593e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5942:	dc 01       	movw	r26, r24
    5944:	cb 01       	movw	r24, r22
    5946:	bc 01       	movw	r22, r24
    5948:	cd 01       	movw	r24, r26
    594a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	9e af       	std	Y+62, r25	; 0x3e
    5954:	8d af       	std	Y+61, r24	; 0x3d
    5956:	0f c0       	rjmp	.+30     	; 0x5976 <SH_Runnable+0x6f0>
    5958:	88 ec       	ldi	r24, 0xC8	; 200
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	9c af       	std	Y+60, r25	; 0x3c
    595e:	8b af       	std	Y+59, r24	; 0x3b
    5960:	8b ad       	ldd	r24, Y+59	; 0x3b
    5962:	9c ad       	ldd	r25, Y+60	; 0x3c
    5964:	01 97       	sbiw	r24, 0x01	; 1
    5966:	f1 f7       	brne	.-4      	; 0x5964 <SH_Runnable+0x6de>
    5968:	9c af       	std	Y+60, r25	; 0x3c
    596a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    596c:	8d ad       	ldd	r24, Y+61	; 0x3d
    596e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5970:	01 97       	sbiw	r24, 0x01	; 1
    5972:	9e af       	std	Y+62, r25	; 0x3e
    5974:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5976:	8d ad       	ldd	r24, Y+61	; 0x3d
    5978:	9e ad       	ldd	r25, Y+62	; 0x3e
    597a:	00 97       	sbiw	r24, 0x00	; 0
    597c:	69 f7       	brne	.-38     	; 0x5958 <SH_Runnable+0x6d2>
    597e:	16 c0       	rjmp	.+44     	; 0x59ac <SH_Runnable+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5980:	fe 01       	movw	r30, r28
    5982:	ff 96       	adiw	r30, 0x3f	; 63
    5984:	60 81       	ld	r22, Z
    5986:	71 81       	ldd	r23, Z+1	; 0x01
    5988:	82 81       	ldd	r24, Z+2	; 0x02
    598a:	93 81       	ldd	r25, Z+3	; 0x03
    598c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	9e af       	std	Y+62, r25	; 0x3e
    5996:	8d af       	std	Y+61, r24	; 0x3d
    5998:	8d ad       	ldd	r24, Y+61	; 0x3d
    599a:	9e ad       	ldd	r25, Y+62	; 0x3e
    599c:	9a af       	std	Y+58, r25	; 0x3a
    599e:	89 af       	std	Y+57, r24	; 0x39
    59a0:	89 ad       	ldd	r24, Y+57	; 0x39
    59a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    59a4:	01 97       	sbiw	r24, 0x01	; 1
    59a6:	f1 f7       	brne	.-4      	; 0x59a4 <SH_Runnable+0x71e>
    59a8:	9a af       	std	Y+58, r25	; 0x3a
    59aa:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(500);
						DIO_WritePin(PINA7,LOW);
    59ac:	87 e0       	ldi	r24, 0x07	; 7
    59ae:	60 e0       	ldi	r22, 0x00	; 0
    59b0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    59b4:	80 e0       	ldi	r24, 0x00	; 0
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	aa ef       	ldi	r26, 0xFA	; 250
    59ba:	b3 e4       	ldi	r27, 0x43	; 67
    59bc:	8d ab       	std	Y+53, r24	; 0x35
    59be:	9e ab       	std	Y+54, r25	; 0x36
    59c0:	af ab       	std	Y+55, r26	; 0x37
    59c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59c4:	6d a9       	ldd	r22, Y+53	; 0x35
    59c6:	7e a9       	ldd	r23, Y+54	; 0x36
    59c8:	8f a9       	ldd	r24, Y+55	; 0x37
    59ca:	98 ad       	ldd	r25, Y+56	; 0x38
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	4a ef       	ldi	r20, 0xFA	; 250
    59d2:	54 e4       	ldi	r21, 0x44	; 68
    59d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d8:	dc 01       	movw	r26, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	89 ab       	std	Y+49, r24	; 0x31
    59de:	9a ab       	std	Y+50, r25	; 0x32
    59e0:	ab ab       	std	Y+51, r26	; 0x33
    59e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    59e4:	69 a9       	ldd	r22, Y+49	; 0x31
    59e6:	7a a9       	ldd	r23, Y+50	; 0x32
    59e8:	8b a9       	ldd	r24, Y+51	; 0x33
    59ea:	9c a9       	ldd	r25, Y+52	; 0x34
    59ec:	20 e0       	ldi	r18, 0x00	; 0
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	40 e8       	ldi	r20, 0x80	; 128
    59f2:	5f e3       	ldi	r21, 0x3F	; 63
    59f4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    59f8:	88 23       	and	r24, r24
    59fa:	2c f4       	brge	.+10     	; 0x5a06 <SH_Runnable+0x780>
		__ticks = 1;
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	98 ab       	std	Y+48, r25	; 0x30
    5a02:	8f a7       	std	Y+47, r24	; 0x2f
    5a04:	3f c0       	rjmp	.+126    	; 0x5a84 <SH_Runnable+0x7fe>
	else if (__tmp > 65535)
    5a06:	69 a9       	ldd	r22, Y+49	; 0x31
    5a08:	7a a9       	ldd	r23, Y+50	; 0x32
    5a0a:	8b a9       	ldd	r24, Y+51	; 0x33
    5a0c:	9c a9       	ldd	r25, Y+52	; 0x34
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	3f ef       	ldi	r19, 0xFF	; 255
    5a12:	4f e7       	ldi	r20, 0x7F	; 127
    5a14:	57 e4       	ldi	r21, 0x47	; 71
    5a16:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5a1a:	18 16       	cp	r1, r24
    5a1c:	4c f5       	brge	.+82     	; 0x5a70 <SH_Runnable+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a1e:	6d a9       	ldd	r22, Y+53	; 0x35
    5a20:	7e a9       	ldd	r23, Y+54	; 0x36
    5a22:	8f a9       	ldd	r24, Y+55	; 0x37
    5a24:	98 ad       	ldd	r25, Y+56	; 0x38
    5a26:	20 e0       	ldi	r18, 0x00	; 0
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	40 e2       	ldi	r20, 0x20	; 32
    5a2c:	51 e4       	ldi	r21, 0x41	; 65
    5a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	bc 01       	movw	r22, r24
    5a38:	cd 01       	movw	r24, r26
    5a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a3e:	dc 01       	movw	r26, r24
    5a40:	cb 01       	movw	r24, r22
    5a42:	98 ab       	std	Y+48, r25	; 0x30
    5a44:	8f a7       	std	Y+47, r24	; 0x2f
    5a46:	0f c0       	rjmp	.+30     	; 0x5a66 <SH_Runnable+0x7e0>
    5a48:	88 ec       	ldi	r24, 0xC8	; 200
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	9e a7       	std	Y+46, r25	; 0x2e
    5a4e:	8d a7       	std	Y+45, r24	; 0x2d
    5a50:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a52:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a54:	01 97       	sbiw	r24, 0x01	; 1
    5a56:	f1 f7       	brne	.-4      	; 0x5a54 <SH_Runnable+0x7ce>
    5a58:	9e a7       	std	Y+46, r25	; 0x2e
    5a5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    5a60:	01 97       	sbiw	r24, 0x01	; 1
    5a62:	98 ab       	std	Y+48, r25	; 0x30
    5a64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a68:	98 a9       	ldd	r25, Y+48	; 0x30
    5a6a:	00 97       	sbiw	r24, 0x00	; 0
    5a6c:	69 f7       	brne	.-38     	; 0x5a48 <SH_Runnable+0x7c2>
    5a6e:	15 cf       	rjmp	.-470    	; 0x589a <SH_Runnable+0x614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a70:	69 a9       	ldd	r22, Y+49	; 0x31
    5a72:	7a a9       	ldd	r23, Y+50	; 0x32
    5a74:	8b a9       	ldd	r24, Y+51	; 0x33
    5a76:	9c a9       	ldd	r25, Y+52	; 0x34
    5a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	98 ab       	std	Y+48, r25	; 0x30
    5a82:	8f a7       	std	Y+47, r24	; 0x2f
    5a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a86:	98 a9       	ldd	r25, Y+48	; 0x30
    5a88:	9c a7       	std	Y+44, r25	; 0x2c
    5a8a:	8b a7       	std	Y+43, r24	; 0x2b
    5a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	f1 f7       	brne	.-4      	; 0x5a90 <SH_Runnable+0x80a>
    5a94:	9c a7       	std	Y+44, r25	; 0x2c
    5a96:	8b a7       	std	Y+43, r24	; 0x2b
    5a98:	00 cf       	rjmp	.-512    	; 0x589a <SH_Runnable+0x614>
						_delay_ms(500);
					}
				}
				LCD_Clear();
    5a9a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
				start_screen();
    5a9e:	0e 94 32 26 	call	0x4c64	; 0x4c64 <start_screen>
    5aa2:	59 c2       	rjmp	.+1202   	; 0x5f56 <SH_Runnable+0xcd0>
			}
			else
			{
				pass_trails=0;
    5aa4:	10 92 37 03 	sts	0x0337, r1
				mode_flag=user_mode;
    5aa8:	82 e0       	ldi	r24, 0x02	; 2
    5aaa:	80 93 4b 03 	sts	0x034B, r24
				options_screen();
    5aae:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <options_screen>
    5ab2:	51 c2       	rjmp	.+1186   	; 0x5f56 <SH_Runnable+0xcd0>
			}
		}

	}

	else if(mode_flag==user_mode)
    5ab4:	80 91 4b 03 	lds	r24, 0x034B
    5ab8:	82 30       	cpi	r24, 0x02	; 2
    5aba:	09 f0       	breq	.+2      	; 0x5abe <SH_Runnable+0x838>
    5abc:	0f c1       	rjmp	.+542    	; 0x5cdc <SH_Runnable+0xa56>
	{
		u8 led,state,speed,temp;
		u8 k=KeyPad_get();
    5abe:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	ef 58       	subi	r30, 0x8F	; 143
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	80 83       	st	Z, r24
		if(k!=NO_KEY)
    5aca:	fe 01       	movw	r30, r28
    5acc:	ef 58       	subi	r30, 0x8F	; 143
    5ace:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad0:	80 81       	ld	r24, Z
    5ad2:	84 35       	cpi	r24, 0x54	; 84
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <SH_Runnable+0x852>
    5ad6:	3f c2       	rjmp	.+1150   	; 0x5f56 <SH_Runnable+0xcd0>
		{
			Fan_Control();
    5ad8:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <Fan_Control>
			switch (k)
    5adc:	fe 01       	movw	r30, r28
    5ade:	ef 58       	subi	r30, 0x8F	; 143
    5ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae2:	80 81       	ld	r24, Z
    5ae4:	28 2f       	mov	r18, r24
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	c2 58       	subi	r28, 0x82	; 130
    5aea:	df 4f       	sbci	r29, 0xFF	; 255
    5aec:	39 83       	std	Y+1, r19	; 0x01
    5aee:	28 83       	st	Y, r18
    5af0:	ce 57       	subi	r28, 0x7E	; 126
    5af2:	d0 40       	sbci	r29, 0x00	; 0
    5af4:	c2 58       	subi	r28, 0x82	; 130
    5af6:	df 4f       	sbci	r29, 0xFF	; 255
    5af8:	88 81       	ld	r24, Y
    5afa:	99 81       	ldd	r25, Y+1	; 0x01
    5afc:	ce 57       	subi	r28, 0x7E	; 126
    5afe:	d0 40       	sbci	r29, 0x00	; 0
    5b00:	82 33       	cpi	r24, 0x32	; 50
    5b02:	91 05       	cpc	r25, r1
    5b04:	09 f4       	brne	.+2      	; 0x5b08 <SH_Runnable+0x882>
    5b06:	45 c0       	rjmp	.+138    	; 0x5b92 <SH_Runnable+0x90c>
    5b08:	c2 58       	subi	r28, 0x82	; 130
    5b0a:	df 4f       	sbci	r29, 0xFF	; 255
    5b0c:	e8 81       	ld	r30, Y
    5b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b10:	ce 57       	subi	r28, 0x7E	; 126
    5b12:	d0 40       	sbci	r29, 0x00	; 0
    5b14:	e3 33       	cpi	r30, 0x33	; 51
    5b16:	f1 05       	cpc	r31, r1
    5b18:	54 f4       	brge	.+20     	; 0x5b2e <SH_Runnable+0x8a8>
    5b1a:	c2 58       	subi	r28, 0x82	; 130
    5b1c:	df 4f       	sbci	r29, 0xFF	; 255
    5b1e:	28 81       	ld	r18, Y
    5b20:	39 81       	ldd	r19, Y+1	; 0x01
    5b22:	ce 57       	subi	r28, 0x7E	; 126
    5b24:	d0 40       	sbci	r29, 0x00	; 0
    5b26:	21 33       	cpi	r18, 0x31	; 49
    5b28:	31 05       	cpc	r19, r1
    5b2a:	a9 f0       	breq	.+42     	; 0x5b56 <SH_Runnable+0x8d0>
    5b2c:	d4 c0       	rjmp	.+424    	; 0x5cd6 <SH_Runnable+0xa50>
    5b2e:	c2 58       	subi	r28, 0x82	; 130
    5b30:	df 4f       	sbci	r29, 0xFF	; 255
    5b32:	88 81       	ld	r24, Y
    5b34:	99 81       	ldd	r25, Y+1	; 0x01
    5b36:	ce 57       	subi	r28, 0x7E	; 126
    5b38:	d0 40       	sbci	r29, 0x00	; 0
    5b3a:	83 33       	cpi	r24, 0x33	; 51
    5b3c:	91 05       	cpc	r25, r1
    5b3e:	a9 f1       	breq	.+106    	; 0x5baa <SH_Runnable+0x924>
    5b40:	c2 58       	subi	r28, 0x82	; 130
    5b42:	df 4f       	sbci	r29, 0xFF	; 255
    5b44:	e8 81       	ld	r30, Y
    5b46:	f9 81       	ldd	r31, Y+1	; 0x01
    5b48:	ce 57       	subi	r28, 0x7E	; 126
    5b4a:	d0 40       	sbci	r29, 0x00	; 0
    5b4c:	e4 33       	cpi	r30, 0x34	; 52
    5b4e:	f1 05       	cpc	r31, r1
    5b50:	09 f4       	brne	.+2      	; 0x5b54 <SH_Runnable+0x8ce>
    5b52:	b6 c0       	rjmp	.+364    	; 0x5cc0 <SH_Runnable+0xa3a>
    5b54:	c0 c0       	rjmp	.+384    	; 0x5cd6 <SH_Runnable+0xa50>
			{
				case '1':
					{
					led=0;
    5b56:	fe 01       	movw	r30, r28
    5b58:	e5 58       	subi	r30, 0x85	; 133
    5b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5c:	10 82       	st	Z, r1
					state=0;
    5b5e:	fe 01       	movw	r30, r28
    5b60:	e4 58       	subi	r30, 0x84	; 132
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	10 82       	st	Z, r1
					ctrl_led(&led,&state);
    5b66:	ce 01       	movw	r24, r28
    5b68:	85 58       	subi	r24, 0x85	; 133
    5b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6c:	9e 01       	movw	r18, r28
    5b6e:	24 58       	subi	r18, 0x84	; 132
    5b70:	3f 4f       	sbci	r19, 0xFF	; 255
    5b72:	b9 01       	movw	r22, r18
    5b74:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <ctrl_led>
					Led_Control(led+23,state);
    5b78:	fe 01       	movw	r30, r28
    5b7a:	e5 58       	subi	r30, 0x85	; 133
    5b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7e:	80 81       	ld	r24, Z
    5b80:	89 5e       	subi	r24, 0xE9	; 233
    5b82:	fe 01       	movw	r30, r28
    5b84:	e4 58       	subi	r30, 0x84	; 132
    5b86:	ff 4f       	sbci	r31, 0xFF	; 255
    5b88:	90 81       	ld	r25, Z
    5b8a:	69 2f       	mov	r22, r25
    5b8c:	0e 94 aa 28 	call	0x5154	; 0x5154 <Led_Control>
    5b90:	a2 c0       	rjmp	.+324    	; 0x5cd6 <SH_Runnable+0xa50>
					break;}
				case '2':
					{ctrl_door(&state);
    5b92:	ce 01       	movw	r24, r28
    5b94:	84 58       	subi	r24, 0x84	; 132
    5b96:	9f 4f       	sbci	r25, 0xFF	; 255
    5b98:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <ctrl_door>
					Door_Control(state);
    5b9c:	fe 01       	movw	r30, r28
    5b9e:	e4 58       	subi	r30, 0x84	; 132
    5ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba2:	80 81       	ld	r24, Z
    5ba4:	0e 94 c5 28 	call	0x518a	; 0x518a <Door_Control>
    5ba8:	96 c0       	rjmp	.+300    	; 0x5cd6 <SH_Runnable+0xa50>
					break;}
				case '3':
					{temp=Fan_Control();
    5baa:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <Fan_Control>
    5bae:	fe 01       	movw	r30, r28
    5bb0:	ee 58       	subi	r30, 0x8E	; 142
    5bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb4:	80 83       	st	Z, r24
					LCD_Clear();
    5bb6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
					LCD_WriteString("Temperature : ");
    5bba:	8b e5       	ldi	r24, 0x5B	; 91
    5bbc:	91 e0       	ldi	r25, 0x01	; 1
    5bbe:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
					LCD_WriteNumber(temp);
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	ee 58       	subi	r30, 0x8E	; 142
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 81       	ld	r24, Z
    5bca:	88 2f       	mov	r24, r24
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	a0 e0       	ldi	r26, 0x00	; 0
    5bd0:	b0 e0       	ldi	r27, 0x00	; 0
    5bd2:	bc 01       	movw	r22, r24
    5bd4:	cd 01       	movw	r24, r26
    5bd6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
    5bda:	80 e0       	ldi	r24, 0x00	; 0
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	aa ef       	ldi	r26, 0xFA	; 250
    5be0:	b3 e4       	ldi	r27, 0x43	; 67
    5be2:	8f a3       	std	Y+39, r24	; 0x27
    5be4:	98 a7       	std	Y+40, r25	; 0x28
    5be6:	a9 a7       	std	Y+41, r26	; 0x29
    5be8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bea:	6f a1       	ldd	r22, Y+39	; 0x27
    5bec:	78 a5       	ldd	r23, Y+40	; 0x28
    5bee:	89 a5       	ldd	r24, Y+41	; 0x29
    5bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bf2:	20 e0       	ldi	r18, 0x00	; 0
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	4a ef       	ldi	r20, 0xFA	; 250
    5bf8:	54 e4       	ldi	r21, 0x44	; 68
    5bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bfe:	dc 01       	movw	r26, r24
    5c00:	cb 01       	movw	r24, r22
    5c02:	8b a3       	std	Y+35, r24	; 0x23
    5c04:	9c a3       	std	Y+36, r25	; 0x24
    5c06:	ad a3       	std	Y+37, r26	; 0x25
    5c08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    5c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    5c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    5c10:	9e a1       	ldd	r25, Y+38	; 0x26
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	40 e8       	ldi	r20, 0x80	; 128
    5c18:	5f e3       	ldi	r21, 0x3F	; 63
    5c1a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    5c1e:	88 23       	and	r24, r24
    5c20:	2c f4       	brge	.+10     	; 0x5c2c <SH_Runnable+0x9a6>
		__ticks = 1;
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	9a a3       	std	Y+34, r25	; 0x22
    5c28:	89 a3       	std	Y+33, r24	; 0x21
    5c2a:	3f c0       	rjmp	.+126    	; 0x5caa <SH_Runnable+0xa24>
	else if (__tmp > 65535)
    5c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    5c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    5c30:	8d a1       	ldd	r24, Y+37	; 0x25
    5c32:	9e a1       	ldd	r25, Y+38	; 0x26
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	3f ef       	ldi	r19, 0xFF	; 255
    5c38:	4f e7       	ldi	r20, 0x7F	; 127
    5c3a:	57 e4       	ldi	r21, 0x47	; 71
    5c3c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5c40:	18 16       	cp	r1, r24
    5c42:	4c f5       	brge	.+82     	; 0x5c96 <SH_Runnable+0xa10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c44:	6f a1       	ldd	r22, Y+39	; 0x27
    5c46:	78 a5       	ldd	r23, Y+40	; 0x28
    5c48:	89 a5       	ldd	r24, Y+41	; 0x29
    5c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	40 e2       	ldi	r20, 0x20	; 32
    5c52:	51 e4       	ldi	r21, 0x41	; 65
    5c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	bc 01       	movw	r22, r24
    5c5e:	cd 01       	movw	r24, r26
    5c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	9a a3       	std	Y+34, r25	; 0x22
    5c6a:	89 a3       	std	Y+33, r24	; 0x21
    5c6c:	0f c0       	rjmp	.+30     	; 0x5c8c <SH_Runnable+0xa06>
    5c6e:	88 ec       	ldi	r24, 0xC8	; 200
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	98 a3       	std	Y+32, r25	; 0x20
    5c74:	8f 8f       	std	Y+31, r24	; 0x1f
    5c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5c78:	98 a1       	ldd	r25, Y+32	; 0x20
    5c7a:	01 97       	sbiw	r24, 0x01	; 1
    5c7c:	f1 f7       	brne	.-4      	; 0x5c7a <SH_Runnable+0x9f4>
    5c7e:	98 a3       	std	Y+32, r25	; 0x20
    5c80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c82:	89 a1       	ldd	r24, Y+33	; 0x21
    5c84:	9a a1       	ldd	r25, Y+34	; 0x22
    5c86:	01 97       	sbiw	r24, 0x01	; 1
    5c88:	9a a3       	std	Y+34, r25	; 0x22
    5c8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    5c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    5c90:	00 97       	sbiw	r24, 0x00	; 0
    5c92:	69 f7       	brne	.-38     	; 0x5c6e <SH_Runnable+0x9e8>
    5c94:	20 c0       	rjmp	.+64     	; 0x5cd6 <SH_Runnable+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c96:	6b a1       	ldd	r22, Y+35	; 0x23
    5c98:	7c a1       	ldd	r23, Y+36	; 0x24
    5c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    5c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    5c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ca2:	dc 01       	movw	r26, r24
    5ca4:	cb 01       	movw	r24, r22
    5ca6:	9a a3       	std	Y+34, r25	; 0x22
    5ca8:	89 a3       	std	Y+33, r24	; 0x21
    5caa:	89 a1       	ldd	r24, Y+33	; 0x21
    5cac:	9a a1       	ldd	r25, Y+34	; 0x22
    5cae:	9e 8f       	std	Y+30, r25	; 0x1e
    5cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    5cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	f1 f7       	brne	.-4      	; 0x5cb6 <SH_Runnable+0xa30>
    5cba:	9e 8f       	std	Y+30, r25	; 0x1e
    5cbc:	8d 8f       	std	Y+29, r24	; 0x1d
    5cbe:	0b c0       	rjmp	.+22     	; 0x5cd6 <SH_Runnable+0xa50>
					_delay_ms(500);
					break;}
				case '4':
					{ctrl_dimmer(&speed);
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	83 58       	subi	r24, 0x83	; 131
    5cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc6:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <ctrl_dimmer>
					Dimmer_Control(speed);
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e3 58       	subi	r30, 0x83	; 131
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	80 81       	ld	r24, Z
    5cd2:	0e 94 f7 28 	call	0x51ee	; 0x51ee <Dimmer_Control>
					break;}
				default:
					break;
			}
			options_screen();
    5cd6:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <options_screen>
    5cda:	3d c1       	rjmp	.+634    	; 0x5f56 <SH_Runnable+0xcd0>
		}
	}

	else if(mode_flag==admin_mode)
    5cdc:	80 91 4b 03 	lds	r24, 0x034B
    5ce0:	81 30       	cpi	r24, 0x01	; 1
    5ce2:	09 f0       	breq	.+2      	; 0x5ce6 <SH_Runnable+0xa60>
    5ce4:	38 c1       	rjmp	.+624    	; 0x5f56 <SH_Runnable+0xcd0>
	{
		LCD_Clear();
    5ce6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Receiving data from ADMIN...");
    5cea:	8a e6       	ldi	r24, 0x6A	; 106
    5cec:	91 e0       	ldi	r25, 0x01	; 1
    5cee:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		DIO_WritePin(PIND6,HIGH);
    5cf2:	8e e1       	ldi	r24, 0x1E	; 30
    5cf4:	61 e0       	ldi	r22, 0x01	; 1
    5cf6:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
		func_g = SPI_Transceive(1);
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <SPI_Transceive>
    5d00:	80 93 3a 03 	sts	0x033A, r24

		if(func_g == 1)
    5d04:	80 91 3a 03 	lds	r24, 0x033A
    5d08:	81 30       	cpi	r24, 0x01	; 1
    5d0a:	b1 f4       	brne	.+44     	; 0x5d38 <SH_Runnable+0xab2>
		{
			id_g = SPI_Transceive(2);
    5d0c:	82 e0       	ldi	r24, 0x02	; 2
    5d0e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <SPI_Transceive>
    5d12:	80 93 38 03 	sts	0x0338, r24
			pass_g = SPI_Transceive(3);
    5d16:	83 e0       	ldi	r24, 0x03	; 3
    5d18:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <SPI_Transceive>
    5d1c:	80 93 39 03 	sts	0x0339, r24
			EEPROM_WriteByte(id_g*2,pass_g);
    5d20:	80 91 38 03 	lds	r24, 0x0338
    5d24:	88 2f       	mov	r24, r24
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	88 0f       	add	r24, r24
    5d2a:	99 1f       	adc	r25, r25
    5d2c:	20 91 39 03 	lds	r18, 0x0339
    5d30:	62 2f       	mov	r22, r18
    5d32:	0e 94 3b 22 	call	0x4476	; 0x4476 <EEPROM_WriteByte>
    5d36:	12 c0       	rjmp	.+36     	; 0x5d5c <SH_Runnable+0xad6>
		}
		else if(func_g == 2)
    5d38:	80 91 3a 03 	lds	r24, 0x033A
    5d3c:	82 30       	cpi	r24, 0x02	; 2
    5d3e:	71 f4       	brne	.+28     	; 0x5d5c <SH_Runnable+0xad6>
		{
			id_g = SPI_Transceive(1);
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <SPI_Transceive>
    5d46:	80 93 38 03 	sts	0x0338, r24
			EEPROM_WriteByte(id_g*2,255);
    5d4a:	80 91 38 03 	lds	r24, 0x0338
    5d4e:	88 2f       	mov	r24, r24
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	88 0f       	add	r24, r24
    5d54:	99 1f       	adc	r25, r25
    5d56:	6f ef       	ldi	r22, 0xFF	; 255
    5d58:	0e 94 3b 22 	call	0x4476	; 0x4476 <EEPROM_WriteByte>
    5d5c:	80 e0       	ldi	r24, 0x00	; 0
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	a8 e4       	ldi	r26, 0x48	; 72
    5d62:	b2 e4       	ldi	r27, 0x42	; 66
    5d64:	89 8f       	std	Y+25, r24	; 0x19
    5d66:	9a 8f       	std	Y+26, r25	; 0x1a
    5d68:	ab 8f       	std	Y+27, r26	; 0x1b
    5d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d6c:	69 8d       	ldd	r22, Y+25	; 0x19
    5d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	4a ef       	ldi	r20, 0xFA	; 250
    5d7a:	54 e4       	ldi	r21, 0x44	; 68
    5d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d80:	dc 01       	movw	r26, r24
    5d82:	cb 01       	movw	r24, r22
    5d84:	8d 8b       	std	Y+21, r24	; 0x15
    5d86:	9e 8b       	std	Y+22, r25	; 0x16
    5d88:	af 8b       	std	Y+23, r26	; 0x17
    5d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    5d90:	8f 89       	ldd	r24, Y+23	; 0x17
    5d92:	98 8d       	ldd	r25, Y+24	; 0x18
    5d94:	20 e0       	ldi	r18, 0x00	; 0
    5d96:	30 e0       	ldi	r19, 0x00	; 0
    5d98:	40 e8       	ldi	r20, 0x80	; 128
    5d9a:	5f e3       	ldi	r21, 0x3F	; 63
    5d9c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    5da0:	88 23       	and	r24, r24
    5da2:	2c f4       	brge	.+10     	; 0x5dae <SH_Runnable+0xb28>
		__ticks = 1;
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	9c 8b       	std	Y+20, r25	; 0x14
    5daa:	8b 8b       	std	Y+19, r24	; 0x13
    5dac:	3f c0       	rjmp	.+126    	; 0x5e2c <SH_Runnable+0xba6>
	else if (__tmp > 65535)
    5dae:	6d 89       	ldd	r22, Y+21	; 0x15
    5db0:	7e 89       	ldd	r23, Y+22	; 0x16
    5db2:	8f 89       	ldd	r24, Y+23	; 0x17
    5db4:	98 8d       	ldd	r25, Y+24	; 0x18
    5db6:	20 e0       	ldi	r18, 0x00	; 0
    5db8:	3f ef       	ldi	r19, 0xFF	; 255
    5dba:	4f e7       	ldi	r20, 0x7F	; 127
    5dbc:	57 e4       	ldi	r21, 0x47	; 71
    5dbe:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5dc2:	18 16       	cp	r1, r24
    5dc4:	4c f5       	brge	.+82     	; 0x5e18 <SH_Runnable+0xb92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    5dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dce:	20 e0       	ldi	r18, 0x00	; 0
    5dd0:	30 e0       	ldi	r19, 0x00	; 0
    5dd2:	40 e2       	ldi	r20, 0x20	; 32
    5dd4:	51 e4       	ldi	r21, 0x41	; 65
    5dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	bc 01       	movw	r22, r24
    5de0:	cd 01       	movw	r24, r26
    5de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5de6:	dc 01       	movw	r26, r24
    5de8:	cb 01       	movw	r24, r22
    5dea:	9c 8b       	std	Y+20, r25	; 0x14
    5dec:	8b 8b       	std	Y+19, r24	; 0x13
    5dee:	0f c0       	rjmp	.+30     	; 0x5e0e <SH_Runnable+0xb88>
    5df0:	88 ec       	ldi	r24, 0xC8	; 200
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	9a 8b       	std	Y+18, r25	; 0x12
    5df6:	89 8b       	std	Y+17, r24	; 0x11
    5df8:	89 89       	ldd	r24, Y+17	; 0x11
    5dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	f1 f7       	brne	.-4      	; 0x5dfc <SH_Runnable+0xb76>
    5e00:	9a 8b       	std	Y+18, r25	; 0x12
    5e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e04:	8b 89       	ldd	r24, Y+19	; 0x13
    5e06:	9c 89       	ldd	r25, Y+20	; 0x14
    5e08:	01 97       	sbiw	r24, 0x01	; 1
    5e0a:	9c 8b       	std	Y+20, r25	; 0x14
    5e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    5e10:	9c 89       	ldd	r25, Y+20	; 0x14
    5e12:	00 97       	sbiw	r24, 0x00	; 0
    5e14:	69 f7       	brne	.-38     	; 0x5df0 <SH_Runnable+0xb6a>
    5e16:	14 c0       	rjmp	.+40     	; 0x5e40 <SH_Runnable+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e18:	6d 89       	ldd	r22, Y+21	; 0x15
    5e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    5e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    5e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    5e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e24:	dc 01       	movw	r26, r24
    5e26:	cb 01       	movw	r24, r22
    5e28:	9c 8b       	std	Y+20, r25	; 0x14
    5e2a:	8b 8b       	std	Y+19, r24	; 0x13
    5e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    5e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    5e30:	98 8b       	std	Y+16, r25	; 0x10
    5e32:	8f 87       	std	Y+15, r24	; 0x0f
    5e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e36:	98 89       	ldd	r25, Y+16	; 0x10
    5e38:	01 97       	sbiw	r24, 0x01	; 1
    5e3a:	f1 f7       	brne	.-4      	; 0x5e38 <SH_Runnable+0xbb2>
    5e3c:	98 8b       	std	Y+16, r25	; 0x10
    5e3e:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(50);
		LCD_Clear();
    5e40:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Data has been");
    5e44:	87 e8       	ldi	r24, 0x87	; 135
    5e46:	91 e0       	ldi	r25, 0x01	; 1
    5e48:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		LCD_SETCURSOR(LINE2,0);
    5e4c:	80 e4       	ldi	r24, 0x40	; 64
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
		LCD_WriteString("received succesfully");
    5e54:	85 e9       	ldi	r24, 0x95	; 149
    5e56:	91 e0       	ldi	r25, 0x01	; 1
    5e58:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		DIO_WritePin(PIND6,LOW);
    5e5c:	8e e1       	ldi	r24, 0x1E	; 30
    5e5e:	60 e0       	ldi	r22, 0x00	; 0
    5e60:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	a8 ec       	ldi	r26, 0xC8	; 200
    5e6a:	b3 e4       	ldi	r27, 0x43	; 67
    5e6c:	8b 87       	std	Y+11, r24	; 0x0b
    5e6e:	9c 87       	std	Y+12, r25	; 0x0c
    5e70:	ad 87       	std	Y+13, r26	; 0x0d
    5e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	4a ef       	ldi	r20, 0xFA	; 250
    5e82:	54 e4       	ldi	r21, 0x44	; 68
    5e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e88:	dc 01       	movw	r26, r24
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	8f 83       	std	Y+7, r24	; 0x07
    5e8e:	98 87       	std	Y+8, r25	; 0x08
    5e90:	a9 87       	std	Y+9, r26	; 0x09
    5e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e94:	6f 81       	ldd	r22, Y+7	; 0x07
    5e96:	78 85       	ldd	r23, Y+8	; 0x08
    5e98:	89 85       	ldd	r24, Y+9	; 0x09
    5e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e9c:	20 e0       	ldi	r18, 0x00	; 0
    5e9e:	30 e0       	ldi	r19, 0x00	; 0
    5ea0:	40 e8       	ldi	r20, 0x80	; 128
    5ea2:	5f e3       	ldi	r21, 0x3F	; 63
    5ea4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    5ea8:	88 23       	and	r24, r24
    5eaa:	2c f4       	brge	.+10     	; 0x5eb6 <SH_Runnable+0xc30>
		__ticks = 1;
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	9e 83       	std	Y+6, r25	; 0x06
    5eb2:	8d 83       	std	Y+5, r24	; 0x05
    5eb4:	3f c0       	rjmp	.+126    	; 0x5f34 <SH_Runnable+0xcae>
	else if (__tmp > 65535)
    5eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    5eb8:	78 85       	ldd	r23, Y+8	; 0x08
    5eba:	89 85       	ldd	r24, Y+9	; 0x09
    5ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ebe:	20 e0       	ldi	r18, 0x00	; 0
    5ec0:	3f ef       	ldi	r19, 0xFF	; 255
    5ec2:	4f e7       	ldi	r20, 0x7F	; 127
    5ec4:	57 e4       	ldi	r21, 0x47	; 71
    5ec6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    5eca:	18 16       	cp	r1, r24
    5ecc:	4c f5       	brge	.+82     	; 0x5f20 <SH_Runnable+0xc9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	40 e2       	ldi	r20, 0x20	; 32
    5edc:	51 e4       	ldi	r21, 0x41	; 65
    5ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	bc 01       	movw	r22, r24
    5ee8:	cd 01       	movw	r24, r26
    5eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eee:	dc 01       	movw	r26, r24
    5ef0:	cb 01       	movw	r24, r22
    5ef2:	9e 83       	std	Y+6, r25	; 0x06
    5ef4:	8d 83       	std	Y+5, r24	; 0x05
    5ef6:	0f c0       	rjmp	.+30     	; 0x5f16 <SH_Runnable+0xc90>
    5ef8:	88 ec       	ldi	r24, 0xC8	; 200
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	9c 83       	std	Y+4, r25	; 0x04
    5efe:	8b 83       	std	Y+3, r24	; 0x03
    5f00:	8b 81       	ldd	r24, Y+3	; 0x03
    5f02:	9c 81       	ldd	r25, Y+4	; 0x04
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	f1 f7       	brne	.-4      	; 0x5f04 <SH_Runnable+0xc7e>
    5f08:	9c 83       	std	Y+4, r25	; 0x04
    5f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f10:	01 97       	sbiw	r24, 0x01	; 1
    5f12:	9e 83       	std	Y+6, r25	; 0x06
    5f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f16:	8d 81       	ldd	r24, Y+5	; 0x05
    5f18:	9e 81       	ldd	r25, Y+6	; 0x06
    5f1a:	00 97       	sbiw	r24, 0x00	; 0
    5f1c:	69 f7       	brne	.-38     	; 0x5ef8 <SH_Runnable+0xc72>
    5f1e:	14 c0       	rjmp	.+40     	; 0x5f48 <SH_Runnable+0xcc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f20:	6f 81       	ldd	r22, Y+7	; 0x07
    5f22:	78 85       	ldd	r23, Y+8	; 0x08
    5f24:	89 85       	ldd	r24, Y+9	; 0x09
    5f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	cb 01       	movw	r24, r22
    5f30:	9e 83       	std	Y+6, r25	; 0x06
    5f32:	8d 83       	std	Y+5, r24	; 0x05
    5f34:	8d 81       	ldd	r24, Y+5	; 0x05
    5f36:	9e 81       	ldd	r25, Y+6	; 0x06
    5f38:	9a 83       	std	Y+2, r25	; 0x02
    5f3a:	89 83       	std	Y+1, r24	; 0x01
    5f3c:	89 81       	ldd	r24, Y+1	; 0x01
    5f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f40:	01 97       	sbiw	r24, 0x01	; 1
    5f42:	f1 f7       	brne	.-4      	; 0x5f40 <SH_Runnable+0xcba>
    5f44:	9a 83       	std	Y+2, r25	; 0x02
    5f46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		LCD_Clear();
    5f48:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		mode_flag = init_mode;
    5f4c:	83 e0       	ldi	r24, 0x03	; 3
    5f4e:	80 93 4b 03 	sts	0x034B, r24
		start_screen();
    5f52:	0e 94 32 26 	call	0x4c64	; 0x4c64 <start_screen>
	}


}
    5f56:	c1 58       	subi	r28, 0x81	; 129
    5f58:	df 4f       	sbci	r29, 0xFF	; 255
    5f5a:	0f b6       	in	r0, 0x3f	; 63
    5f5c:	f8 94       	cli
    5f5e:	de bf       	out	0x3e, r29	; 62
    5f60:	0f be       	out	0x3f, r0	; 63
    5f62:	cd bf       	out	0x3d, r28	; 61
    5f64:	cf 91       	pop	r28
    5f66:	df 91       	pop	r29
    5f68:	1f 91       	pop	r17
    5f6a:	0f 91       	pop	r16
    5f6c:	08 95       	ret

00005f6e <SRV_Motor_init>:
#include "Timer/Timer1/Timer1_Interface.h"
#include "SRV_Motor/SRV_Motor_Interface.h"
#include "SRVM.h"

void SRV_Motor_init()
{
    5f6e:	df 93       	push	r29
    5f70:	cf 93       	push	r28
    5f72:	cd b7       	in	r28, 0x3d	; 61
    5f74:	de b7       	in	r29, 0x3e	; 62
	SRV_Init();
    5f76:	0e 94 2e 18 	call	0x305c	; 0x305c <SRV_Init>
}
    5f7a:	cf 91       	pop	r28
    5f7c:	df 91       	pop	r29
    5f7e:	08 95       	ret

00005f80 <SRV_Motor_runnable>:

void SRV_Motor_runnable()
{
    5f80:	df 93       	push	r29
    5f82:	cf 93       	push	r28
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
	SRV_Motor_Start(0);
    5f88:	80 e0       	ldi	r24, 0x00	; 0
    5f8a:	0e 94 37 18 	call	0x306e	; 0x306e <SRV_Motor_Start>
}
    5f8e:	cf 91       	pop	r28
    5f90:	df 91       	pop	r29
    5f92:	08 95       	ret

00005f94 <SPI_Test_init>:
#include "DIO/DIO_Inteface.h"
#include "SPI/SPI_Interface.h"


void SPI_Test_init()
{
    5f94:	df 93       	push	r29
    5f96:	cf 93       	push	r28
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
	SPI_Enable_int();
    5f9c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <SPI_Enable_int>
	SPI_init();
    5fa0:	0e 94 44 0c 	call	0x1888	; 0x1888 <SPI_init>
}
    5fa4:	cf 91       	pop	r28
    5fa6:	df 91       	pop	r29
    5fa8:	08 95       	ret

00005faa <SPI_Test_Runnable>:

void SPI_Test_Runnable()
{
    5faa:	df 93       	push	r29
    5fac:	cf 93       	push	r28
    5fae:	cd b7       	in	r28, 0x3d	; 61
    5fb0:	de b7       	in	r29, 0x3e	; 62
    5fb2:	2e 97       	sbiw	r28, 0x0e	; 14
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
	SPI_Send_data(4);
    5fbe:	84 e0       	ldi	r24, 0x04	; 4
    5fc0:	0e 94 9f 0c 	call	0x193e	; 0x193e <SPI_Send_data>
    5fc4:	80 e0       	ldi	r24, 0x00	; 0
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	a8 ec       	ldi	r26, 0xC8	; 200
    5fca:	b2 e4       	ldi	r27, 0x42	; 66
    5fcc:	8b 87       	std	Y+11, r24	; 0x0b
    5fce:	9c 87       	std	Y+12, r25	; 0x0c
    5fd0:	ad 87       	std	Y+13, r26	; 0x0d
    5fd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	4a ef       	ldi	r20, 0xFA	; 250
    5fe2:	54 e4       	ldi	r21, 0x44	; 68
    5fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fe8:	dc 01       	movw	r26, r24
    5fea:	cb 01       	movw	r24, r22
    5fec:	8f 83       	std	Y+7, r24	; 0x07
    5fee:	98 87       	std	Y+8, r25	; 0x08
    5ff0:	a9 87       	std	Y+9, r26	; 0x09
    5ff2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ff6:	78 85       	ldd	r23, Y+8	; 0x08
    5ff8:	89 85       	ldd	r24, Y+9	; 0x09
    5ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ffc:	20 e0       	ldi	r18, 0x00	; 0
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	40 e8       	ldi	r20, 0x80	; 128
    6002:	5f e3       	ldi	r21, 0x3F	; 63
    6004:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    6008:	88 23       	and	r24, r24
    600a:	2c f4       	brge	.+10     	; 0x6016 <SPI_Test_Runnable+0x6c>
		__ticks = 1;
    600c:	81 e0       	ldi	r24, 0x01	; 1
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	9e 83       	std	Y+6, r25	; 0x06
    6012:	8d 83       	std	Y+5, r24	; 0x05
    6014:	3f c0       	rjmp	.+126    	; 0x6094 <SPI_Test_Runnable+0xea>
	else if (__tmp > 65535)
    6016:	6f 81       	ldd	r22, Y+7	; 0x07
    6018:	78 85       	ldd	r23, Y+8	; 0x08
    601a:	89 85       	ldd	r24, Y+9	; 0x09
    601c:	9a 85       	ldd	r25, Y+10	; 0x0a
    601e:	20 e0       	ldi	r18, 0x00	; 0
    6020:	3f ef       	ldi	r19, 0xFF	; 255
    6022:	4f e7       	ldi	r20, 0x7F	; 127
    6024:	57 e4       	ldi	r21, 0x47	; 71
    6026:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    602a:	18 16       	cp	r1, r24
    602c:	4c f5       	brge	.+82     	; 0x6080 <SPI_Test_Runnable+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    602e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6030:	7c 85       	ldd	r23, Y+12	; 0x0c
    6032:	8d 85       	ldd	r24, Y+13	; 0x0d
    6034:	9e 85       	ldd	r25, Y+14	; 0x0e
    6036:	20 e0       	ldi	r18, 0x00	; 0
    6038:	30 e0       	ldi	r19, 0x00	; 0
    603a:	40 e2       	ldi	r20, 0x20	; 32
    603c:	51 e4       	ldi	r21, 0x41	; 65
    603e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6042:	dc 01       	movw	r26, r24
    6044:	cb 01       	movw	r24, r22
    6046:	bc 01       	movw	r22, r24
    6048:	cd 01       	movw	r24, r26
    604a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    604e:	dc 01       	movw	r26, r24
    6050:	cb 01       	movw	r24, r22
    6052:	9e 83       	std	Y+6, r25	; 0x06
    6054:	8d 83       	std	Y+5, r24	; 0x05
    6056:	0f c0       	rjmp	.+30     	; 0x6076 <SPI_Test_Runnable+0xcc>
    6058:	88 ec       	ldi	r24, 0xC8	; 200
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	9c 83       	std	Y+4, r25	; 0x04
    605e:	8b 83       	std	Y+3, r24	; 0x03
    6060:	8b 81       	ldd	r24, Y+3	; 0x03
    6062:	9c 81       	ldd	r25, Y+4	; 0x04
    6064:	01 97       	sbiw	r24, 0x01	; 1
    6066:	f1 f7       	brne	.-4      	; 0x6064 <SPI_Test_Runnable+0xba>
    6068:	9c 83       	std	Y+4, r25	; 0x04
    606a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    606c:	8d 81       	ldd	r24, Y+5	; 0x05
    606e:	9e 81       	ldd	r25, Y+6	; 0x06
    6070:	01 97       	sbiw	r24, 0x01	; 1
    6072:	9e 83       	std	Y+6, r25	; 0x06
    6074:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6076:	8d 81       	ldd	r24, Y+5	; 0x05
    6078:	9e 81       	ldd	r25, Y+6	; 0x06
    607a:	00 97       	sbiw	r24, 0x00	; 0
    607c:	69 f7       	brne	.-38     	; 0x6058 <SPI_Test_Runnable+0xae>
    607e:	14 c0       	rjmp	.+40     	; 0x60a8 <SPI_Test_Runnable+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6080:	6f 81       	ldd	r22, Y+7	; 0x07
    6082:	78 85       	ldd	r23, Y+8	; 0x08
    6084:	89 85       	ldd	r24, Y+9	; 0x09
    6086:	9a 85       	ldd	r25, Y+10	; 0x0a
    6088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	9e 83       	std	Y+6, r25	; 0x06
    6092:	8d 83       	std	Y+5, r24	; 0x05
    6094:	8d 81       	ldd	r24, Y+5	; 0x05
    6096:	9e 81       	ldd	r25, Y+6	; 0x06
    6098:	9a 83       	std	Y+2, r25	; 0x02
    609a:	89 83       	std	Y+1, r24	; 0x01
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	9a 81       	ldd	r25, Y+2	; 0x02
    60a0:	01 97       	sbiw	r24, 0x01	; 1
    60a2:	f1 f7       	brne	.-4      	; 0x60a0 <SPI_Test_Runnable+0xf6>
    60a4:	9a 83       	std	Y+2, r25	; 0x02
    60a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    60a8:	2e 96       	adiw	r28, 0x0e	; 14
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	cf 91       	pop	r28
    60b6:	df 91       	pop	r29
    60b8:	08 95       	ret

000060ba <I2C_init>:
#include "EEPROM/EEPROM_Interface.h"
#include "I2C_test.h"
#include "LCD/LCD_Interface.h"

void I2C_init()
{
    60ba:	df 93       	push	r29
    60bc:	cf 93       	push	r28
    60be:	cd b7       	in	r28, 0x3d	; 61
    60c0:	de b7       	in	r29, 0x3e	; 62
	EEPROM_init();
    60c2:	0e 94 31 22 	call	0x4462	; 0x4462 <EEPROM_init>
}
    60c6:	cf 91       	pop	r28
    60c8:	df 91       	pop	r29
    60ca:	08 95       	ret

000060cc <I2C_Runnable>:


void I2C_Runnable()
{
    60cc:	df 93       	push	r29
    60ce:	cf 93       	push	r28
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
    60d4:	c8 55       	subi	r28, 0x58	; 88
    60d6:	d0 40       	sbci	r29, 0x00	; 0
    60d8:	0f b6       	in	r0, 0x3f	; 63
    60da:	f8 94       	cli
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	cd bf       	out	0x3d, r28	; 61
	u8 arr[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39};
    60e2:	ce 01       	movw	r24, r28
    60e4:	04 96       	adiw	r24, 0x04	; 4
    60e6:	66 96       	adiw	r28, 0x16	; 22
    60e8:	9f af       	std	Y+63, r25	; 0x3f
    60ea:	8e af       	std	Y+62, r24	; 0x3e
    60ec:	66 97       	sbiw	r28, 0x16	; 22
    60ee:	e8 ef       	ldi	r30, 0xF8	; 248
    60f0:	f2 e0       	ldi	r31, 0x02	; 2
    60f2:	68 96       	adiw	r28, 0x18	; 24
    60f4:	ff af       	std	Y+63, r31	; 0x3f
    60f6:	ee af       	std	Y+62, r30	; 0x3e
    60f8:	68 97       	sbiw	r28, 0x18	; 24
    60fa:	f8 e2       	ldi	r31, 0x28	; 40
    60fc:	69 96       	adiw	r28, 0x19	; 25
    60fe:	ff af       	std	Y+63, r31	; 0x3f
    6100:	69 97       	sbiw	r28, 0x19	; 25
    6102:	68 96       	adiw	r28, 0x18	; 24
    6104:	ee ad       	ldd	r30, Y+62	; 0x3e
    6106:	ff ad       	ldd	r31, Y+63	; 0x3f
    6108:	68 97       	sbiw	r28, 0x18	; 24
    610a:	00 80       	ld	r0, Z
    610c:	68 96       	adiw	r28, 0x18	; 24
    610e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6110:	9f ad       	ldd	r25, Y+63	; 0x3f
    6112:	68 97       	sbiw	r28, 0x18	; 24
    6114:	01 96       	adiw	r24, 0x01	; 1
    6116:	68 96       	adiw	r28, 0x18	; 24
    6118:	9f af       	std	Y+63, r25	; 0x3f
    611a:	8e af       	std	Y+62, r24	; 0x3e
    611c:	68 97       	sbiw	r28, 0x18	; 24
    611e:	66 96       	adiw	r28, 0x16	; 22
    6120:	ee ad       	ldd	r30, Y+62	; 0x3e
    6122:	ff ad       	ldd	r31, Y+63	; 0x3f
    6124:	66 97       	sbiw	r28, 0x16	; 22
    6126:	00 82       	st	Z, r0
    6128:	66 96       	adiw	r28, 0x16	; 22
    612a:	8e ad       	ldd	r24, Y+62	; 0x3e
    612c:	9f ad       	ldd	r25, Y+63	; 0x3f
    612e:	66 97       	sbiw	r28, 0x16	; 22
    6130:	01 96       	adiw	r24, 0x01	; 1
    6132:	66 96       	adiw	r28, 0x16	; 22
    6134:	9f af       	std	Y+63, r25	; 0x3f
    6136:	8e af       	std	Y+62, r24	; 0x3e
    6138:	66 97       	sbiw	r28, 0x16	; 22
    613a:	69 96       	adiw	r28, 0x19	; 25
    613c:	9f ad       	ldd	r25, Y+63	; 0x3f
    613e:	69 97       	sbiw	r28, 0x19	; 25
    6140:	91 50       	subi	r25, 0x01	; 1
    6142:	69 96       	adiw	r28, 0x19	; 25
    6144:	9f af       	std	Y+63, r25	; 0x3f
    6146:	69 97       	sbiw	r28, 0x19	; 25
    6148:	69 96       	adiw	r28, 0x19	; 25
    614a:	ef ad       	ldd	r30, Y+63	; 0x3f
    614c:	69 97       	sbiw	r28, 0x19	; 25
    614e:	ee 23       	and	r30, r30
    6150:	c1 f6       	brne	.-80     	; 0x6102 <I2C_Runnable+0x36>
	u8 length = sizeof(arr)/sizeof(arr[0]);
    6152:	88 e2       	ldi	r24, 0x28	; 40
    6154:	8b 83       	std	Y+3, r24	; 0x03
	u8  arr2[40];
	u16 add=0x0A;
    6156:	8a e0       	ldi	r24, 0x0A	; 10
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	9a 83       	std	Y+2, r25	; 0x02
    615c:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_WritePage(add,arr,length);
    615e:	89 81       	ldd	r24, Y+1	; 0x01
    6160:	9a 81       	ldd	r25, Y+2	; 0x02
    6162:	9e 01       	movw	r18, r28
    6164:	2c 5f       	subi	r18, 0xFC	; 252
    6166:	3f 4f       	sbci	r19, 0xFF	; 255
    6168:	b9 01       	movw	r22, r18
    616a:	4b 81       	ldd	r20, Y+3	; 0x03
    616c:	0e 94 79 23 	call	0x46f2	; 0x46f2 <EEPROM_WritePage>
	EEPROM_ReadSeq(add,arr2,length);
    6170:	89 81       	ldd	r24, Y+1	; 0x01
    6172:	9a 81       	ldd	r25, Y+2	; 0x02
    6174:	9e 01       	movw	r18, r28
    6176:	24 5d       	subi	r18, 0xD4	; 212
    6178:	3f 4f       	sbci	r19, 0xFF	; 255
    617a:	b9 01       	movw	r22, r18
    617c:	4b 81       	ldd	r20, Y+3	; 0x03
    617e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <EEPROM_ReadSeq>
}
    6182:	c8 5a       	subi	r28, 0xA8	; 168
    6184:	df 4f       	sbci	r29, 0xFF	; 255
    6186:	0f b6       	in	r0, 0x3f	; 63
    6188:	f8 94       	cli
    618a:	de bf       	out	0x3e, r29	; 62
    618c:	0f be       	out	0x3f, r0	; 63
    618e:	cd bf       	out	0x3d, r28	; 61
    6190:	cf 91       	pop	r28
    6192:	df 91       	pop	r29
    6194:	08 95       	ret

00006196 <DCM_init>:
#include "DIO/DIO_Inteface.h"
#include "DC_Motor/DC_Motor_Interface.h"
#include "DCM.h"

void DCM_init()
{
    6196:	df 93       	push	r29
    6198:	cf 93       	push	r28
    619a:	cd b7       	in	r28, 0x3d	; 61
    619c:	de b7       	in	r29, 0x3e	; 62
	MOTOR_Init();
    619e:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <MOTOR_Init>
}
    61a2:	cf 91       	pop	r28
    61a4:	df 91       	pop	r29
    61a6:	08 95       	ret

000061a8 <DCM_runnable>:

void DCM_runnable()
{
    61a8:	df 93       	push	r29
    61aa:	cf 93       	push	r28
    61ac:	cd b7       	in	r28, 0x3d	; 61
    61ae:	de b7       	in	r29, 0x3e	; 62
	//MOTOR_CW(M1);
	MOTOR_Speed(50);
    61b0:	82 e3       	ldi	r24, 0x32	; 50
    61b2:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <MOTOR_Speed>
}
    61b6:	cf 91       	pop	r28
    61b8:	df 91       	pop	r29
    61ba:	08 95       	ret

000061bc <Converter_init>:

static u8 k,num=0,cf=0,ct=0,f=0,b[8];
static u8 chars[6]={'A','B','C','D','E','F'};
static s8 bi=0,z=0;
void Converter_init()
{
    61bc:	df 93       	push	r29
    61be:	cf 93       	push	r28
    61c0:	cd b7       	in	r28, 0x3d	; 61
    61c2:	de b7       	in	r29, 0x3e	; 62
    61c4:	2e 97       	sbiw	r28, 0x0e	; 14
    61c6:	0f b6       	in	r0, 0x3f	; 63
    61c8:	f8 94       	cli
    61ca:	de bf       	out	0x3e, r29	; 62
    61cc:	0f be       	out	0x3f, r0	; 63
    61ce:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteString("  Converter by");
    61d0:	8a ea       	ldi	r24, 0xAA	; 170
    61d2:	91 e0       	ldi	r25, 0x01	; 1
    61d4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
	LCD_SETCURSOR(LINE2,1);
    61d8:	80 e4       	ldi	r24, 0x40	; 64
    61da:	61 e0       	ldi	r22, 0x01	; 1
    61dc:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	LCD_WriteString("Mohamed AlSoly");
    61e0:	89 eb       	ldi	r24, 0xB9	; 185
    61e2:	91 e0       	ldi	r25, 0x01	; 1
    61e4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    61e8:	80 e0       	ldi	r24, 0x00	; 0
    61ea:	90 e8       	ldi	r25, 0x80	; 128
    61ec:	ab eb       	ldi	r26, 0xBB	; 187
    61ee:	b4 e4       	ldi	r27, 0x44	; 68
    61f0:	8b 87       	std	Y+11, r24	; 0x0b
    61f2:	9c 87       	std	Y+12, r25	; 0x0c
    61f4:	ad 87       	std	Y+13, r26	; 0x0d
    61f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    61fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    61fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    61fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6200:	20 e0       	ldi	r18, 0x00	; 0
    6202:	30 e0       	ldi	r19, 0x00	; 0
    6204:	4a ef       	ldi	r20, 0xFA	; 250
    6206:	54 e4       	ldi	r21, 0x44	; 68
    6208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    620c:	dc 01       	movw	r26, r24
    620e:	cb 01       	movw	r24, r22
    6210:	8f 83       	std	Y+7, r24	; 0x07
    6212:	98 87       	std	Y+8, r25	; 0x08
    6214:	a9 87       	std	Y+9, r26	; 0x09
    6216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6218:	6f 81       	ldd	r22, Y+7	; 0x07
    621a:	78 85       	ldd	r23, Y+8	; 0x08
    621c:	89 85       	ldd	r24, Y+9	; 0x09
    621e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6220:	20 e0       	ldi	r18, 0x00	; 0
    6222:	30 e0       	ldi	r19, 0x00	; 0
    6224:	40 e8       	ldi	r20, 0x80	; 128
    6226:	5f e3       	ldi	r21, 0x3F	; 63
    6228:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    622c:	88 23       	and	r24, r24
    622e:	2c f4       	brge	.+10     	; 0x623a <Converter_init+0x7e>
		__ticks = 1;
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	90 e0       	ldi	r25, 0x00	; 0
    6234:	9e 83       	std	Y+6, r25	; 0x06
    6236:	8d 83       	std	Y+5, r24	; 0x05
    6238:	3f c0       	rjmp	.+126    	; 0x62b8 <Converter_init+0xfc>
	else if (__tmp > 65535)
    623a:	6f 81       	ldd	r22, Y+7	; 0x07
    623c:	78 85       	ldd	r23, Y+8	; 0x08
    623e:	89 85       	ldd	r24, Y+9	; 0x09
    6240:	9a 85       	ldd	r25, Y+10	; 0x0a
    6242:	20 e0       	ldi	r18, 0x00	; 0
    6244:	3f ef       	ldi	r19, 0xFF	; 255
    6246:	4f e7       	ldi	r20, 0x7F	; 127
    6248:	57 e4       	ldi	r21, 0x47	; 71
    624a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    624e:	18 16       	cp	r1, r24
    6250:	4c f5       	brge	.+82     	; 0x62a4 <Converter_init+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6252:	6b 85       	ldd	r22, Y+11	; 0x0b
    6254:	7c 85       	ldd	r23, Y+12	; 0x0c
    6256:	8d 85       	ldd	r24, Y+13	; 0x0d
    6258:	9e 85       	ldd	r25, Y+14	; 0x0e
    625a:	20 e0       	ldi	r18, 0x00	; 0
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	40 e2       	ldi	r20, 0x20	; 32
    6260:	51 e4       	ldi	r21, 0x41	; 65
    6262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6266:	dc 01       	movw	r26, r24
    6268:	cb 01       	movw	r24, r22
    626a:	bc 01       	movw	r22, r24
    626c:	cd 01       	movw	r24, r26
    626e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6272:	dc 01       	movw	r26, r24
    6274:	cb 01       	movw	r24, r22
    6276:	9e 83       	std	Y+6, r25	; 0x06
    6278:	8d 83       	std	Y+5, r24	; 0x05
    627a:	0f c0       	rjmp	.+30     	; 0x629a <Converter_init+0xde>
    627c:	88 ec       	ldi	r24, 0xC8	; 200
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	9c 83       	std	Y+4, r25	; 0x04
    6282:	8b 83       	std	Y+3, r24	; 0x03
    6284:	8b 81       	ldd	r24, Y+3	; 0x03
    6286:	9c 81       	ldd	r25, Y+4	; 0x04
    6288:	01 97       	sbiw	r24, 0x01	; 1
    628a:	f1 f7       	brne	.-4      	; 0x6288 <Converter_init+0xcc>
    628c:	9c 83       	std	Y+4, r25	; 0x04
    628e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6290:	8d 81       	ldd	r24, Y+5	; 0x05
    6292:	9e 81       	ldd	r25, Y+6	; 0x06
    6294:	01 97       	sbiw	r24, 0x01	; 1
    6296:	9e 83       	std	Y+6, r25	; 0x06
    6298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    629a:	8d 81       	ldd	r24, Y+5	; 0x05
    629c:	9e 81       	ldd	r25, Y+6	; 0x06
    629e:	00 97       	sbiw	r24, 0x00	; 0
    62a0:	69 f7       	brne	.-38     	; 0x627c <Converter_init+0xc0>
    62a2:	14 c0       	rjmp	.+40     	; 0x62cc <Converter_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62a4:	6f 81       	ldd	r22, Y+7	; 0x07
    62a6:	78 85       	ldd	r23, Y+8	; 0x08
    62a8:	89 85       	ldd	r24, Y+9	; 0x09
    62aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	9e 83       	std	Y+6, r25	; 0x06
    62b6:	8d 83       	std	Y+5, r24	; 0x05
    62b8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ba:	9e 81       	ldd	r25, Y+6	; 0x06
    62bc:	9a 83       	std	Y+2, r25	; 0x02
    62be:	89 83       	std	Y+1, r24	; 0x01
    62c0:	89 81       	ldd	r24, Y+1	; 0x01
    62c2:	9a 81       	ldd	r25, Y+2	; 0x02
    62c4:	01 97       	sbiw	r24, 0x01	; 1
    62c6:	f1 f7       	brne	.-4      	; 0x62c4 <Converter_init+0x108>
    62c8:	9a 83       	std	Y+2, r25	; 0x02
    62ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_Clear();
    62cc:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
}
    62d0:	2e 96       	adiw	r28, 0x0e	; 14
    62d2:	0f b6       	in	r0, 0x3f	; 63
    62d4:	f8 94       	cli
    62d6:	de bf       	out	0x3e, r29	; 62
    62d8:	0f be       	out	0x3f, r0	; 63
    62da:	cd bf       	out	0x3d, r28	; 61
    62dc:	cf 91       	pop	r28
    62de:	df 91       	pop	r29
    62e0:	08 95       	ret

000062e2 <Converter_Runnable>:

void Converter_Runnable()
{
    62e2:	df 93       	push	r29
    62e4:	cf 93       	push	r28
    62e6:	00 d0       	rcall	.+0      	; 0x62e8 <Converter_Runnable+0x6>
    62e8:	0f 92       	push	r0
    62ea:	cd b7       	in	r28, 0x3d	; 61
    62ec:	de b7       	in	r29, 0x3e	; 62
	if (f==0)
    62ee:	80 91 3e 03 	lds	r24, 0x033E
    62f2:	88 23       	and	r24, r24
    62f4:	91 f4       	brne	.+36     	; 0x631a <Converter_Runnable+0x38>
	{
		LCD_Clear();
    62f6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Convert from ...");
    62fa:	88 ec       	ldi	r24, 0xC8	; 200
    62fc:	91 e0       	ldi	r25, 0x01	; 1
    62fe:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		LCD_SETCURSOR(LINE2,0);
    6302:	80 e4       	ldi	r24, 0x40	; 64
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
		LCD_WriteString("1-Dec 2-Bin 3-Hx");
    630a:	89 ed       	ldi	r24, 0xD9	; 217
    630c:	91 e0       	ldi	r25, 0x01	; 1
    630e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		f=1;
    6312:	81 e0       	ldi	r24, 0x01	; 1
    6314:	80 93 3e 03 	sts	0x033E, r24
    6318:	27 c0       	rjmp	.+78     	; 0x6368 <Converter_Runnable+0x86>
	}
	else if (f==2)
    631a:	80 91 3e 03 	lds	r24, 0x033E
    631e:	82 30       	cpi	r24, 0x02	; 2
    6320:	19 f5       	brne	.+70     	; 0x6368 <Converter_Runnable+0x86>
	{
		LCD_Clear();
    6322:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Convert from ");
    6326:	8a ee       	ldi	r24, 0xEA	; 234
    6328:	91 e0       	ldi	r25, 0x01	; 1
    632a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		if (cf==DEC)
    632e:	80 91 3c 03 	lds	r24, 0x033C
    6332:	81 30       	cpi	r24, 0x01	; 1
    6334:	29 f4       	brne	.+10     	; 0x6340 <Converter_Runnable+0x5e>
		{
			LCD_WriteString("DecTo  1-Bin 2-Hex");
    6336:	88 ef       	ldi	r24, 0xF8	; 248
    6338:	91 e0       	ldi	r25, 0x01	; 1
    633a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    633e:	11 c0       	rjmp	.+34     	; 0x6362 <Converter_Runnable+0x80>
		}
		else if (cf==BIN)
    6340:	80 91 3c 03 	lds	r24, 0x033C
    6344:	82 30       	cpi	r24, 0x02	; 2
    6346:	29 f4       	brne	.+10     	; 0x6352 <Converter_Runnable+0x70>
		{
			LCD_WriteString("BinTo  1-Dec 2-Hex");
    6348:	8b e0       	ldi	r24, 0x0B	; 11
    634a:	92 e0       	ldi	r25, 0x02	; 2
    634c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    6350:	08 c0       	rjmp	.+16     	; 0x6362 <Converter_Runnable+0x80>
		}
		else if (cf==HEX)
    6352:	80 91 3c 03 	lds	r24, 0x033C
    6356:	83 30       	cpi	r24, 0x03	; 3
    6358:	21 f4       	brne	.+8      	; 0x6362 <Converter_Runnable+0x80>
		{
			LCD_WriteString("HexTo  1-Dec 2-Bin");
    635a:	8e e1       	ldi	r24, 0x1E	; 30
    635c:	92 e0       	ldi	r25, 0x02	; 2
    635e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		}
		f=3;
    6362:	83 e0       	ldi	r24, 0x03	; 3
    6364:	80 93 3e 03 	sts	0x033E, r24
	}
	
	k=KeyPad_get();
    6368:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    636c:	80 93 41 03 	sts	0x0341, r24
	if ((((k=='A')||(k>='0'&&k<='9'))&&f==6)||f==4)
    6370:	80 91 41 03 	lds	r24, 0x0341
    6374:	81 34       	cpi	r24, 0x41	; 65
    6376:	41 f0       	breq	.+16     	; 0x6388 <Converter_Runnable+0xa6>
    6378:	80 91 41 03 	lds	r24, 0x0341
    637c:	80 33       	cpi	r24, 0x30	; 48
    637e:	40 f0       	brcs	.+16     	; 0x6390 <Converter_Runnable+0xae>
    6380:	80 91 41 03 	lds	r24, 0x0341
    6384:	8a 33       	cpi	r24, 0x3A	; 58
    6386:	20 f4       	brcc	.+8      	; 0x6390 <Converter_Runnable+0xae>
    6388:	80 91 3e 03 	lds	r24, 0x033E
    638c:	86 30       	cpi	r24, 0x06	; 6
    638e:	21 f0       	breq	.+8      	; 0x6398 <Converter_Runnable+0xb6>
    6390:	80 91 3e 03 	lds	r24, 0x033E
    6394:	84 30       	cpi	r24, 0x04	; 4
    6396:	a1 f5       	brne	.+104    	; 0x6400 <Converter_Runnable+0x11e>
	{
		f=3;
    6398:	83 e0       	ldi	r24, 0x03	; 3
    639a:	80 93 3e 03 	sts	0x033E, r24
		LCD_Clear();
    639e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		for (u8 i=cf;f<5; i=ct)
    63a2:	80 91 3c 03 	lds	r24, 0x033C
    63a6:	89 83       	std	Y+1, r24	; 0x01
    63a8:	23 c0       	rjmp	.+70     	; 0x63f0 <Converter_Runnable+0x10e>
		{
			if (i==DEC)
    63aa:	89 81       	ldd	r24, Y+1	; 0x01
    63ac:	81 30       	cpi	r24, 0x01	; 1
    63ae:	29 f4       	brne	.+10     	; 0x63ba <Converter_Runnable+0xd8>
			{
				LCD_WriteString("Dec:");
    63b0:	81 e3       	ldi	r24, 0x31	; 49
    63b2:	92 e0       	ldi	r25, 0x02	; 2
    63b4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    63b8:	0f c0       	rjmp	.+30     	; 0x63d8 <Converter_Runnable+0xf6>
			}
			else if (i==BIN)
    63ba:	89 81       	ldd	r24, Y+1	; 0x01
    63bc:	82 30       	cpi	r24, 0x02	; 2
    63be:	29 f4       	brne	.+10     	; 0x63ca <Converter_Runnable+0xe8>
			{
				LCD_WriteString("Bin:");
    63c0:	86 e3       	ldi	r24, 0x36	; 54
    63c2:	92 e0       	ldi	r25, 0x02	; 2
    63c4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    63c8:	07 c0       	rjmp	.+14     	; 0x63d8 <Converter_Runnable+0xf6>
			}
			else if (i==HEX)
    63ca:	89 81       	ldd	r24, Y+1	; 0x01
    63cc:	83 30       	cpi	r24, 0x03	; 3
    63ce:	21 f4       	brne	.+8      	; 0x63d8 <Converter_Runnable+0xf6>
			{
				LCD_WriteString("Hex:");
    63d0:	8b e3       	ldi	r24, 0x3B	; 59
    63d2:	92 e0       	ldi	r25, 0x02	; 2
    63d4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
			}
			f++;
    63d8:	80 91 3e 03 	lds	r24, 0x033E
    63dc:	8f 5f       	subi	r24, 0xFF	; 255
    63de:	80 93 3e 03 	sts	0x033E, r24
			LCD_SETCURSOR(LINE2,0);
    63e2:	80 e4       	ldi	r24, 0x40	; 64
    63e4:	60 e0       	ldi	r22, 0x00	; 0
    63e6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	k=KeyPad_get();
	if ((((k=='A')||(k>='0'&&k<='9'))&&f==6)||f==4)
	{
		f=3;
		LCD_Clear();
		for (u8 i=cf;f<5; i=ct)
    63ea:	80 91 3d 03 	lds	r24, 0x033D
    63ee:	89 83       	std	Y+1, r24	; 0x01
    63f0:	80 91 3e 03 	lds	r24, 0x033E
    63f4:	85 30       	cpi	r24, 0x05	; 5
    63f6:	c8 f2       	brcs	.-78     	; 0x63aa <Converter_Runnable+0xc8>
				LCD_WriteString("Hex:");
			}
			f++;
			LCD_SETCURSOR(LINE2,0);
		}
		LCD_SETCURSOR(LINE1,4);
    63f8:	80 e0       	ldi	r24, 0x00	; 0
    63fa:	64 e0       	ldi	r22, 0x04	; 4
    63fc:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	}
	
	if (k!=NO_KEY)
    6400:	80 91 41 03 	lds	r24, 0x0341
    6404:	84 35       	cpi	r24, 0x54	; 84
    6406:	09 f4       	brne	.+2      	; 0x640a <Converter_Runnable+0x128>
    6408:	8d c0       	rjmp	.+282    	; 0x6524 <Converter_Runnable+0x242>
	{
		if (k=='N')
    640a:	80 91 41 03 	lds	r24, 0x0341
    640e:	8e 34       	cpi	r24, 0x4E	; 78
    6410:	11 f4       	brne	.+4      	; 0x6416 <Converter_Runnable+0x134>
		{
			f=0;
    6412:	10 92 3e 03 	sts	0x033E, r1
		}
		switch (f)
    6416:	80 91 3e 03 	lds	r24, 0x033E
    641a:	28 2f       	mov	r18, r24
    641c:	30 e0       	ldi	r19, 0x00	; 0
    641e:	3b 83       	std	Y+3, r19	; 0x03
    6420:	2a 83       	std	Y+2, r18	; 0x02
    6422:	8a 81       	ldd	r24, Y+2	; 0x02
    6424:	9b 81       	ldd	r25, Y+3	; 0x03
    6426:	83 30       	cpi	r24, 0x03	; 3
    6428:	91 05       	cpc	r25, r1
    642a:	c9 f1       	breq	.+114    	; 0x649e <Converter_Runnable+0x1bc>
    642c:	2a 81       	ldd	r18, Y+2	; 0x02
    642e:	3b 81       	ldd	r19, Y+3	; 0x03
    6430:	25 30       	cpi	r18, 0x05	; 5
    6432:	31 05       	cpc	r19, r1
    6434:	09 f4       	brne	.+2      	; 0x6438 <Converter_Runnable+0x156>
    6436:	6d c0       	rjmp	.+218    	; 0x6512 <Converter_Runnable+0x230>
    6438:	8a 81       	ldd	r24, Y+2	; 0x02
    643a:	9b 81       	ldd	r25, Y+3	; 0x03
    643c:	81 30       	cpi	r24, 0x01	; 1
    643e:	91 05       	cpc	r25, r1
    6440:	09 f0       	breq	.+2      	; 0x6444 <Converter_Runnable+0x162>
    6442:	70 c0       	rjmp	.+224    	; 0x6524 <Converter_Runnable+0x242>
		{
			case 1:
			if(k=='1') {cf=DEC;}
    6444:	80 91 41 03 	lds	r24, 0x0341
    6448:	81 33       	cpi	r24, 0x31	; 49
    644a:	21 f4       	brne	.+8      	; 0x6454 <Converter_Runnable+0x172>
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	80 93 3c 03 	sts	0x033C, r24
    6452:	0f c0       	rjmp	.+30     	; 0x6472 <Converter_Runnable+0x190>
			else if(k=='2') {cf=BIN;}
    6454:	80 91 41 03 	lds	r24, 0x0341
    6458:	82 33       	cpi	r24, 0x32	; 50
    645a:	21 f4       	brne	.+8      	; 0x6464 <Converter_Runnable+0x182>
    645c:	82 e0       	ldi	r24, 0x02	; 2
    645e:	80 93 3c 03 	sts	0x033C, r24
    6462:	07 c0       	rjmp	.+14     	; 0x6472 <Converter_Runnable+0x190>
			else if(k=='3') {cf=HEX;}
    6464:	80 91 41 03 	lds	r24, 0x0341
    6468:	83 33       	cpi	r24, 0x33	; 51
    646a:	19 f4       	brne	.+6      	; 0x6472 <Converter_Runnable+0x190>
    646c:	83 e0       	ldi	r24, 0x03	; 3
    646e:	80 93 3c 03 	sts	0x033C, r24
			f=2;
    6472:	82 e0       	ldi	r24, 0x02	; 2
    6474:	80 93 3e 03 	sts	0x033E, r24
			if((k!='1')&&(k!='2')&&(k!='3')) {f=1;}
    6478:	80 91 41 03 	lds	r24, 0x0341
    647c:	81 33       	cpi	r24, 0x31	; 49
    647e:	09 f4       	brne	.+2      	; 0x6482 <Converter_Runnable+0x1a0>
    6480:	51 c0       	rjmp	.+162    	; 0x6524 <Converter_Runnable+0x242>
    6482:	80 91 41 03 	lds	r24, 0x0341
    6486:	82 33       	cpi	r24, 0x32	; 50
    6488:	09 f4       	brne	.+2      	; 0x648c <Converter_Runnable+0x1aa>
    648a:	4c c0       	rjmp	.+152    	; 0x6524 <Converter_Runnable+0x242>
    648c:	80 91 41 03 	lds	r24, 0x0341
    6490:	83 33       	cpi	r24, 0x33	; 51
    6492:	09 f4       	brne	.+2      	; 0x6496 <Converter_Runnable+0x1b4>
    6494:	47 c0       	rjmp	.+142    	; 0x6524 <Converter_Runnable+0x242>
    6496:	81 e0       	ldi	r24, 0x01	; 1
    6498:	80 93 3e 03 	sts	0x033E, r24
    649c:	43 c0       	rjmp	.+134    	; 0x6524 <Converter_Runnable+0x242>
			break;
			
			case 3:
			if(k=='1'&&cf!=DEC) ct=DEC;
    649e:	80 91 41 03 	lds	r24, 0x0341
    64a2:	81 33       	cpi	r24, 0x31	; 49
    64a4:	41 f4       	brne	.+16     	; 0x64b6 <Converter_Runnable+0x1d4>
    64a6:	80 91 3c 03 	lds	r24, 0x033C
    64aa:	81 30       	cpi	r24, 0x01	; 1
    64ac:	21 f0       	breq	.+8      	; 0x64b6 <Converter_Runnable+0x1d4>
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	80 93 3d 03 	sts	0x033D, r24
    64b4:	1f c0       	rjmp	.+62     	; 0x64f4 <Converter_Runnable+0x212>
			else if(k=='2'&&cf!=HEX) ct=HEX;
    64b6:	80 91 41 03 	lds	r24, 0x0341
    64ba:	82 33       	cpi	r24, 0x32	; 50
    64bc:	41 f4       	brne	.+16     	; 0x64ce <Converter_Runnable+0x1ec>
    64be:	80 91 3c 03 	lds	r24, 0x033C
    64c2:	83 30       	cpi	r24, 0x03	; 3
    64c4:	21 f0       	breq	.+8      	; 0x64ce <Converter_Runnable+0x1ec>
    64c6:	83 e0       	ldi	r24, 0x03	; 3
    64c8:	80 93 3d 03 	sts	0x033D, r24
    64cc:	13 c0       	rjmp	.+38     	; 0x64f4 <Converter_Runnable+0x212>
			else if((k=='1'&&cf==DEC)||(k=='2'&&cf==HEX)) ct=BIN;
    64ce:	80 91 41 03 	lds	r24, 0x0341
    64d2:	81 33       	cpi	r24, 0x31	; 49
    64d4:	21 f4       	brne	.+8      	; 0x64de <Converter_Runnable+0x1fc>
    64d6:	80 91 3c 03 	lds	r24, 0x033C
    64da:	81 30       	cpi	r24, 0x01	; 1
    64dc:	41 f0       	breq	.+16     	; 0x64ee <Converter_Runnable+0x20c>
    64de:	80 91 41 03 	lds	r24, 0x0341
    64e2:	82 33       	cpi	r24, 0x32	; 50
    64e4:	39 f4       	brne	.+14     	; 0x64f4 <Converter_Runnable+0x212>
    64e6:	80 91 3c 03 	lds	r24, 0x033C
    64ea:	83 30       	cpi	r24, 0x03	; 3
    64ec:	19 f4       	brne	.+6      	; 0x64f4 <Converter_Runnable+0x212>
    64ee:	82 e0       	ldi	r24, 0x02	; 2
    64f0:	80 93 3d 03 	sts	0x033D, r24
			f=4;
    64f4:	84 e0       	ldi	r24, 0x04	; 4
    64f6:	80 93 3e 03 	sts	0x033E, r24
			if(k!='1'&&k!='2') f=3;
    64fa:	80 91 41 03 	lds	r24, 0x0341
    64fe:	81 33       	cpi	r24, 0x31	; 49
    6500:	89 f0       	breq	.+34     	; 0x6524 <Converter_Runnable+0x242>
    6502:	80 91 41 03 	lds	r24, 0x0341
    6506:	82 33       	cpi	r24, 0x32	; 50
    6508:	69 f0       	breq	.+26     	; 0x6524 <Converter_Runnable+0x242>
    650a:	83 e0       	ldi	r24, 0x03	; 3
    650c:	80 93 3e 03 	sts	0x033E, r24
    6510:	09 c0       	rjmp	.+18     	; 0x6524 <Converter_Runnable+0x242>
			break;
			
			case 5:
			if (k!='=')
    6512:	80 91 41 03 	lds	r24, 0x0341
    6516:	8d 33       	cpi	r24, 0x3D	; 61
    6518:	19 f0       	breq	.+6      	; 0x6520 <Converter_Runnable+0x23e>
			{
				convert();
    651a:	0e 94 98 32 	call	0x6530	; 0x6530 <convert>
    651e:	02 c0       	rjmp	.+4      	; 0x6524 <Converter_Runnable+0x242>
			}
			else
			{
				result();				
    6520:	0e 94 89 33 	call	0x6712	; 0x6712 <result>
			}
			break;
		}
	}
}
    6524:	0f 90       	pop	r0
    6526:	0f 90       	pop	r0
    6528:	0f 90       	pop	r0
    652a:	cf 91       	pop	r28
    652c:	df 91       	pop	r29
    652e:	08 95       	ret

00006530 <convert>:

void convert()
{
    6530:	df 93       	push	r29
    6532:	cf 93       	push	r28
    6534:	cd b7       	in	r28, 0x3d	; 61
    6536:	de b7       	in	r29, 0x3e	; 62
	if (cf==DEC)
    6538:	80 91 3c 03 	lds	r24, 0x033C
    653c:	81 30       	cpi	r24, 0x01	; 1
    653e:	b1 f4       	brne	.+44     	; 0x656c <convert+0x3c>
	{
		num=num*10+(k-'0');
    6540:	80 91 3b 03 	lds	r24, 0x033B
    6544:	88 2f       	mov	r24, r24
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	9c 01       	movw	r18, r24
    654a:	22 0f       	add	r18, r18
    654c:	33 1f       	adc	r19, r19
    654e:	c9 01       	movw	r24, r18
    6550:	88 0f       	add	r24, r24
    6552:	99 1f       	adc	r25, r25
    6554:	88 0f       	add	r24, r24
    6556:	99 1f       	adc	r25, r25
    6558:	82 0f       	add	r24, r18
    655a:	93 1f       	adc	r25, r19
    655c:	98 2f       	mov	r25, r24
    655e:	80 91 41 03 	lds	r24, 0x0341
    6562:	89 0f       	add	r24, r25
    6564:	80 53       	subi	r24, 0x30	; 48
    6566:	80 93 3b 03 	sts	0x033B, r24
    656a:	c8 c0       	rjmp	.+400    	; 0x66fc <convert+0x1cc>
	}
	else if (cf==BIN)
    656c:	80 91 3c 03 	lds	r24, 0x033C
    6570:	82 30       	cpi	r24, 0x02	; 2
    6572:	99 f4       	brne	.+38     	; 0x659a <convert+0x6a>
	{
		b[bi]=(k-'0');
    6574:	80 91 3f 03 	lds	r24, 0x033F
    6578:	28 2f       	mov	r18, r24
    657a:	33 27       	eor	r19, r19
    657c:	27 fd       	sbrc	r18, 7
    657e:	30 95       	com	r19
    6580:	80 91 41 03 	lds	r24, 0x0341
    6584:	80 53       	subi	r24, 0x30	; 48
    6586:	f9 01       	movw	r30, r18
    6588:	ee 5b       	subi	r30, 0xBE	; 190
    658a:	fc 4f       	sbci	r31, 0xFC	; 252
    658c:	80 83       	st	Z, r24
		bi++;
    658e:	80 91 3f 03 	lds	r24, 0x033F
    6592:	8f 5f       	subi	r24, 0xFF	; 255
    6594:	80 93 3f 03 	sts	0x033F, r24
    6598:	b1 c0       	rjmp	.+354    	; 0x66fc <convert+0x1cc>
	}
	else
	{
		if (k>='0'&&k<='9')
    659a:	80 91 41 03 	lds	r24, 0x0341
    659e:	80 33       	cpi	r24, 0x30	; 48
    65a0:	90 f0       	brcs	.+36     	; 0x65c6 <convert+0x96>
    65a2:	80 91 41 03 	lds	r24, 0x0341
    65a6:	8a 33       	cpi	r24, 0x3A	; 58
    65a8:	70 f4       	brcc	.+28     	; 0x65c6 <convert+0x96>
		{
			b[bi]=(k-'0');
    65aa:	80 91 3f 03 	lds	r24, 0x033F
    65ae:	28 2f       	mov	r18, r24
    65b0:	33 27       	eor	r19, r19
    65b2:	27 fd       	sbrc	r18, 7
    65b4:	30 95       	com	r19
    65b6:	80 91 41 03 	lds	r24, 0x0341
    65ba:	80 53       	subi	r24, 0x30	; 48
    65bc:	f9 01       	movw	r30, r18
    65be:	ee 5b       	subi	r30, 0xBE	; 190
    65c0:	fc 4f       	sbci	r31, 0xFC	; 252
    65c2:	80 83       	st	Z, r24
    65c4:	96 c0       	rjmp	.+300    	; 0x66f2 <convert+0x1c2>
		}
		else if(k=='A')
    65c6:	80 91 41 03 	lds	r24, 0x0341
    65ca:	81 34       	cpi	r24, 0x41	; 65
    65cc:	71 f4       	brne	.+28     	; 0x65ea <convert+0xba>
		{
			b[bi]=(k-'7');
    65ce:	80 91 3f 03 	lds	r24, 0x033F
    65d2:	28 2f       	mov	r18, r24
    65d4:	33 27       	eor	r19, r19
    65d6:	27 fd       	sbrc	r18, 7
    65d8:	30 95       	com	r19
    65da:	80 91 41 03 	lds	r24, 0x0341
    65de:	87 53       	subi	r24, 0x37	; 55
    65e0:	f9 01       	movw	r30, r18
    65e2:	ee 5b       	subi	r30, 0xBE	; 190
    65e4:	fc 4f       	sbci	r31, 0xFC	; 252
    65e6:	80 83       	st	Z, r24
    65e8:	84 c0       	rjmp	.+264    	; 0x66f2 <convert+0x1c2>
		}
		else if(k=='U')
    65ea:	80 91 41 03 	lds	r24, 0x0341
    65ee:	85 35       	cpi	r24, 0x55	; 85
    65f0:	c1 f5       	brne	.+112    	; 0x6662 <convert+0x132>
		{
			bi--;
    65f2:	80 91 3f 03 	lds	r24, 0x033F
    65f6:	81 50       	subi	r24, 0x01	; 1
    65f8:	80 93 3f 03 	sts	0x033F, r24
			z++;
    65fc:	80 91 40 03 	lds	r24, 0x0340
    6600:	8f 5f       	subi	r24, 0xFF	; 255
    6602:	80 93 40 03 	sts	0x0340, r24
			if (z==6){z=0;}
    6606:	80 91 40 03 	lds	r24, 0x0340
    660a:	86 30       	cpi	r24, 0x06	; 6
    660c:	11 f4       	brne	.+4      	; 0x6612 <convert+0xe2>
    660e:	10 92 40 03 	sts	0x0340, r1
			b[bi]=(chars[z]-'7');
    6612:	80 91 3f 03 	lds	r24, 0x033F
    6616:	28 2f       	mov	r18, r24
    6618:	33 27       	eor	r19, r19
    661a:	27 fd       	sbrc	r18, 7
    661c:	30 95       	com	r19
    661e:	80 91 40 03 	lds	r24, 0x0340
    6622:	99 27       	eor	r25, r25
    6624:	87 fd       	sbrc	r24, 7
    6626:	90 95       	com	r25
    6628:	fc 01       	movw	r30, r24
    662a:	ee 56       	subi	r30, 0x6E	; 110
    662c:	fd 4f       	sbci	r31, 0xFD	; 253
    662e:	80 81       	ld	r24, Z
    6630:	87 53       	subi	r24, 0x37	; 55
    6632:	f9 01       	movw	r30, r18
    6634:	ee 5b       	subi	r30, 0xBE	; 190
    6636:	fc 4f       	sbci	r31, 0xFC	; 252
    6638:	80 83       	st	Z, r24
			k=chars[z];
    663a:	80 91 40 03 	lds	r24, 0x0340
    663e:	99 27       	eor	r25, r25
    6640:	87 fd       	sbrc	r24, 7
    6642:	90 95       	com	r25
    6644:	fc 01       	movw	r30, r24
    6646:	ee 56       	subi	r30, 0x6E	; 110
    6648:	fd 4f       	sbci	r31, 0xFD	; 253
    664a:	80 81       	ld	r24, Z
    664c:	80 93 41 03 	sts	0x0341, r24
			LCD_SETCURSOR(LINE1,cursor_cell-1);
    6650:	80 91 35 03 	lds	r24, 0x0335
    6654:	98 2f       	mov	r25, r24
    6656:	91 50       	subi	r25, 0x01	; 1
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	69 2f       	mov	r22, r25
    665c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    6660:	48 c0       	rjmp	.+144    	; 0x66f2 <convert+0x1c2>
		}
		else if(k=='D')
    6662:	80 91 41 03 	lds	r24, 0x0341
    6666:	84 34       	cpi	r24, 0x44	; 68
    6668:	c9 f5       	brne	.+114    	; 0x66dc <convert+0x1ac>
		{
			bi--;
    666a:	80 91 3f 03 	lds	r24, 0x033F
    666e:	81 50       	subi	r24, 0x01	; 1
    6670:	80 93 3f 03 	sts	0x033F, r24
			z--;
    6674:	80 91 40 03 	lds	r24, 0x0340
    6678:	81 50       	subi	r24, 0x01	; 1
    667a:	80 93 40 03 	sts	0x0340, r24
			if (z==-1){z=5;}
    667e:	80 91 40 03 	lds	r24, 0x0340
    6682:	8f 3f       	cpi	r24, 0xFF	; 255
    6684:	19 f4       	brne	.+6      	; 0x668c <convert+0x15c>
    6686:	85 e0       	ldi	r24, 0x05	; 5
    6688:	80 93 40 03 	sts	0x0340, r24
			b[bi]=(chars[z]-'7');
    668c:	80 91 3f 03 	lds	r24, 0x033F
    6690:	28 2f       	mov	r18, r24
    6692:	33 27       	eor	r19, r19
    6694:	27 fd       	sbrc	r18, 7
    6696:	30 95       	com	r19
    6698:	80 91 40 03 	lds	r24, 0x0340
    669c:	99 27       	eor	r25, r25
    669e:	87 fd       	sbrc	r24, 7
    66a0:	90 95       	com	r25
    66a2:	fc 01       	movw	r30, r24
    66a4:	ee 56       	subi	r30, 0x6E	; 110
    66a6:	fd 4f       	sbci	r31, 0xFD	; 253
    66a8:	80 81       	ld	r24, Z
    66aa:	87 53       	subi	r24, 0x37	; 55
    66ac:	f9 01       	movw	r30, r18
    66ae:	ee 5b       	subi	r30, 0xBE	; 190
    66b0:	fc 4f       	sbci	r31, 0xFC	; 252
    66b2:	80 83       	st	Z, r24
			k=chars[z];
    66b4:	80 91 40 03 	lds	r24, 0x0340
    66b8:	99 27       	eor	r25, r25
    66ba:	87 fd       	sbrc	r24, 7
    66bc:	90 95       	com	r25
    66be:	fc 01       	movw	r30, r24
    66c0:	ee 56       	subi	r30, 0x6E	; 110
    66c2:	fd 4f       	sbci	r31, 0xFD	; 253
    66c4:	80 81       	ld	r24, Z
    66c6:	80 93 41 03 	sts	0x0341, r24
			LCD_SETCURSOR(LINE1,cursor_cell-1);
    66ca:	80 91 35 03 	lds	r24, 0x0335
    66ce:	98 2f       	mov	r25, r24
    66d0:	91 50       	subi	r25, 0x01	; 1
    66d2:	80 e0       	ldi	r24, 0x00	; 0
    66d4:	69 2f       	mov	r22, r25
    66d6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    66da:	0b c0       	rjmp	.+22     	; 0x66f2 <convert+0x1c2>
		}
		else if(k=='S')
    66dc:	80 91 41 03 	lds	r24, 0x0341
    66e0:	83 35       	cpi	r24, 0x53	; 83
    66e2:	39 f4       	brne	.+14     	; 0x66f2 <convert+0x1c2>
		{
			z=0;
    66e4:	10 92 40 03 	sts	0x0340, r1
			bi--;
    66e8:	80 91 3f 03 	lds	r24, 0x033F
    66ec:	81 50       	subi	r24, 0x01	; 1
    66ee:	80 93 3f 03 	sts	0x033F, r24
		}
		bi++;
    66f2:	80 91 3f 03 	lds	r24, 0x033F
    66f6:	8f 5f       	subi	r24, 0xFF	; 255
    66f8:	80 93 3f 03 	sts	0x033F, r24
	}
	if (k!='S')
    66fc:	80 91 41 03 	lds	r24, 0x0341
    6700:	83 35       	cpi	r24, 0x53	; 83
    6702:	21 f0       	breq	.+8      	; 0x670c <convert+0x1dc>
	{
		LCD_WriteChar(k);
    6704:	80 91 41 03 	lds	r24, 0x0341
    6708:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	}
	
}
    670c:	cf 91       	pop	r28
    670e:	df 91       	pop	r29
    6710:	08 95       	ret

00006712 <result>:

void result()
{
    6712:	df 93       	push	r29
    6714:	cf 93       	push	r28
    6716:	0f 92       	push	r0
    6718:	cd b7       	in	r28, 0x3d	; 61
    671a:	de b7       	in	r29, 0x3e	; 62
	LCD_SETCURSOR(LINE2,4);
    671c:	80 e4       	ldi	r24, 0x40	; 64
    671e:	64 e0       	ldi	r22, 0x04	; 4
    6720:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	bi--;
    6724:	80 91 3f 03 	lds	r24, 0x033F
    6728:	81 50       	subi	r24, 0x01	; 1
    672a:	80 93 3f 03 	sts	0x033F, r24
	if (cf==BIN)
    672e:	80 91 3c 03 	lds	r24, 0x033C
    6732:	82 30       	cpi	r24, 0x02	; 2
    6734:	29 f5       	brne	.+74     	; 0x6780 <result+0x6e>
	{
		
		for (u8 i=1;bi>=0;bi--)
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	89 83       	std	Y+1, r24	; 0x01
    673a:	1d c0       	rjmp	.+58     	; 0x6776 <result+0x64>
		{
			num+=i*b[bi];
    673c:	80 91 3f 03 	lds	r24, 0x033F
    6740:	99 27       	eor	r25, r25
    6742:	87 fd       	sbrc	r24, 7
    6744:	90 95       	com	r25
    6746:	fc 01       	movw	r30, r24
    6748:	ee 5b       	subi	r30, 0xBE	; 190
    674a:	fc 4f       	sbci	r31, 0xFC	; 252
    674c:	90 81       	ld	r25, Z
    674e:	89 81       	ldd	r24, Y+1	; 0x01
    6750:	98 9f       	mul	r25, r24
    6752:	90 2d       	mov	r25, r0
    6754:	11 24       	eor	r1, r1
    6756:	80 91 3b 03 	lds	r24, 0x033B
    675a:	89 0f       	add	r24, r25
    675c:	80 93 3b 03 	sts	0x033B, r24
			i*=2;
    6760:	89 81       	ldd	r24, Y+1	; 0x01
    6762:	88 2f       	mov	r24, r24
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	88 0f       	add	r24, r24
    6768:	99 1f       	adc	r25, r25
    676a:	89 83       	std	Y+1, r24	; 0x01
	LCD_SETCURSOR(LINE2,4);
	bi--;
	if (cf==BIN)
	{
		
		for (u8 i=1;bi>=0;bi--)
    676c:	80 91 3f 03 	lds	r24, 0x033F
    6770:	81 50       	subi	r24, 0x01	; 1
    6772:	80 93 3f 03 	sts	0x033F, r24
    6776:	80 91 3f 03 	lds	r24, 0x033F
    677a:	88 23       	and	r24, r24
    677c:	fc f6       	brge	.-66     	; 0x673c <result+0x2a>
    677e:	21 c0       	rjmp	.+66     	; 0x67c2 <result+0xb0>
		{
			num+=i*b[bi];
			i*=2;
		}
	}
	else if(cf==HEX)
    6780:	80 91 3c 03 	lds	r24, 0x033C
    6784:	83 30       	cpi	r24, 0x03	; 3
    6786:	e9 f4       	brne	.+58     	; 0x67c2 <result+0xb0>
	{
		num=b[bi];
    6788:	80 91 3f 03 	lds	r24, 0x033F
    678c:	99 27       	eor	r25, r25
    678e:	87 fd       	sbrc	r24, 7
    6790:	90 95       	com	r25
    6792:	fc 01       	movw	r30, r24
    6794:	ee 5b       	subi	r30, 0xBE	; 190
    6796:	fc 4f       	sbci	r31, 0xFC	; 252
    6798:	80 81       	ld	r24, Z
    679a:	80 93 3b 03 	sts	0x033B, r24
		num+=((b[bi-1])<<4);
    679e:	80 91 3f 03 	lds	r24, 0x033F
    67a2:	99 27       	eor	r25, r25
    67a4:	87 fd       	sbrc	r24, 7
    67a6:	90 95       	com	r25
    67a8:	01 97       	sbiw	r24, 0x01	; 1
    67aa:	fc 01       	movw	r30, r24
    67ac:	ee 5b       	subi	r30, 0xBE	; 190
    67ae:	fc 4f       	sbci	r31, 0xFC	; 252
    67b0:	80 81       	ld	r24, Z
    67b2:	98 2f       	mov	r25, r24
    67b4:	92 95       	swap	r25
    67b6:	90 7f       	andi	r25, 0xF0	; 240
    67b8:	80 91 3b 03 	lds	r24, 0x033B
    67bc:	89 0f       	add	r24, r25
    67be:	80 93 3b 03 	sts	0x033B, r24
	}
	if (ct==DEC)
    67c2:	80 91 3d 03 	lds	r24, 0x033D
    67c6:	81 30       	cpi	r24, 0x01	; 1
    67c8:	59 f4       	brne	.+22     	; 0x67e0 <result+0xce>
	{
		LCD_WriteNumber(num);
    67ca:	80 91 3b 03 	lds	r24, 0x033B
    67ce:	88 2f       	mov	r24, r24
    67d0:	90 e0       	ldi	r25, 0x00	; 0
    67d2:	a0 e0       	ldi	r26, 0x00	; 0
    67d4:	b0 e0       	ldi	r27, 0x00	; 0
    67d6:	bc 01       	movw	r22, r24
    67d8:	cd 01       	movw	r24, r26
    67da:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
    67de:	1d c0       	rjmp	.+58     	; 0x681a <result+0x108>
	}
	else if (ct==BIN)
    67e0:	80 91 3d 03 	lds	r24, 0x033D
    67e4:	82 30       	cpi	r24, 0x02	; 2
    67e6:	59 f4       	brne	.+22     	; 0x67fe <result+0xec>
	{
		LCD_WriteBinary(num);
    67e8:	80 91 3b 03 	lds	r24, 0x033B
    67ec:	88 2f       	mov	r24, r24
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	a0 e0       	ldi	r26, 0x00	; 0
    67f2:	b0 e0       	ldi	r27, 0x00	; 0
    67f4:	bc 01       	movw	r22, r24
    67f6:	cd 01       	movw	r24, r26
    67f8:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <LCD_WriteBinary>
    67fc:	0e c0       	rjmp	.+28     	; 0x681a <result+0x108>
	}
	else if (ct==HEX)
    67fe:	80 91 3d 03 	lds	r24, 0x033D
    6802:	83 30       	cpi	r24, 0x03	; 3
    6804:	51 f4       	brne	.+20     	; 0x681a <result+0x108>
	{
		LCD_WriteHex(num);
    6806:	80 91 3b 03 	lds	r24, 0x033B
    680a:	88 2f       	mov	r24, r24
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	a0 e0       	ldi	r26, 0x00	; 0
    6810:	b0 e0       	ldi	r27, 0x00	; 0
    6812:	bc 01       	movw	r22, r24
    6814:	cd 01       	movw	r24, r26
    6816:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCD_WriteHex>
	}
	num=0;
    681a:	10 92 3b 03 	sts	0x033B, r1
	bi=0;
    681e:	10 92 3f 03 	sts	0x033F, r1
	f=6;
    6822:	86 e0       	ldi	r24, 0x06	; 6
    6824:	80 93 3e 03 	sts	0x033E, r24
	
}
    6828:	0f 90       	pop	r0
    682a:	cf 91       	pop	r28
    682c:	df 91       	pop	r29
    682e:	08 95       	ret

00006830 <Calculator_init>:

u8 k,f1,f2;
s32 num1,num2;

void Calculator_init()
{
    6830:	df 93       	push	r29
    6832:	cf 93       	push	r28
    6834:	cd b7       	in	r28, 0x3d	; 61
    6836:	de b7       	in	r29, 0x3e	; 62
	cancel();
    6838:	0e 94 f6 35 	call	0x6bec	; 0x6bec <cancel>
}
    683c:	cf 91       	pop	r28
    683e:	df 91       	pop	r29
    6840:	08 95       	ret

00006842 <Calculator_Runnable>:

void Calculator_Runnable()
{
    6842:	df 93       	push	r29
    6844:	cf 93       	push	r28
    6846:	00 d0       	rcall	.+0      	; 0x6848 <Calculator_Runnable+0x6>
    6848:	cd b7       	in	r28, 0x3d	; 61
    684a:	de b7       	in	r29, 0x3e	; 62
	k=KeyPad_get();
    684c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    6850:	80 93 4c 03 	sts	0x034C, r24
	if (k!=NO_KEY)
    6854:	80 91 4c 03 	lds	r24, 0x034C
    6858:	84 35       	cpi	r24, 0x54	; 84
    685a:	09 f4       	brne	.+2      	; 0x685e <Calculator_Runnable+0x1c>
    685c:	47 c0       	rjmp	.+142    	; 0x68ec <Calculator_Runnable+0xaa>
	{
		if (k>='0'&&k<='9')
    685e:	80 91 4c 03 	lds	r24, 0x034C
    6862:	80 33       	cpi	r24, 0x30	; 48
    6864:	38 f0       	brcs	.+14     	; 0x6874 <Calculator_Runnable+0x32>
    6866:	80 91 4c 03 	lds	r24, 0x034C
    686a:	8a 33       	cpi	r24, 0x3A	; 58
    686c:	18 f4       	brcc	.+6      	; 0x6874 <Calculator_Runnable+0x32>
		{
			num();
    686e:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <num>
    6872:	3c c0       	rjmp	.+120    	; 0x68ec <Calculator_Runnable+0xaa>
		}
		else
		{
			switch (k)
    6874:	80 91 4c 03 	lds	r24, 0x034C
    6878:	28 2f       	mov	r18, r24
    687a:	30 e0       	ldi	r19, 0x00	; 0
    687c:	3a 83       	std	Y+2, r19	; 0x02
    687e:	29 83       	std	Y+1, r18	; 0x01
    6880:	89 81       	ldd	r24, Y+1	; 0x01
    6882:	9a 81       	ldd	r25, Y+2	; 0x02
    6884:	8f 32       	cpi	r24, 0x2F	; 47
    6886:	91 05       	cpc	r25, r1
    6888:	61 f1       	breq	.+88     	; 0x68e2 <Calculator_Runnable+0xa0>
    688a:	29 81       	ldd	r18, Y+1	; 0x01
    688c:	3a 81       	ldd	r19, Y+2	; 0x02
    688e:	20 33       	cpi	r18, 0x30	; 48
    6890:	31 05       	cpc	r19, r1
    6892:	84 f4       	brge	.+32     	; 0x68b4 <Calculator_Runnable+0x72>
    6894:	89 81       	ldd	r24, Y+1	; 0x01
    6896:	9a 81       	ldd	r25, Y+2	; 0x02
    6898:	8b 32       	cpi	r24, 0x2B	; 43
    689a:	91 05       	cpc	r25, r1
    689c:	c9 f0       	breq	.+50     	; 0x68d0 <Calculator_Runnable+0x8e>
    689e:	29 81       	ldd	r18, Y+1	; 0x01
    68a0:	3a 81       	ldd	r19, Y+2	; 0x02
    68a2:	2d 32       	cpi	r18, 0x2D	; 45
    68a4:	31 05       	cpc	r19, r1
    68a6:	b9 f0       	breq	.+46     	; 0x68d6 <Calculator_Runnable+0x94>
    68a8:	89 81       	ldd	r24, Y+1	; 0x01
    68aa:	9a 81       	ldd	r25, Y+2	; 0x02
    68ac:	8a 32       	cpi	r24, 0x2A	; 42
    68ae:	91 05       	cpc	r25, r1
    68b0:	a9 f0       	breq	.+42     	; 0x68dc <Calculator_Runnable+0x9a>
    68b2:	1c c0       	rjmp	.+56     	; 0x68ec <Calculator_Runnable+0xaa>
    68b4:	29 81       	ldd	r18, Y+1	; 0x01
    68b6:	3a 81       	ldd	r19, Y+2	; 0x02
    68b8:	2d 33       	cpi	r18, 0x3D	; 61
    68ba:	31 05       	cpc	r19, r1
    68bc:	31 f0       	breq	.+12     	; 0x68ca <Calculator_Runnable+0x88>
    68be:	89 81       	ldd	r24, Y+1	; 0x01
    68c0:	9a 81       	ldd	r25, Y+2	; 0x02
    68c2:	8e 34       	cpi	r24, 0x4E	; 78
    68c4:	91 05       	cpc	r25, r1
    68c6:	81 f0       	breq	.+32     	; 0x68e8 <Calculator_Runnable+0xa6>
    68c8:	11 c0       	rjmp	.+34     	; 0x68ec <Calculator_Runnable+0xaa>
			{
			case '=':
				equ1();
    68ca:	0e 94 13 36 	call	0x6c26	; 0x6c26 <equ1>
    68ce:	0e c0       	rjmp	.+28     	; 0x68ec <Calculator_Runnable+0xaa>
				break;
			case '+':
				add1();
    68d0:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <add1>
    68d4:	0b c0       	rjmp	.+22     	; 0x68ec <Calculator_Runnable+0xaa>
				break;
			case '-':
				sub1();
    68d6:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <sub1>
    68da:	08 c0       	rjmp	.+16     	; 0x68ec <Calculator_Runnable+0xaa>
				break;
			case '*':
				mul1();
    68dc:	0e 94 60 38 	call	0x70c0	; 0x70c0 <mul1>
    68e0:	05 c0       	rjmp	.+10     	; 0x68ec <Calculator_Runnable+0xaa>
				break;
			case '/':
				div1();
    68e2:	0e 94 e6 38 	call	0x71cc	; 0x71cc <div1>
    68e6:	02 c0       	rjmp	.+4      	; 0x68ec <Calculator_Runnable+0xaa>
				break;
			case 'N':
				cancel();
    68e8:	0e 94 f6 35 	call	0x6bec	; 0x6bec <cancel>
				break;
			}
		}	
	}
}
    68ec:	0f 90       	pop	r0
    68ee:	0f 90       	pop	r0
    68f0:	cf 91       	pop	r28
    68f2:	df 91       	pop	r29
    68f4:	08 95       	ret

000068f6 <num>:

void num(void)
{
    68f6:	df 93       	push	r29
    68f8:	cf 93       	push	r28
    68fa:	cd b7       	in	r28, 0x3d	; 61
    68fc:	de b7       	in	r29, 0x3e	; 62
	if (f1==1)
    68fe:	80 91 56 03 	lds	r24, 0x0356
    6902:	81 30       	cpi	r24, 0x01	; 1
    6904:	a1 f4       	brne	.+40     	; 0x692e <num+0x38>
	{
		LCD_Clear();
    6906:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		num1=0;
    690a:	10 92 52 03 	sts	0x0352, r1
    690e:	10 92 53 03 	sts	0x0353, r1
    6912:	10 92 54 03 	sts	0x0354, r1
    6916:	10 92 55 03 	sts	0x0355, r1
		num2=0;
    691a:	10 92 4e 03 	sts	0x034E, r1
    691e:	10 92 4f 03 	sts	0x034F, r1
    6922:	10 92 50 03 	sts	0x0350, r1
    6926:	10 92 51 03 	sts	0x0351, r1
		f1=0;
    692a:	10 92 56 03 	sts	0x0356, r1
	}
	num1=num1*10+(k-'0');
    692e:	80 91 52 03 	lds	r24, 0x0352
    6932:	90 91 53 03 	lds	r25, 0x0353
    6936:	a0 91 54 03 	lds	r26, 0x0354
    693a:	b0 91 55 03 	lds	r27, 0x0355
    693e:	2a e0       	ldi	r18, 0x0A	; 10
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	40 e0       	ldi	r20, 0x00	; 0
    6944:	50 e0       	ldi	r21, 0x00	; 0
    6946:	bc 01       	movw	r22, r24
    6948:	cd 01       	movw	r24, r26
    694a:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    694e:	9b 01       	movw	r18, r22
    6950:	ac 01       	movw	r20, r24
    6952:	80 91 4c 03 	lds	r24, 0x034C
    6956:	88 2f       	mov	r24, r24
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	c0 97       	sbiw	r24, 0x30	; 48
    695c:	aa 27       	eor	r26, r26
    695e:	97 fd       	sbrc	r25, 7
    6960:	a0 95       	com	r26
    6962:	ba 2f       	mov	r27, r26
    6964:	82 0f       	add	r24, r18
    6966:	93 1f       	adc	r25, r19
    6968:	a4 1f       	adc	r26, r20
    696a:	b5 1f       	adc	r27, r21
    696c:	80 93 52 03 	sts	0x0352, r24
    6970:	90 93 53 03 	sts	0x0353, r25
    6974:	a0 93 54 03 	sts	0x0354, r26
    6978:	b0 93 55 03 	sts	0x0355, r27
	LCD_WriteChar(k);
    697c:	80 91 4c 03 	lds	r24, 0x034C
    6980:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
	f2=1;
    6984:	81 e0       	ldi	r24, 0x01	; 1
    6986:	80 93 4d 03 	sts	0x034D, r24
}
    698a:	cf 91       	pop	r28
    698c:	df 91       	pop	r29
    698e:	08 95       	ret

00006990 <equ>:

void equ(void)
{
    6990:	df 93       	push	r29
    6992:	cf 93       	push	r28
    6994:	cd b7       	in	r28, 0x3d	; 61
    6996:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    6998:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_WriteNumber(num2);
    699c:	80 91 4e 03 	lds	r24, 0x034E
    69a0:	90 91 4f 03 	lds	r25, 0x034F
    69a4:	a0 91 50 03 	lds	r26, 0x0350
    69a8:	b0 91 51 03 	lds	r27, 0x0351
    69ac:	bc 01       	movw	r22, r24
    69ae:	cd 01       	movw	r24, r26
    69b0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
}
    69b4:	cf 91       	pop	r28
    69b6:	df 91       	pop	r29
    69b8:	08 95       	ret

000069ba <add>:

void add(void)
{
    69ba:	df 93       	push	r29
    69bc:	cf 93       	push	r28
    69be:	cd b7       	in	r28, 0x3d	; 61
    69c0:	de b7       	in	r29, 0x3e	; 62
	if (f2==0)
    69c2:	80 91 4d 03 	lds	r24, 0x034D
    69c6:	88 23       	and	r24, r24
    69c8:	49 f4       	brne	.+18     	; 0x69dc <add+0x22>
	{
		LCD_SETCURSOR(LINE1,cursor_cell-1);
    69ca:	80 91 35 03 	lds	r24, 0x0335
    69ce:	98 2f       	mov	r25, r24
    69d0:	91 50       	subi	r25, 0x01	; 1
    69d2:	80 e0       	ldi	r24, 0x00	; 0
    69d4:	69 2f       	mov	r22, r25
    69d6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    69da:	2a c0       	rjmp	.+84     	; 0x6a30 <add+0x76>
	}
	else
	{
		num2+=num1;
    69dc:	20 91 4e 03 	lds	r18, 0x034E
    69e0:	30 91 4f 03 	lds	r19, 0x034F
    69e4:	40 91 50 03 	lds	r20, 0x0350
    69e8:	50 91 51 03 	lds	r21, 0x0351
    69ec:	80 91 52 03 	lds	r24, 0x0352
    69f0:	90 91 53 03 	lds	r25, 0x0353
    69f4:	a0 91 54 03 	lds	r26, 0x0354
    69f8:	b0 91 55 03 	lds	r27, 0x0355
    69fc:	82 0f       	add	r24, r18
    69fe:	93 1f       	adc	r25, r19
    6a00:	a4 1f       	adc	r26, r20
    6a02:	b5 1f       	adc	r27, r21
    6a04:	80 93 4e 03 	sts	0x034E, r24
    6a08:	90 93 4f 03 	sts	0x034F, r25
    6a0c:	a0 93 50 03 	sts	0x0350, r26
    6a10:	b0 93 51 03 	sts	0x0351, r27
		LCD_Clear();
    6a14:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteNumber(num2);
    6a18:	80 91 4e 03 	lds	r24, 0x034E
    6a1c:	90 91 4f 03 	lds	r25, 0x034F
    6a20:	a0 91 50 03 	lds	r26, 0x0350
    6a24:	b0 91 51 03 	lds	r27, 0x0351
    6a28:	bc 01       	movw	r22, r24
    6a2a:	cd 01       	movw	r24, r26
    6a2c:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
	}
}
    6a30:	cf 91       	pop	r28
    6a32:	df 91       	pop	r29
    6a34:	08 95       	ret

00006a36 <sub>:

void sub(void)
{
    6a36:	ef 92       	push	r14
    6a38:	ff 92       	push	r15
    6a3a:	0f 93       	push	r16
    6a3c:	1f 93       	push	r17
    6a3e:	df 93       	push	r29
    6a40:	cf 93       	push	r28
    6a42:	cd b7       	in	r28, 0x3d	; 61
    6a44:	de b7       	in	r29, 0x3e	; 62
	if (f2==0)
    6a46:	80 91 4d 03 	lds	r24, 0x034D
    6a4a:	88 23       	and	r24, r24
    6a4c:	49 f4       	brne	.+18     	; 0x6a60 <sub+0x2a>
	{
		LCD_SETCURSOR(LINE1,cursor_cell-1);
    6a4e:	80 91 35 03 	lds	r24, 0x0335
    6a52:	98 2f       	mov	r25, r24
    6a54:	91 50       	subi	r25, 0x01	; 1
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	69 2f       	mov	r22, r25
    6a5a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    6a5e:	2e c0       	rjmp	.+92     	; 0x6abc <sub+0x86>
	}
	else
	{
		num2=num2-num1;
    6a60:	20 91 4e 03 	lds	r18, 0x034E
    6a64:	30 91 4f 03 	lds	r19, 0x034F
    6a68:	40 91 50 03 	lds	r20, 0x0350
    6a6c:	50 91 51 03 	lds	r21, 0x0351
    6a70:	80 91 52 03 	lds	r24, 0x0352
    6a74:	90 91 53 03 	lds	r25, 0x0353
    6a78:	a0 91 54 03 	lds	r26, 0x0354
    6a7c:	b0 91 55 03 	lds	r27, 0x0355
    6a80:	79 01       	movw	r14, r18
    6a82:	8a 01       	movw	r16, r20
    6a84:	e8 1a       	sub	r14, r24
    6a86:	f9 0a       	sbc	r15, r25
    6a88:	0a 0b       	sbc	r16, r26
    6a8a:	1b 0b       	sbc	r17, r27
    6a8c:	d8 01       	movw	r26, r16
    6a8e:	c7 01       	movw	r24, r14
    6a90:	80 93 4e 03 	sts	0x034E, r24
    6a94:	90 93 4f 03 	sts	0x034F, r25
    6a98:	a0 93 50 03 	sts	0x0350, r26
    6a9c:	b0 93 51 03 	sts	0x0351, r27
		LCD_Clear();
    6aa0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteNumber(num2);
    6aa4:	80 91 4e 03 	lds	r24, 0x034E
    6aa8:	90 91 4f 03 	lds	r25, 0x034F
    6aac:	a0 91 50 03 	lds	r26, 0x0350
    6ab0:	b0 91 51 03 	lds	r27, 0x0351
    6ab4:	bc 01       	movw	r22, r24
    6ab6:	cd 01       	movw	r24, r26
    6ab8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
	}
}
    6abc:	cf 91       	pop	r28
    6abe:	df 91       	pop	r29
    6ac0:	1f 91       	pop	r17
    6ac2:	0f 91       	pop	r16
    6ac4:	ff 90       	pop	r15
    6ac6:	ef 90       	pop	r14
    6ac8:	08 95       	ret

00006aca <mul>:

void mul(void)
{
    6aca:	df 93       	push	r29
    6acc:	cf 93       	push	r28
    6ace:	cd b7       	in	r28, 0x3d	; 61
    6ad0:	de b7       	in	r29, 0x3e	; 62
	if (f2==0)
    6ad2:	80 91 4d 03 	lds	r24, 0x034D
    6ad6:	88 23       	and	r24, r24
    6ad8:	49 f4       	brne	.+18     	; 0x6aec <mul+0x22>
	{
		LCD_SETCURSOR(LINE1,cursor_cell-1);
    6ada:	80 91 35 03 	lds	r24, 0x0335
    6ade:	98 2f       	mov	r25, r24
    6ae0:	91 50       	subi	r25, 0x01	; 1
    6ae2:	80 e0       	ldi	r24, 0x00	; 0
    6ae4:	69 2f       	mov	r22, r25
    6ae6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    6aea:	2c c0       	rjmp	.+88     	; 0x6b44 <mul+0x7a>
	}
	else
	{
		num2*=num1;
    6aec:	80 91 4e 03 	lds	r24, 0x034E
    6af0:	90 91 4f 03 	lds	r25, 0x034F
    6af4:	a0 91 50 03 	lds	r26, 0x0350
    6af8:	b0 91 51 03 	lds	r27, 0x0351
    6afc:	20 91 52 03 	lds	r18, 0x0352
    6b00:	30 91 53 03 	lds	r19, 0x0353
    6b04:	40 91 54 03 	lds	r20, 0x0354
    6b08:	50 91 55 03 	lds	r21, 0x0355
    6b0c:	bc 01       	movw	r22, r24
    6b0e:	cd 01       	movw	r24, r26
    6b10:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    6b14:	dc 01       	movw	r26, r24
    6b16:	cb 01       	movw	r24, r22
    6b18:	80 93 4e 03 	sts	0x034E, r24
    6b1c:	90 93 4f 03 	sts	0x034F, r25
    6b20:	a0 93 50 03 	sts	0x0350, r26
    6b24:	b0 93 51 03 	sts	0x0351, r27
		LCD_Clear();
    6b28:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteNumber(num2);
    6b2c:	80 91 4e 03 	lds	r24, 0x034E
    6b30:	90 91 4f 03 	lds	r25, 0x034F
    6b34:	a0 91 50 03 	lds	r26, 0x0350
    6b38:	b0 91 51 03 	lds	r27, 0x0351
    6b3c:	bc 01       	movw	r22, r24
    6b3e:	cd 01       	movw	r24, r26
    6b40:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
	}
}
    6b44:	cf 91       	pop	r28
    6b46:	df 91       	pop	r29
    6b48:	08 95       	ret

00006b4a <div>:

void div(void)
{
    6b4a:	df 93       	push	r29
    6b4c:	cf 93       	push	r28
    6b4e:	cd b7       	in	r28, 0x3d	; 61
    6b50:	de b7       	in	r29, 0x3e	; 62
	if (f2==0)
    6b52:	80 91 4d 03 	lds	r24, 0x034D
    6b56:	88 23       	and	r24, r24
    6b58:	49 f4       	brne	.+18     	; 0x6b6c <div+0x22>
	{
		LCD_SETCURSOR(LINE1,cursor_cell-1);
    6b5a:	80 91 35 03 	lds	r24, 0x0335
    6b5e:	98 2f       	mov	r25, r24
    6b60:	91 50       	subi	r25, 0x01	; 1
    6b62:	80 e0       	ldi	r24, 0x00	; 0
    6b64:	69 2f       	mov	r22, r25
    6b66:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
    6b6a:	3d c0       	rjmp	.+122    	; 0x6be6 <div+0x9c>
	}
	else
	{
		if (num1==0)
    6b6c:	80 91 52 03 	lds	r24, 0x0352
    6b70:	90 91 53 03 	lds	r25, 0x0353
    6b74:	a0 91 54 03 	lds	r26, 0x0354
    6b78:	b0 91 55 03 	lds	r27, 0x0355
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	a1 05       	cpc	r26, r1
    6b80:	b1 05       	cpc	r27, r1
    6b82:	29 f4       	brne	.+10     	; 0x6b8e <div+0x44>
		{
			LCD_WriteString("ERROR");
    6b84:	80 e4       	ldi	r24, 0x40	; 64
    6b86:	92 e0       	ldi	r25, 0x02	; 2
    6b88:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    6b8c:	2c c0       	rjmp	.+88     	; 0x6be6 <div+0x9c>
		}
		else
		{
			num2/=num1;
    6b8e:	80 91 4e 03 	lds	r24, 0x034E
    6b92:	90 91 4f 03 	lds	r25, 0x034F
    6b96:	a0 91 50 03 	lds	r26, 0x0350
    6b9a:	b0 91 51 03 	lds	r27, 0x0351
    6b9e:	20 91 52 03 	lds	r18, 0x0352
    6ba2:	30 91 53 03 	lds	r19, 0x0353
    6ba6:	40 91 54 03 	lds	r20, 0x0354
    6baa:	50 91 55 03 	lds	r21, 0x0355
    6bae:	bc 01       	movw	r22, r24
    6bb0:	cd 01       	movw	r24, r26
    6bb2:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    6bb6:	da 01       	movw	r26, r20
    6bb8:	c9 01       	movw	r24, r18
    6bba:	80 93 4e 03 	sts	0x034E, r24
    6bbe:	90 93 4f 03 	sts	0x034F, r25
    6bc2:	a0 93 50 03 	sts	0x0350, r26
    6bc6:	b0 93 51 03 	sts	0x0351, r27
			LCD_Clear();
    6bca:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
			LCD_WriteNumber(num2);
    6bce:	80 91 4e 03 	lds	r24, 0x034E
    6bd2:	90 91 4f 03 	lds	r25, 0x034F
    6bd6:	a0 91 50 03 	lds	r26, 0x0350
    6bda:	b0 91 51 03 	lds	r27, 0x0351
    6bde:	bc 01       	movw	r22, r24
    6be0:	cd 01       	movw	r24, r26
    6be2:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
		}
	}
}
    6be6:	cf 91       	pop	r28
    6be8:	df 91       	pop	r29
    6bea:	08 95       	ret

00006bec <cancel>:

void cancel(void)
{
    6bec:	df 93       	push	r29
    6bee:	cf 93       	push	r28
    6bf0:	cd b7       	in	r28, 0x3d	; 61
    6bf2:	de b7       	in	r29, 0x3e	; 62
	f1=0;
    6bf4:	10 92 56 03 	sts	0x0356, r1
	f2=0;
    6bf8:	10 92 4d 03 	sts	0x034D, r1
	num1=0;
    6bfc:	10 92 52 03 	sts	0x0352, r1
    6c00:	10 92 53 03 	sts	0x0353, r1
    6c04:	10 92 54 03 	sts	0x0354, r1
    6c08:	10 92 55 03 	sts	0x0355, r1
	num2=0;
    6c0c:	10 92 4e 03 	sts	0x034E, r1
    6c10:	10 92 4f 03 	sts	0x034F, r1
    6c14:	10 92 50 03 	sts	0x0350, r1
    6c18:	10 92 51 03 	sts	0x0351, r1
	LCD_Clear();
    6c1c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
}
    6c20:	cf 91       	pop	r28
    6c22:	df 91       	pop	r29
    6c24:	08 95       	ret

00006c26 <equ1>:

void equ1(void)
{
    6c26:	ef 92       	push	r14
    6c28:	ff 92       	push	r15
    6c2a:	0f 93       	push	r16
    6c2c:	1f 93       	push	r17
    6c2e:	df 93       	push	r29
    6c30:	cf 93       	push	r28
    6c32:	00 d0       	rcall	.+0      	; 0x6c34 <equ1+0xe>
    6c34:	cd b7       	in	r28, 0x3d	; 61
    6c36:	de b7       	in	r29, 0x3e	; 62
	LCD_SETCURSOR(LINE2,0);
    6c38:	80 e4       	ldi	r24, 0x40	; 64
    6c3a:	60 e0       	ldi	r22, 0x00	; 0
    6c3c:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <LCD_SETCURSOR>
	switch (f1)
    6c40:	80 91 56 03 	lds	r24, 0x0356
    6c44:	e8 2e       	mov	r14, r24
    6c46:	ff 24       	eor	r15, r15
    6c48:	fa 82       	std	Y+2, r15	; 0x02
    6c4a:	e9 82       	std	Y+1, r14	; 0x01
    6c4c:	09 81       	ldd	r16, Y+1	; 0x01
    6c4e:	1a 81       	ldd	r17, Y+2	; 0x02
    6c50:	03 30       	cpi	r16, 0x03	; 3
    6c52:	11 05       	cpc	r17, r1
    6c54:	09 f4       	brne	.+2      	; 0x6c58 <equ1+0x32>
    6c56:	5e c0       	rjmp	.+188    	; 0x6d14 <equ1+0xee>
    6c58:	29 81       	ldd	r18, Y+1	; 0x01
    6c5a:	3a 81       	ldd	r19, Y+2	; 0x02
    6c5c:	24 30       	cpi	r18, 0x04	; 4
    6c5e:	31 05       	cpc	r19, r1
    6c60:	54 f4       	brge	.+20     	; 0x6c76 <equ1+0x50>
    6c62:	89 81       	ldd	r24, Y+1	; 0x01
    6c64:	9a 81       	ldd	r25, Y+2	; 0x02
    6c66:	00 97       	sbiw	r24, 0x00	; 0
    6c68:	99 f0       	breq	.+38     	; 0x6c90 <equ1+0x6a>
    6c6a:	09 81       	ldd	r16, Y+1	; 0x01
    6c6c:	1a 81       	ldd	r17, Y+2	; 0x02
    6c6e:	02 30       	cpi	r16, 0x02	; 2
    6c70:	11 05       	cpc	r17, r1
    6c72:	d9 f0       	breq	.+54     	; 0x6caa <equ1+0x84>
    6c74:	0e c1       	rjmp	.+540    	; 0x6e92 <equ1+0x26c>
    6c76:	29 81       	ldd	r18, Y+1	; 0x01
    6c78:	3a 81       	ldd	r19, Y+2	; 0x02
    6c7a:	24 30       	cpi	r18, 0x04	; 4
    6c7c:	31 05       	cpc	r19, r1
    6c7e:	09 f4       	brne	.+2      	; 0x6c82 <equ1+0x5c>
    6c80:	86 c0       	rjmp	.+268    	; 0x6d8e <equ1+0x168>
    6c82:	89 81       	ldd	r24, Y+1	; 0x01
    6c84:	9a 81       	ldd	r25, Y+2	; 0x02
    6c86:	85 30       	cpi	r24, 0x05	; 5
    6c88:	91 05       	cpc	r25, r1
    6c8a:	09 f4       	brne	.+2      	; 0x6c8e <equ1+0x68>
    6c8c:	b9 c0       	rjmp	.+370    	; 0x6e00 <equ1+0x1da>
    6c8e:	01 c1       	rjmp	.+514    	; 0x6e92 <equ1+0x26c>
	{
	case 0:
		LCD_WriteNumber(num1);
    6c90:	80 91 52 03 	lds	r24, 0x0352
    6c94:	90 91 53 03 	lds	r25, 0x0353
    6c98:	a0 91 54 03 	lds	r26, 0x0354
    6c9c:	b0 91 55 03 	lds	r27, 0x0355
    6ca0:	bc 01       	movw	r22, r24
    6ca2:	cd 01       	movw	r24, r26
    6ca4:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
    6ca8:	f4 c0       	rjmp	.+488    	; 0x6e92 <equ1+0x26c>
		break;
	case 2:
		LCD_WriteNumber(num2+num1);
    6caa:	20 91 4e 03 	lds	r18, 0x034E
    6cae:	30 91 4f 03 	lds	r19, 0x034F
    6cb2:	40 91 50 03 	lds	r20, 0x0350
    6cb6:	50 91 51 03 	lds	r21, 0x0351
    6cba:	80 91 52 03 	lds	r24, 0x0352
    6cbe:	90 91 53 03 	lds	r25, 0x0353
    6cc2:	a0 91 54 03 	lds	r26, 0x0354
    6cc6:	b0 91 55 03 	lds	r27, 0x0355
    6cca:	82 0f       	add	r24, r18
    6ccc:	93 1f       	adc	r25, r19
    6cce:	a4 1f       	adc	r26, r20
    6cd0:	b5 1f       	adc	r27, r21
    6cd2:	bc 01       	movw	r22, r24
    6cd4:	cd 01       	movw	r24, r26
    6cd6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
		num2+=num1;
    6cda:	20 91 4e 03 	lds	r18, 0x034E
    6cde:	30 91 4f 03 	lds	r19, 0x034F
    6ce2:	40 91 50 03 	lds	r20, 0x0350
    6ce6:	50 91 51 03 	lds	r21, 0x0351
    6cea:	80 91 52 03 	lds	r24, 0x0352
    6cee:	90 91 53 03 	lds	r25, 0x0353
    6cf2:	a0 91 54 03 	lds	r26, 0x0354
    6cf6:	b0 91 55 03 	lds	r27, 0x0355
    6cfa:	82 0f       	add	r24, r18
    6cfc:	93 1f       	adc	r25, r19
    6cfe:	a4 1f       	adc	r26, r20
    6d00:	b5 1f       	adc	r27, r21
    6d02:	80 93 4e 03 	sts	0x034E, r24
    6d06:	90 93 4f 03 	sts	0x034F, r25
    6d0a:	a0 93 50 03 	sts	0x0350, r26
    6d0e:	b0 93 51 03 	sts	0x0351, r27
    6d12:	bf c0       	rjmp	.+382    	; 0x6e92 <equ1+0x26c>
		break;
	case 3:
		LCD_WriteNumber(num2-num1);
    6d14:	20 91 4e 03 	lds	r18, 0x034E
    6d18:	30 91 4f 03 	lds	r19, 0x034F
    6d1c:	40 91 50 03 	lds	r20, 0x0350
    6d20:	50 91 51 03 	lds	r21, 0x0351
    6d24:	80 91 52 03 	lds	r24, 0x0352
    6d28:	90 91 53 03 	lds	r25, 0x0353
    6d2c:	a0 91 54 03 	lds	r26, 0x0354
    6d30:	b0 91 55 03 	lds	r27, 0x0355
    6d34:	79 01       	movw	r14, r18
    6d36:	8a 01       	movw	r16, r20
    6d38:	e8 1a       	sub	r14, r24
    6d3a:	f9 0a       	sbc	r15, r25
    6d3c:	0a 0b       	sbc	r16, r26
    6d3e:	1b 0b       	sbc	r17, r27
    6d40:	d8 01       	movw	r26, r16
    6d42:	c7 01       	movw	r24, r14
    6d44:	bc 01       	movw	r22, r24
    6d46:	cd 01       	movw	r24, r26
    6d48:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
		num2-=num1;
    6d4c:	20 91 4e 03 	lds	r18, 0x034E
    6d50:	30 91 4f 03 	lds	r19, 0x034F
    6d54:	40 91 50 03 	lds	r20, 0x0350
    6d58:	50 91 51 03 	lds	r21, 0x0351
    6d5c:	80 91 52 03 	lds	r24, 0x0352
    6d60:	90 91 53 03 	lds	r25, 0x0353
    6d64:	a0 91 54 03 	lds	r26, 0x0354
    6d68:	b0 91 55 03 	lds	r27, 0x0355
    6d6c:	79 01       	movw	r14, r18
    6d6e:	8a 01       	movw	r16, r20
    6d70:	e8 1a       	sub	r14, r24
    6d72:	f9 0a       	sbc	r15, r25
    6d74:	0a 0b       	sbc	r16, r26
    6d76:	1b 0b       	sbc	r17, r27
    6d78:	d8 01       	movw	r26, r16
    6d7a:	c7 01       	movw	r24, r14
    6d7c:	80 93 4e 03 	sts	0x034E, r24
    6d80:	90 93 4f 03 	sts	0x034F, r25
    6d84:	a0 93 50 03 	sts	0x0350, r26
    6d88:	b0 93 51 03 	sts	0x0351, r27
    6d8c:	82 c0       	rjmp	.+260    	; 0x6e92 <equ1+0x26c>
		break;
	case 4:
		LCD_WriteNumber(num2*num1);
    6d8e:	80 91 4e 03 	lds	r24, 0x034E
    6d92:	90 91 4f 03 	lds	r25, 0x034F
    6d96:	a0 91 50 03 	lds	r26, 0x0350
    6d9a:	b0 91 51 03 	lds	r27, 0x0351
    6d9e:	20 91 52 03 	lds	r18, 0x0352
    6da2:	30 91 53 03 	lds	r19, 0x0353
    6da6:	40 91 54 03 	lds	r20, 0x0354
    6daa:	50 91 55 03 	lds	r21, 0x0355
    6dae:	bc 01       	movw	r22, r24
    6db0:	cd 01       	movw	r24, r26
    6db2:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    6db6:	dc 01       	movw	r26, r24
    6db8:	cb 01       	movw	r24, r22
    6dba:	bc 01       	movw	r22, r24
    6dbc:	cd 01       	movw	r24, r26
    6dbe:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
		num2*=num1;
    6dc2:	80 91 4e 03 	lds	r24, 0x034E
    6dc6:	90 91 4f 03 	lds	r25, 0x034F
    6dca:	a0 91 50 03 	lds	r26, 0x0350
    6dce:	b0 91 51 03 	lds	r27, 0x0351
    6dd2:	20 91 52 03 	lds	r18, 0x0352
    6dd6:	30 91 53 03 	lds	r19, 0x0353
    6dda:	40 91 54 03 	lds	r20, 0x0354
    6dde:	50 91 55 03 	lds	r21, 0x0355
    6de2:	bc 01       	movw	r22, r24
    6de4:	cd 01       	movw	r24, r26
    6de6:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    6dea:	dc 01       	movw	r26, r24
    6dec:	cb 01       	movw	r24, r22
    6dee:	80 93 4e 03 	sts	0x034E, r24
    6df2:	90 93 4f 03 	sts	0x034F, r25
    6df6:	a0 93 50 03 	sts	0x0350, r26
    6dfa:	b0 93 51 03 	sts	0x0351, r27
    6dfe:	49 c0       	rjmp	.+146    	; 0x6e92 <equ1+0x26c>
		break;
	case 5:
		if (num1==0)
    6e00:	80 91 52 03 	lds	r24, 0x0352
    6e04:	90 91 53 03 	lds	r25, 0x0353
    6e08:	a0 91 54 03 	lds	r26, 0x0354
    6e0c:	b0 91 55 03 	lds	r27, 0x0355
    6e10:	00 97       	sbiw	r24, 0x00	; 0
    6e12:	a1 05       	cpc	r26, r1
    6e14:	b1 05       	cpc	r27, r1
    6e16:	29 f4       	brne	.+10     	; 0x6e22 <equ1+0x1fc>
		{
			LCD_WriteString("ERROR");
    6e18:	80 e4       	ldi	r24, 0x40	; 64
    6e1a:	92 e0       	ldi	r25, 0x02	; 2
    6e1c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    6e20:	38 c0       	rjmp	.+112    	; 0x6e92 <equ1+0x26c>
		}
		else
		{
			LCD_WriteNumber(num2/num1);
    6e22:	80 91 4e 03 	lds	r24, 0x034E
    6e26:	90 91 4f 03 	lds	r25, 0x034F
    6e2a:	a0 91 50 03 	lds	r26, 0x0350
    6e2e:	b0 91 51 03 	lds	r27, 0x0351
    6e32:	20 91 52 03 	lds	r18, 0x0352
    6e36:	30 91 53 03 	lds	r19, 0x0353
    6e3a:	40 91 54 03 	lds	r20, 0x0354
    6e3e:	50 91 55 03 	lds	r21, 0x0355
    6e42:	bc 01       	movw	r22, r24
    6e44:	cd 01       	movw	r24, r26
    6e46:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    6e4a:	da 01       	movw	r26, r20
    6e4c:	c9 01       	movw	r24, r18
    6e4e:	bc 01       	movw	r22, r24
    6e50:	cd 01       	movw	r24, r26
    6e52:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <LCD_WriteNumber>
			num2/=num1;
    6e56:	80 91 4e 03 	lds	r24, 0x034E
    6e5a:	90 91 4f 03 	lds	r25, 0x034F
    6e5e:	a0 91 50 03 	lds	r26, 0x0350
    6e62:	b0 91 51 03 	lds	r27, 0x0351
    6e66:	20 91 52 03 	lds	r18, 0x0352
    6e6a:	30 91 53 03 	lds	r19, 0x0353
    6e6e:	40 91 54 03 	lds	r20, 0x0354
    6e72:	50 91 55 03 	lds	r21, 0x0355
    6e76:	bc 01       	movw	r22, r24
    6e78:	cd 01       	movw	r24, r26
    6e7a:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    6e7e:	da 01       	movw	r26, r20
    6e80:	c9 01       	movw	r24, r18
    6e82:	80 93 4e 03 	sts	0x034E, r24
    6e86:	90 93 4f 03 	sts	0x034F, r25
    6e8a:	a0 93 50 03 	sts	0x0350, r26
    6e8e:	b0 93 51 03 	sts	0x0351, r27
		}
		break;
	}
	f1=1;
    6e92:	81 e0       	ldi	r24, 0x01	; 1
    6e94:	80 93 56 03 	sts	0x0356, r24
}
    6e98:	0f 90       	pop	r0
    6e9a:	0f 90       	pop	r0
    6e9c:	cf 91       	pop	r28
    6e9e:	df 91       	pop	r29
    6ea0:	1f 91       	pop	r17
    6ea2:	0f 91       	pop	r16
    6ea4:	ff 90       	pop	r15
    6ea6:	ef 90       	pop	r14
    6ea8:	08 95       	ret

00006eaa <add1>:

void add1(void)
{
    6eaa:	df 93       	push	r29
    6eac:	cf 93       	push	r28
    6eae:	00 d0       	rcall	.+0      	; 0x6eb0 <add1+0x6>
    6eb0:	cd b7       	in	r28, 0x3d	; 61
    6eb2:	de b7       	in	r29, 0x3e	; 62
	switch (f1)
    6eb4:	80 91 56 03 	lds	r24, 0x0356
    6eb8:	28 2f       	mov	r18, r24
    6eba:	30 e0       	ldi	r19, 0x00	; 0
    6ebc:	3a 83       	std	Y+2, r19	; 0x02
    6ebe:	29 83       	std	Y+1, r18	; 0x01
    6ec0:	89 81       	ldd	r24, Y+1	; 0x01
    6ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec4:	82 30       	cpi	r24, 0x02	; 2
    6ec6:	91 05       	cpc	r25, r1
    6ec8:	b1 f1       	breq	.+108    	; 0x6f36 <add1+0x8c>
    6eca:	29 81       	ldd	r18, Y+1	; 0x01
    6ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    6ece:	23 30       	cpi	r18, 0x03	; 3
    6ed0:	31 05       	cpc	r19, r1
    6ed2:	54 f4       	brge	.+20     	; 0x6ee8 <add1+0x3e>
    6ed4:	89 81       	ldd	r24, Y+1	; 0x01
    6ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed8:	00 97       	sbiw	r24, 0x00	; 0
    6eda:	c9 f0       	breq	.+50     	; 0x6f0e <add1+0x64>
    6edc:	29 81       	ldd	r18, Y+1	; 0x01
    6ede:	3a 81       	ldd	r19, Y+2	; 0x02
    6ee0:	21 30       	cpi	r18, 0x01	; 1
    6ee2:	31 05       	cpc	r19, r1
    6ee4:	29 f1       	breq	.+74     	; 0x6f30 <add1+0x86>
    6ee6:	52 c0       	rjmp	.+164    	; 0x6f8c <add1+0xe2>
    6ee8:	89 81       	ldd	r24, Y+1	; 0x01
    6eea:	9a 81       	ldd	r25, Y+2	; 0x02
    6eec:	84 30       	cpi	r24, 0x04	; 4
    6eee:	91 05       	cpc	r25, r1
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <add1+0x4a>
    6ef2:	47 c0       	rjmp	.+142    	; 0x6f82 <add1+0xd8>
    6ef4:	29 81       	ldd	r18, Y+1	; 0x01
    6ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    6ef8:	24 30       	cpi	r18, 0x04	; 4
    6efa:	31 05       	cpc	r19, r1
    6efc:	0c f4       	brge	.+2      	; 0x6f00 <add1+0x56>
    6efe:	3e c0       	rjmp	.+124    	; 0x6f7c <add1+0xd2>
    6f00:	89 81       	ldd	r24, Y+1	; 0x01
    6f02:	9a 81       	ldd	r25, Y+2	; 0x02
    6f04:	85 30       	cpi	r24, 0x05	; 5
    6f06:	91 05       	cpc	r25, r1
    6f08:	09 f4       	brne	.+2      	; 0x6f0c <add1+0x62>
    6f0a:	3e c0       	rjmp	.+124    	; 0x6f88 <add1+0xde>
    6f0c:	3f c0       	rjmp	.+126    	; 0x6f8c <add1+0xe2>
	{
	case 0:
		num2=num1;
    6f0e:	80 91 52 03 	lds	r24, 0x0352
    6f12:	90 91 53 03 	lds	r25, 0x0353
    6f16:	a0 91 54 03 	lds	r26, 0x0354
    6f1a:	b0 91 55 03 	lds	r27, 0x0355
    6f1e:	80 93 4e 03 	sts	0x034E, r24
    6f22:	90 93 4f 03 	sts	0x034F, r25
    6f26:	a0 93 50 03 	sts	0x0350, r26
    6f2a:	b0 93 51 03 	sts	0x0351, r27
    6f2e:	2e c0       	rjmp	.+92     	; 0x6f8c <add1+0xe2>
		break;
	case 1:
		equ();
    6f30:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    6f34:	2b c0       	rjmp	.+86     	; 0x6f8c <add1+0xe2>
		break;
	case 2:
		if (f2==1)
    6f36:	80 91 4d 03 	lds	r24, 0x034D
    6f3a:	81 30       	cpi	r24, 0x01	; 1
    6f3c:	39 f5       	brne	.+78     	; 0x6f8c <add1+0xe2>
		{
			num2+=num1;
    6f3e:	80 91 4e 03 	lds	r24, 0x034E
    6f42:	90 91 4f 03 	lds	r25, 0x034F
    6f46:	a0 91 50 03 	lds	r26, 0x0350
    6f4a:	b0 91 51 03 	lds	r27, 0x0351
    6f4e:	20 91 52 03 	lds	r18, 0x0352
    6f52:	30 91 53 03 	lds	r19, 0x0353
    6f56:	40 91 54 03 	lds	r20, 0x0354
    6f5a:	50 91 55 03 	lds	r21, 0x0355
    6f5e:	82 0f       	add	r24, r18
    6f60:	93 1f       	adc	r25, r19
    6f62:	a4 1f       	adc	r26, r20
    6f64:	b5 1f       	adc	r27, r21
    6f66:	80 93 4e 03 	sts	0x034E, r24
    6f6a:	90 93 4f 03 	sts	0x034F, r25
    6f6e:	a0 93 50 03 	sts	0x0350, r26
    6f72:	b0 93 51 03 	sts	0x0351, r27
			equ();
    6f76:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    6f7a:	08 c0       	rjmp	.+16     	; 0x6f8c <add1+0xe2>
		}
		break;
	case 3:
		sub();
    6f7c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <sub>
    6f80:	05 c0       	rjmp	.+10     	; 0x6f8c <add1+0xe2>
		break;
	case 4:
		mul();
    6f82:	0e 94 65 35 	call	0x6aca	; 0x6aca <mul>
    6f86:	02 c0       	rjmp	.+4      	; 0x6f8c <add1+0xe2>
		break;
	case 5:
		div();
    6f88:	0e 94 a5 35 	call	0x6b4a	; 0x6b4a <div>
		break;
	}
	f1=2;
    6f8c:	82 e0       	ldi	r24, 0x02	; 2
    6f8e:	80 93 56 03 	sts	0x0356, r24
	f2=0;
    6f92:	10 92 4d 03 	sts	0x034D, r1
	num1=0;
    6f96:	10 92 52 03 	sts	0x0352, r1
    6f9a:	10 92 53 03 	sts	0x0353, r1
    6f9e:	10 92 54 03 	sts	0x0354, r1
    6fa2:	10 92 55 03 	sts	0x0355, r1
	LCD_WriteChar('+');
    6fa6:	8b e2       	ldi	r24, 0x2B	; 43
    6fa8:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
}
    6fac:	0f 90       	pop	r0
    6fae:	0f 90       	pop	r0
    6fb0:	cf 91       	pop	r28
    6fb2:	df 91       	pop	r29
    6fb4:	08 95       	ret

00006fb6 <sub1>:

void sub1(void)
{
    6fb6:	df 93       	push	r29
    6fb8:	cf 93       	push	r28
    6fba:	00 d0       	rcall	.+0      	; 0x6fbc <sub1+0x6>
    6fbc:	cd b7       	in	r28, 0x3d	; 61
    6fbe:	de b7       	in	r29, 0x3e	; 62
	switch (f1)
    6fc0:	80 91 56 03 	lds	r24, 0x0356
    6fc4:	28 2f       	mov	r18, r24
    6fc6:	30 e0       	ldi	r19, 0x00	; 0
    6fc8:	3a 83       	std	Y+2, r19	; 0x02
    6fca:	29 83       	std	Y+1, r18	; 0x01
    6fcc:	89 81       	ldd	r24, Y+1	; 0x01
    6fce:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd0:	82 30       	cpi	r24, 0x02	; 2
    6fd2:	91 05       	cpc	r25, r1
    6fd4:	a9 f1       	breq	.+106    	; 0x7040 <sub1+0x8a>
    6fd6:	29 81       	ldd	r18, Y+1	; 0x01
    6fd8:	3a 81       	ldd	r19, Y+2	; 0x02
    6fda:	23 30       	cpi	r18, 0x03	; 3
    6fdc:	31 05       	cpc	r19, r1
    6fde:	54 f4       	brge	.+20     	; 0x6ff4 <sub1+0x3e>
    6fe0:	89 81       	ldd	r24, Y+1	; 0x01
    6fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fe4:	00 97       	sbiw	r24, 0x00	; 0
    6fe6:	c1 f0       	breq	.+48     	; 0x7018 <sub1+0x62>
    6fe8:	29 81       	ldd	r18, Y+1	; 0x01
    6fea:	3a 81       	ldd	r19, Y+2	; 0x02
    6fec:	21 30       	cpi	r18, 0x01	; 1
    6fee:	31 05       	cpc	r19, r1
    6ff0:	21 f1       	breq	.+72     	; 0x703a <sub1+0x84>
    6ff2:	51 c0       	rjmp	.+162    	; 0x7096 <sub1+0xe0>
    6ff4:	89 81       	ldd	r24, Y+1	; 0x01
    6ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ff8:	84 30       	cpi	r24, 0x04	; 4
    6ffa:	91 05       	cpc	r25, r1
    6ffc:	09 f4       	brne	.+2      	; 0x7000 <sub1+0x4a>
    6ffe:	46 c0       	rjmp	.+140    	; 0x708c <sub1+0xd6>
    7000:	29 81       	ldd	r18, Y+1	; 0x01
    7002:	3a 81       	ldd	r19, Y+2	; 0x02
    7004:	24 30       	cpi	r18, 0x04	; 4
    7006:	31 05       	cpc	r19, r1
    7008:	f4 f0       	brlt	.+60     	; 0x7046 <sub1+0x90>
    700a:	89 81       	ldd	r24, Y+1	; 0x01
    700c:	9a 81       	ldd	r25, Y+2	; 0x02
    700e:	85 30       	cpi	r24, 0x05	; 5
    7010:	91 05       	cpc	r25, r1
    7012:	09 f4       	brne	.+2      	; 0x7016 <sub1+0x60>
    7014:	3e c0       	rjmp	.+124    	; 0x7092 <sub1+0xdc>
    7016:	3f c0       	rjmp	.+126    	; 0x7096 <sub1+0xe0>
	{
	case 0:
		num2=num1;
    7018:	80 91 52 03 	lds	r24, 0x0352
    701c:	90 91 53 03 	lds	r25, 0x0353
    7020:	a0 91 54 03 	lds	r26, 0x0354
    7024:	b0 91 55 03 	lds	r27, 0x0355
    7028:	80 93 4e 03 	sts	0x034E, r24
    702c:	90 93 4f 03 	sts	0x034F, r25
    7030:	a0 93 50 03 	sts	0x0350, r26
    7034:	b0 93 51 03 	sts	0x0351, r27
    7038:	2e c0       	rjmp	.+92     	; 0x7096 <sub1+0xe0>
		break;
	case 1:
		equ();
    703a:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    703e:	2b c0       	rjmp	.+86     	; 0x7096 <sub1+0xe0>
		break;
	case 2:
		add();
    7040:	0e 94 dd 34 	call	0x69ba	; 0x69ba <add>
    7044:	28 c0       	rjmp	.+80     	; 0x7096 <sub1+0xe0>
		break;
	case 3:
		if (f2==1)
    7046:	80 91 4d 03 	lds	r24, 0x034D
    704a:	81 30       	cpi	r24, 0x01	; 1
    704c:	21 f5       	brne	.+72     	; 0x7096 <sub1+0xe0>
		{
			num2-=num1;
    704e:	80 91 4e 03 	lds	r24, 0x034E
    7052:	90 91 4f 03 	lds	r25, 0x034F
    7056:	a0 91 50 03 	lds	r26, 0x0350
    705a:	b0 91 51 03 	lds	r27, 0x0351
    705e:	20 91 52 03 	lds	r18, 0x0352
    7062:	30 91 53 03 	lds	r19, 0x0353
    7066:	40 91 54 03 	lds	r20, 0x0354
    706a:	50 91 55 03 	lds	r21, 0x0355
    706e:	82 1b       	sub	r24, r18
    7070:	93 0b       	sbc	r25, r19
    7072:	a4 0b       	sbc	r26, r20
    7074:	b5 0b       	sbc	r27, r21
    7076:	80 93 4e 03 	sts	0x034E, r24
    707a:	90 93 4f 03 	sts	0x034F, r25
    707e:	a0 93 50 03 	sts	0x0350, r26
    7082:	b0 93 51 03 	sts	0x0351, r27
			equ();
    7086:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    708a:	05 c0       	rjmp	.+10     	; 0x7096 <sub1+0xe0>
		}
		break;
	case 4:
		mul();
    708c:	0e 94 65 35 	call	0x6aca	; 0x6aca <mul>
    7090:	02 c0       	rjmp	.+4      	; 0x7096 <sub1+0xe0>
		break;
	case 5:
		div();
    7092:	0e 94 a5 35 	call	0x6b4a	; 0x6b4a <div>
		break;
	}
	f1=3;
    7096:	83 e0       	ldi	r24, 0x03	; 3
    7098:	80 93 56 03 	sts	0x0356, r24
	f2=0;
    709c:	10 92 4d 03 	sts	0x034D, r1
	num1=0;
    70a0:	10 92 52 03 	sts	0x0352, r1
    70a4:	10 92 53 03 	sts	0x0353, r1
    70a8:	10 92 54 03 	sts	0x0354, r1
    70ac:	10 92 55 03 	sts	0x0355, r1
	LCD_WriteChar('-');
    70b0:	8d e2       	ldi	r24, 0x2D	; 45
    70b2:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
}
    70b6:	0f 90       	pop	r0
    70b8:	0f 90       	pop	r0
    70ba:	cf 91       	pop	r28
    70bc:	df 91       	pop	r29
    70be:	08 95       	ret

000070c0 <mul1>:

void mul1(void)
{
    70c0:	df 93       	push	r29
    70c2:	cf 93       	push	r28
    70c4:	00 d0       	rcall	.+0      	; 0x70c6 <mul1+0x6>
    70c6:	cd b7       	in	r28, 0x3d	; 61
    70c8:	de b7       	in	r29, 0x3e	; 62
	switch (f1)
    70ca:	80 91 56 03 	lds	r24, 0x0356
    70ce:	28 2f       	mov	r18, r24
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	3a 83       	std	Y+2, r19	; 0x02
    70d4:	29 83       	std	Y+1, r18	; 0x01
    70d6:	89 81       	ldd	r24, Y+1	; 0x01
    70d8:	9a 81       	ldd	r25, Y+2	; 0x02
    70da:	82 30       	cpi	r24, 0x02	; 2
    70dc:	91 05       	cpc	r25, r1
    70de:	a1 f1       	breq	.+104    	; 0x7148 <mul1+0x88>
    70e0:	29 81       	ldd	r18, Y+1	; 0x01
    70e2:	3a 81       	ldd	r19, Y+2	; 0x02
    70e4:	23 30       	cpi	r18, 0x03	; 3
    70e6:	31 05       	cpc	r19, r1
    70e8:	54 f4       	brge	.+20     	; 0x70fe <mul1+0x3e>
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	00 97       	sbiw	r24, 0x00	; 0
    70f0:	b9 f0       	breq	.+46     	; 0x7120 <mul1+0x60>
    70f2:	29 81       	ldd	r18, Y+1	; 0x01
    70f4:	3a 81       	ldd	r19, Y+2	; 0x02
    70f6:	21 30       	cpi	r18, 0x01	; 1
    70f8:	31 05       	cpc	r19, r1
    70fa:	19 f1       	breq	.+70     	; 0x7142 <mul1+0x82>
    70fc:	52 c0       	rjmp	.+164    	; 0x71a2 <mul1+0xe2>
    70fe:	89 81       	ldd	r24, Y+1	; 0x01
    7100:	9a 81       	ldd	r25, Y+2	; 0x02
    7102:	84 30       	cpi	r24, 0x04	; 4
    7104:	91 05       	cpc	r25, r1
    7106:	31 f1       	breq	.+76     	; 0x7154 <mul1+0x94>
    7108:	29 81       	ldd	r18, Y+1	; 0x01
    710a:	3a 81       	ldd	r19, Y+2	; 0x02
    710c:	24 30       	cpi	r18, 0x04	; 4
    710e:	31 05       	cpc	r19, r1
    7110:	f4 f0       	brlt	.+60     	; 0x714e <mul1+0x8e>
    7112:	89 81       	ldd	r24, Y+1	; 0x01
    7114:	9a 81       	ldd	r25, Y+2	; 0x02
    7116:	85 30       	cpi	r24, 0x05	; 5
    7118:	91 05       	cpc	r25, r1
    711a:	09 f4       	brne	.+2      	; 0x711e <mul1+0x5e>
    711c:	40 c0       	rjmp	.+128    	; 0x719e <mul1+0xde>
    711e:	41 c0       	rjmp	.+130    	; 0x71a2 <mul1+0xe2>
	{
	case 0:
		num2=num1;
    7120:	80 91 52 03 	lds	r24, 0x0352
    7124:	90 91 53 03 	lds	r25, 0x0353
    7128:	a0 91 54 03 	lds	r26, 0x0354
    712c:	b0 91 55 03 	lds	r27, 0x0355
    7130:	80 93 4e 03 	sts	0x034E, r24
    7134:	90 93 4f 03 	sts	0x034F, r25
    7138:	a0 93 50 03 	sts	0x0350, r26
    713c:	b0 93 51 03 	sts	0x0351, r27
    7140:	30 c0       	rjmp	.+96     	; 0x71a2 <mul1+0xe2>
		break;
	case 1:
		equ();
    7142:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    7146:	2d c0       	rjmp	.+90     	; 0x71a2 <mul1+0xe2>
		break;
	case 2:
		add();
    7148:	0e 94 dd 34 	call	0x69ba	; 0x69ba <add>
    714c:	2a c0       	rjmp	.+84     	; 0x71a2 <mul1+0xe2>
		break;
	case 3:
		sub();
    714e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <sub>
    7152:	27 c0       	rjmp	.+78     	; 0x71a2 <mul1+0xe2>
		break;
	case 4:
		if (f2==1)
    7154:	80 91 4d 03 	lds	r24, 0x034D
    7158:	81 30       	cpi	r24, 0x01	; 1
    715a:	19 f5       	brne	.+70     	; 0x71a2 <mul1+0xe2>
		{
			num2*=num1;
    715c:	80 91 4e 03 	lds	r24, 0x034E
    7160:	90 91 4f 03 	lds	r25, 0x034F
    7164:	a0 91 50 03 	lds	r26, 0x0350
    7168:	b0 91 51 03 	lds	r27, 0x0351
    716c:	20 91 52 03 	lds	r18, 0x0352
    7170:	30 91 53 03 	lds	r19, 0x0353
    7174:	40 91 54 03 	lds	r20, 0x0354
    7178:	50 91 55 03 	lds	r21, 0x0355
    717c:	bc 01       	movw	r22, r24
    717e:	cd 01       	movw	r24, r26
    7180:	0e 94 94 3c 	call	0x7928	; 0x7928 <__mulsi3>
    7184:	dc 01       	movw	r26, r24
    7186:	cb 01       	movw	r24, r22
    7188:	80 93 4e 03 	sts	0x034E, r24
    718c:	90 93 4f 03 	sts	0x034F, r25
    7190:	a0 93 50 03 	sts	0x0350, r26
    7194:	b0 93 51 03 	sts	0x0351, r27
			equ();
    7198:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <mul1+0xe2>
		}
		break;
	case 5:
		div();
    719e:	0e 94 a5 35 	call	0x6b4a	; 0x6b4a <div>
		break;
	}
	num1=0;
    71a2:	10 92 52 03 	sts	0x0352, r1
    71a6:	10 92 53 03 	sts	0x0353, r1
    71aa:	10 92 54 03 	sts	0x0354, r1
    71ae:	10 92 55 03 	sts	0x0355, r1
	f1=4;
    71b2:	84 e0       	ldi	r24, 0x04	; 4
    71b4:	80 93 56 03 	sts	0x0356, r24
	f2=0;
    71b8:	10 92 4d 03 	sts	0x034D, r1
	LCD_WriteChar('*');
    71bc:	8a e2       	ldi	r24, 0x2A	; 42
    71be:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
}
    71c2:	0f 90       	pop	r0
    71c4:	0f 90       	pop	r0
    71c6:	cf 91       	pop	r28
    71c8:	df 91       	pop	r29
    71ca:	08 95       	ret

000071cc <div1>:

void div1(void)
{
    71cc:	df 93       	push	r29
    71ce:	cf 93       	push	r28
    71d0:	00 d0       	rcall	.+0      	; 0x71d2 <div1+0x6>
    71d2:	cd b7       	in	r28, 0x3d	; 61
    71d4:	de b7       	in	r29, 0x3e	; 62
	switch (f1)
    71d6:	80 91 56 03 	lds	r24, 0x0356
    71da:	28 2f       	mov	r18, r24
    71dc:	30 e0       	ldi	r19, 0x00	; 0
    71de:	3a 83       	std	Y+2, r19	; 0x02
    71e0:	29 83       	std	Y+1, r18	; 0x01
    71e2:	89 81       	ldd	r24, Y+1	; 0x01
    71e4:	9a 81       	ldd	r25, Y+2	; 0x02
    71e6:	82 30       	cpi	r24, 0x02	; 2
    71e8:	91 05       	cpc	r25, r1
    71ea:	99 f1       	breq	.+102    	; 0x7252 <div1+0x86>
    71ec:	29 81       	ldd	r18, Y+1	; 0x01
    71ee:	3a 81       	ldd	r19, Y+2	; 0x02
    71f0:	23 30       	cpi	r18, 0x03	; 3
    71f2:	31 05       	cpc	r19, r1
    71f4:	54 f4       	brge	.+20     	; 0x720a <div1+0x3e>
    71f6:	89 81       	ldd	r24, Y+1	; 0x01
    71f8:	9a 81       	ldd	r25, Y+2	; 0x02
    71fa:	00 97       	sbiw	r24, 0x00	; 0
    71fc:	b1 f0       	breq	.+44     	; 0x722a <div1+0x5e>
    71fe:	29 81       	ldd	r18, Y+1	; 0x01
    7200:	3a 81       	ldd	r19, Y+2	; 0x02
    7202:	21 30       	cpi	r18, 0x01	; 1
    7204:	31 05       	cpc	r19, r1
    7206:	11 f1       	breq	.+68     	; 0x724c <div1+0x80>
    7208:	62 c0       	rjmp	.+196    	; 0x72ce <div1+0x102>
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	9a 81       	ldd	r25, Y+2	; 0x02
    720e:	84 30       	cpi	r24, 0x04	; 4
    7210:	91 05       	cpc	r25, r1
    7212:	29 f1       	breq	.+74     	; 0x725e <div1+0x92>
    7214:	29 81       	ldd	r18, Y+1	; 0x01
    7216:	3a 81       	ldd	r19, Y+2	; 0x02
    7218:	24 30       	cpi	r18, 0x04	; 4
    721a:	31 05       	cpc	r19, r1
    721c:	ec f0       	brlt	.+58     	; 0x7258 <div1+0x8c>
    721e:	89 81       	ldd	r24, Y+1	; 0x01
    7220:	9a 81       	ldd	r25, Y+2	; 0x02
    7222:	85 30       	cpi	r24, 0x05	; 5
    7224:	91 05       	cpc	r25, r1
    7226:	f1 f0       	breq	.+60     	; 0x7264 <div1+0x98>
    7228:	52 c0       	rjmp	.+164    	; 0x72ce <div1+0x102>
	{
	case 0:
		num2=num1;
    722a:	80 91 52 03 	lds	r24, 0x0352
    722e:	90 91 53 03 	lds	r25, 0x0353
    7232:	a0 91 54 03 	lds	r26, 0x0354
    7236:	b0 91 55 03 	lds	r27, 0x0355
    723a:	80 93 4e 03 	sts	0x034E, r24
    723e:	90 93 4f 03 	sts	0x034F, r25
    7242:	a0 93 50 03 	sts	0x0350, r26
    7246:	b0 93 51 03 	sts	0x0351, r27
    724a:	41 c0       	rjmp	.+130    	; 0x72ce <div1+0x102>
		break;
	case 1:
		equ();
    724c:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
    7250:	3e c0       	rjmp	.+124    	; 0x72ce <div1+0x102>
		break;
	case 2:
		add();
    7252:	0e 94 dd 34 	call	0x69ba	; 0x69ba <add>
    7256:	3b c0       	rjmp	.+118    	; 0x72ce <div1+0x102>
		break;
	case 3:
		sub();
    7258:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <sub>
    725c:	38 c0       	rjmp	.+112    	; 0x72ce <div1+0x102>
		break;
	case 4:
		mul();
    725e:	0e 94 65 35 	call	0x6aca	; 0x6aca <mul>
    7262:	35 c0       	rjmp	.+106    	; 0x72ce <div1+0x102>
		break;
	case 5:
		if (f2==1)
    7264:	80 91 4d 03 	lds	r24, 0x034D
    7268:	81 30       	cpi	r24, 0x01	; 1
    726a:	89 f5       	brne	.+98     	; 0x72ce <div1+0x102>
		{
			if (num1==0)
    726c:	80 91 52 03 	lds	r24, 0x0352
    7270:	90 91 53 03 	lds	r25, 0x0353
    7274:	a0 91 54 03 	lds	r26, 0x0354
    7278:	b0 91 55 03 	lds	r27, 0x0355
    727c:	00 97       	sbiw	r24, 0x00	; 0
    727e:	a1 05       	cpc	r26, r1
    7280:	b1 05       	cpc	r27, r1
    7282:	29 f4       	brne	.+10     	; 0x728e <div1+0xc2>
			{
				LCD_WriteString("ERROR");
    7284:	80 e4       	ldi	r24, 0x40	; 64
    7286:	92 e0       	ldi	r25, 0x02	; 2
    7288:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    728c:	20 c0       	rjmp	.+64     	; 0x72ce <div1+0x102>
			}
			else
			{
				num2/=num1;
    728e:	80 91 4e 03 	lds	r24, 0x034E
    7292:	90 91 4f 03 	lds	r25, 0x034F
    7296:	a0 91 50 03 	lds	r26, 0x0350
    729a:	b0 91 51 03 	lds	r27, 0x0351
    729e:	20 91 52 03 	lds	r18, 0x0352
    72a2:	30 91 53 03 	lds	r19, 0x0353
    72a6:	40 91 54 03 	lds	r20, 0x0354
    72aa:	50 91 55 03 	lds	r21, 0x0355
    72ae:	bc 01       	movw	r22, r24
    72b0:	cd 01       	movw	r24, r26
    72b2:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__divmodsi4>
    72b6:	da 01       	movw	r26, r20
    72b8:	c9 01       	movw	r24, r18
    72ba:	80 93 4e 03 	sts	0x034E, r24
    72be:	90 93 4f 03 	sts	0x034F, r25
    72c2:	a0 93 50 03 	sts	0x0350, r26
    72c6:	b0 93 51 03 	sts	0x0351, r27
				equ();
    72ca:	0e 94 c8 34 	call	0x6990	; 0x6990 <equ>
			}
		}
		break;
	}
	num1=0;
    72ce:	10 92 52 03 	sts	0x0352, r1
    72d2:	10 92 53 03 	sts	0x0353, r1
    72d6:	10 92 54 03 	sts	0x0354, r1
    72da:	10 92 55 03 	sts	0x0355, r1
	f1=5;
    72de:	85 e0       	ldi	r24, 0x05	; 5
    72e0:	80 93 56 03 	sts	0x0356, r24
	f2=0;
    72e4:	10 92 4d 03 	sts	0x034D, r1
	LCD_WriteChar('/');
    72e8:	8f e2       	ldi	r24, 0x2F	; 47
    72ea:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
}
    72ee:	0f 90       	pop	r0
    72f0:	0f 90       	pop	r0
    72f2:	cf 91       	pop	r28
    72f4:	df 91       	pop	r29
    72f6:	08 95       	ret

000072f8 <ADCS_init>:
#include "KeyPad/KeyPad_Cfg.h"
#include "KeyPad/KeyPad_Interface.h"
#include "ADCS.h"

void ADCS_init()
{
    72f8:	df 93       	push	r29
    72fa:	cf 93       	push	r28
    72fc:	cd b7       	in	r28, 0x3d	; 61
    72fe:	de b7       	in	r29, 0x3e	; 62
	SRV_Init();
    7300:	0e 94 2e 18 	call	0x305c	; 0x305c <SRV_Init>
	SRV_Motor_Stop();
    7304:	0e 94 68 18 	call	0x30d0	; 0x30d0 <SRV_Motor_Stop>
	DIO_WritePin(led,LOW);
    7308:	8f e0       	ldi	r24, 0x0F	; 15
    730a:	60 e0       	ldi	r22, 0x00	; 0
    730c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
	DIO_WritePin(buzzer,LOW);
    7310:	86 e1       	ldi	r24, 0x16	; 22
    7312:	60 e0       	ldi	r22, 0x00	; 0
    7314:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
}
    7318:	cf 91       	pop	r28
    731a:	df 91       	pop	r29
    731c:	08 95       	ret

0000731e <ADCS_Runnable>:

void ADCS_Runnable()
{
    731e:	0f 93       	push	r16
    7320:	1f 93       	push	r17
    7322:	df 93       	push	r29
    7324:	cf 93       	push	r28
    7326:	cd b7       	in	r28, 0x3d	; 61
    7328:	de b7       	in	r29, 0x3e	; 62
    732a:	ca 54       	subi	r28, 0x4A	; 74
    732c:	d0 40       	sbci	r29, 0x00	; 0
    732e:	0f b6       	in	r0, 0x3f	; 63
    7330:	f8 94       	cli
    7332:	de bf       	out	0x3e, r29	; 62
    7334:	0f be       	out	0x3f, r0	; 63
    7336:	cd bf       	out	0x3d, r28	; 61
	static u8 pass_trails = 0;
	u16 num = 0;
    7338:	fe 01       	movw	r30, r28
    733a:	e7 5b       	subi	r30, 0xB7	; 183
    733c:	ff 4f       	sbci	r31, 0xFF	; 255
    733e:	11 82       	std	Z+1, r1	; 0x01
    7340:	10 82       	st	Z, r1
	u8 i = 0;
    7342:	fe 01       	movw	r30, r28
    7344:	e8 5b       	subi	r30, 0xB8	; 184
    7346:	ff 4f       	sbci	r31, 0xFF	; 255
    7348:	10 82       	st	Z, r1
	LCD_Clear();
    734a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
	LCD_WriteString("Enter Password:");
    734e:	86 e4       	ldi	r24, 0x46	; 70
    7350:	92 e0       	ldi	r25, 0x02	; 2
    7352:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    7356:	38 c0       	rjmp	.+112    	; 0x73c8 <ADCS_Runnable+0xaa>
	while(i<4)
	{
		u8 k=KeyPad_get();
    7358:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <KeyPad_get>
    735c:	fe 01       	movw	r30, r28
    735e:	e9 5b       	subi	r30, 0xB9	; 185
    7360:	ff 4f       	sbci	r31, 0xFF	; 255
    7362:	80 83       	st	Z, r24
		if(k!=NO_KEY)
    7364:	fe 01       	movw	r30, r28
    7366:	e9 5b       	subi	r30, 0xB9	; 185
    7368:	ff 4f       	sbci	r31, 0xFF	; 255
    736a:	80 81       	ld	r24, Z
    736c:	84 35       	cpi	r24, 0x54	; 84
    736e:	61 f1       	breq	.+88     	; 0x73c8 <ADCS_Runnable+0xaa>
			{
				LCD_WriteChar(k);
    7370:	fe 01       	movw	r30, r28
    7372:	e9 5b       	subi	r30, 0xB9	; 185
    7374:	ff 4f       	sbci	r31, 0xFF	; 255
    7376:	80 81       	ld	r24, Z
    7378:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <LCD_WriteChar>
				num=num*10+(k-'0');
    737c:	fe 01       	movw	r30, r28
    737e:	e7 5b       	subi	r30, 0xB7	; 183
    7380:	ff 4f       	sbci	r31, 0xFF	; 255
    7382:	80 81       	ld	r24, Z
    7384:	91 81       	ldd	r25, Z+1	; 0x01
    7386:	9c 01       	movw	r18, r24
    7388:	22 0f       	add	r18, r18
    738a:	33 1f       	adc	r19, r19
    738c:	c9 01       	movw	r24, r18
    738e:	88 0f       	add	r24, r24
    7390:	99 1f       	adc	r25, r25
    7392:	88 0f       	add	r24, r24
    7394:	99 1f       	adc	r25, r25
    7396:	28 0f       	add	r18, r24
    7398:	39 1f       	adc	r19, r25
    739a:	fe 01       	movw	r30, r28
    739c:	e9 5b       	subi	r30, 0xB9	; 185
    739e:	ff 4f       	sbci	r31, 0xFF	; 255
    73a0:	80 81       	ld	r24, Z
    73a2:	88 2f       	mov	r24, r24
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	82 0f       	add	r24, r18
    73a8:	93 1f       	adc	r25, r19
    73aa:	fe 01       	movw	r30, r28
    73ac:	e7 5b       	subi	r30, 0xB7	; 183
    73ae:	ff 4f       	sbci	r31, 0xFF	; 255
    73b0:	c0 97       	sbiw	r24, 0x30	; 48
    73b2:	91 83       	std	Z+1, r25	; 0x01
    73b4:	80 83       	st	Z, r24
				i++;
    73b6:	de 01       	movw	r26, r28
    73b8:	a8 5b       	subi	r26, 0xB8	; 184
    73ba:	bf 4f       	sbci	r27, 0xFF	; 255
    73bc:	fe 01       	movw	r30, r28
    73be:	e8 5b       	subi	r30, 0xB8	; 184
    73c0:	ff 4f       	sbci	r31, 0xFF	; 255
    73c2:	80 81       	ld	r24, Z
    73c4:	8f 5f       	subi	r24, 0xFF	; 255
    73c6:	8c 93       	st	X, r24
	static u8 pass_trails = 0;
	u16 num = 0;
	u8 i = 0;
	LCD_Clear();
	LCD_WriteString("Enter Password:");
	while(i<4)
    73c8:	fe 01       	movw	r30, r28
    73ca:	e8 5b       	subi	r30, 0xB8	; 184
    73cc:	ff 4f       	sbci	r31, 0xFF	; 255
    73ce:	80 81       	ld	r24, Z
    73d0:	84 30       	cpi	r24, 0x04	; 4
    73d2:	10 f2       	brcs	.-124    	; 0x7358 <ADCS_Runnable+0x3a>
    73d4:	fe 01       	movw	r30, r28
    73d6:	ed 5b       	subi	r30, 0xBD	; 189
    73d8:	ff 4f       	sbci	r31, 0xFF	; 255
    73da:	80 e0       	ldi	r24, 0x00	; 0
    73dc:	90 e0       	ldi	r25, 0x00	; 0
    73de:	a8 ec       	ldi	r26, 0xC8	; 200
    73e0:	b2 e4       	ldi	r27, 0x42	; 66
    73e2:	80 83       	st	Z, r24
    73e4:	91 83       	std	Z+1, r25	; 0x01
    73e6:	a2 83       	std	Z+2, r26	; 0x02
    73e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73ea:	8e 01       	movw	r16, r28
    73ec:	01 5c       	subi	r16, 0xC1	; 193
    73ee:	1f 4f       	sbci	r17, 0xFF	; 255
    73f0:	fe 01       	movw	r30, r28
    73f2:	ed 5b       	subi	r30, 0xBD	; 189
    73f4:	ff 4f       	sbci	r31, 0xFF	; 255
    73f6:	60 81       	ld	r22, Z
    73f8:	71 81       	ldd	r23, Z+1	; 0x01
    73fa:	82 81       	ldd	r24, Z+2	; 0x02
    73fc:	93 81       	ldd	r25, Z+3	; 0x03
    73fe:	20 e0       	ldi	r18, 0x00	; 0
    7400:	30 e0       	ldi	r19, 0x00	; 0
    7402:	4a ef       	ldi	r20, 0xFA	; 250
    7404:	54 e4       	ldi	r21, 0x44	; 68
    7406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    740a:	dc 01       	movw	r26, r24
    740c:	cb 01       	movw	r24, r22
    740e:	f8 01       	movw	r30, r16
    7410:	80 83       	st	Z, r24
    7412:	91 83       	std	Z+1, r25	; 0x01
    7414:	a2 83       	std	Z+2, r26	; 0x02
    7416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7418:	fe 01       	movw	r30, r28
    741a:	ff 96       	adiw	r30, 0x3f	; 63
    741c:	60 81       	ld	r22, Z
    741e:	71 81       	ldd	r23, Z+1	; 0x01
    7420:	82 81       	ldd	r24, Z+2	; 0x02
    7422:	93 81       	ldd	r25, Z+3	; 0x03
    7424:	20 e0       	ldi	r18, 0x00	; 0
    7426:	30 e0       	ldi	r19, 0x00	; 0
    7428:	40 e8       	ldi	r20, 0x80	; 128
    742a:	5f e3       	ldi	r21, 0x3F	; 63
    742c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    7430:	88 23       	and	r24, r24
    7432:	2c f4       	brge	.+10     	; 0x743e <ADCS_Runnable+0x120>
		__ticks = 1;
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	90 e0       	ldi	r25, 0x00	; 0
    7438:	9e af       	std	Y+62, r25	; 0x3e
    743a:	8d af       	std	Y+61, r24	; 0x3d
    743c:	46 c0       	rjmp	.+140    	; 0x74ca <ADCS_Runnable+0x1ac>
	else if (__tmp > 65535)
    743e:	fe 01       	movw	r30, r28
    7440:	ff 96       	adiw	r30, 0x3f	; 63
    7442:	60 81       	ld	r22, Z
    7444:	71 81       	ldd	r23, Z+1	; 0x01
    7446:	82 81       	ldd	r24, Z+2	; 0x02
    7448:	93 81       	ldd	r25, Z+3	; 0x03
    744a:	20 e0       	ldi	r18, 0x00	; 0
    744c:	3f ef       	ldi	r19, 0xFF	; 255
    744e:	4f e7       	ldi	r20, 0x7F	; 127
    7450:	57 e4       	ldi	r21, 0x47	; 71
    7452:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    7456:	18 16       	cp	r1, r24
    7458:	64 f5       	brge	.+88     	; 0x74b2 <ADCS_Runnable+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    745a:	fe 01       	movw	r30, r28
    745c:	ed 5b       	subi	r30, 0xBD	; 189
    745e:	ff 4f       	sbci	r31, 0xFF	; 255
    7460:	60 81       	ld	r22, Z
    7462:	71 81       	ldd	r23, Z+1	; 0x01
    7464:	82 81       	ldd	r24, Z+2	; 0x02
    7466:	93 81       	ldd	r25, Z+3	; 0x03
    7468:	20 e0       	ldi	r18, 0x00	; 0
    746a:	30 e0       	ldi	r19, 0x00	; 0
    746c:	40 e2       	ldi	r20, 0x20	; 32
    746e:	51 e4       	ldi	r21, 0x41	; 65
    7470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7474:	dc 01       	movw	r26, r24
    7476:	cb 01       	movw	r24, r22
    7478:	bc 01       	movw	r22, r24
    747a:	cd 01       	movw	r24, r26
    747c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7480:	dc 01       	movw	r26, r24
    7482:	cb 01       	movw	r24, r22
    7484:	9e af       	std	Y+62, r25	; 0x3e
    7486:	8d af       	std	Y+61, r24	; 0x3d
    7488:	0f c0       	rjmp	.+30     	; 0x74a8 <ADCS_Runnable+0x18a>
    748a:	88 ec       	ldi	r24, 0xC8	; 200
    748c:	90 e0       	ldi	r25, 0x00	; 0
    748e:	9c af       	std	Y+60, r25	; 0x3c
    7490:	8b af       	std	Y+59, r24	; 0x3b
    7492:	8b ad       	ldd	r24, Y+59	; 0x3b
    7494:	9c ad       	ldd	r25, Y+60	; 0x3c
    7496:	01 97       	sbiw	r24, 0x01	; 1
    7498:	f1 f7       	brne	.-4      	; 0x7496 <ADCS_Runnable+0x178>
    749a:	9c af       	std	Y+60, r25	; 0x3c
    749c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    749e:	8d ad       	ldd	r24, Y+61	; 0x3d
    74a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    74a2:	01 97       	sbiw	r24, 0x01	; 1
    74a4:	9e af       	std	Y+62, r25	; 0x3e
    74a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    74aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    74ac:	00 97       	sbiw	r24, 0x00	; 0
    74ae:	69 f7       	brne	.-38     	; 0x748a <ADCS_Runnable+0x16c>
    74b0:	16 c0       	rjmp	.+44     	; 0x74de <ADCS_Runnable+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74b2:	fe 01       	movw	r30, r28
    74b4:	ff 96       	adiw	r30, 0x3f	; 63
    74b6:	60 81       	ld	r22, Z
    74b8:	71 81       	ldd	r23, Z+1	; 0x01
    74ba:	82 81       	ldd	r24, Z+2	; 0x02
    74bc:	93 81       	ldd	r25, Z+3	; 0x03
    74be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74c2:	dc 01       	movw	r26, r24
    74c4:	cb 01       	movw	r24, r22
    74c6:	9e af       	std	Y+62, r25	; 0x3e
    74c8:	8d af       	std	Y+61, r24	; 0x3d
    74ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    74cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    74ce:	9a af       	std	Y+58, r25	; 0x3a
    74d0:	89 af       	std	Y+57, r24	; 0x39
    74d2:	89 ad       	ldd	r24, Y+57	; 0x39
    74d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    74d6:	01 97       	sbiw	r24, 0x01	; 1
    74d8:	f1 f7       	brne	.-4      	; 0x74d6 <ADCS_Runnable+0x1b8>
    74da:	9a af       	std	Y+58, r25	; 0x3a
    74dc:	89 af       	std	Y+57, r24	; 0x39
				i++;
			}
	}
	_delay_ms(100);

	if(num==Password)
    74de:	fe 01       	movw	r30, r28
    74e0:	e7 5b       	subi	r30, 0xB7	; 183
    74e2:	ff 4f       	sbci	r31, 0xFF	; 255
    74e4:	80 81       	ld	r24, Z
    74e6:	91 81       	ldd	r25, Z+1	; 0x01
    74e8:	f4 e0       	ldi	r31, 0x04	; 4
    74ea:	82 3d       	cpi	r24, 0xD2	; 210
    74ec:	9f 07       	cpc	r25, r31
    74ee:	09 f0       	breq	.+2      	; 0x74f2 <ADCS_Runnable+0x1d4>
    74f0:	81 c0       	rjmp	.+258    	; 0x75f4 <ADCS_Runnable+0x2d6>
	{
		LCD_Clear();
    74f2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Welcome !");
    74f6:	86 e5       	ldi	r24, 0x56	; 86
    74f8:	92 e0       	ldi	r25, 0x02	; 2
    74fa:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
		SRV_Motor_Start(Door_open);
    74fe:	84 eb       	ldi	r24, 0xB4	; 180
    7500:	0e 94 37 18 	call	0x306e	; 0x306e <SRV_Motor_Start>
    7504:	80 e0       	ldi	r24, 0x00	; 0
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	aa ef       	ldi	r26, 0xFA	; 250
    750a:	b4 e4       	ldi	r27, 0x44	; 68
    750c:	8d ab       	std	Y+53, r24	; 0x35
    750e:	9e ab       	std	Y+54, r25	; 0x36
    7510:	af ab       	std	Y+55, r26	; 0x37
    7512:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7514:	6d a9       	ldd	r22, Y+53	; 0x35
    7516:	7e a9       	ldd	r23, Y+54	; 0x36
    7518:	8f a9       	ldd	r24, Y+55	; 0x37
    751a:	98 ad       	ldd	r25, Y+56	; 0x38
    751c:	20 e0       	ldi	r18, 0x00	; 0
    751e:	30 e0       	ldi	r19, 0x00	; 0
    7520:	4a ef       	ldi	r20, 0xFA	; 250
    7522:	54 e4       	ldi	r21, 0x44	; 68
    7524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7528:	dc 01       	movw	r26, r24
    752a:	cb 01       	movw	r24, r22
    752c:	89 ab       	std	Y+49, r24	; 0x31
    752e:	9a ab       	std	Y+50, r25	; 0x32
    7530:	ab ab       	std	Y+51, r26	; 0x33
    7532:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7534:	69 a9       	ldd	r22, Y+49	; 0x31
    7536:	7a a9       	ldd	r23, Y+50	; 0x32
    7538:	8b a9       	ldd	r24, Y+51	; 0x33
    753a:	9c a9       	ldd	r25, Y+52	; 0x34
    753c:	20 e0       	ldi	r18, 0x00	; 0
    753e:	30 e0       	ldi	r19, 0x00	; 0
    7540:	40 e8       	ldi	r20, 0x80	; 128
    7542:	5f e3       	ldi	r21, 0x3F	; 63
    7544:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    7548:	88 23       	and	r24, r24
    754a:	2c f4       	brge	.+10     	; 0x7556 <ADCS_Runnable+0x238>
		__ticks = 1;
    754c:	81 e0       	ldi	r24, 0x01	; 1
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	98 ab       	std	Y+48, r25	; 0x30
    7552:	8f a7       	std	Y+47, r24	; 0x2f
    7554:	3f c0       	rjmp	.+126    	; 0x75d4 <ADCS_Runnable+0x2b6>
	else if (__tmp > 65535)
    7556:	69 a9       	ldd	r22, Y+49	; 0x31
    7558:	7a a9       	ldd	r23, Y+50	; 0x32
    755a:	8b a9       	ldd	r24, Y+51	; 0x33
    755c:	9c a9       	ldd	r25, Y+52	; 0x34
    755e:	20 e0       	ldi	r18, 0x00	; 0
    7560:	3f ef       	ldi	r19, 0xFF	; 255
    7562:	4f e7       	ldi	r20, 0x7F	; 127
    7564:	57 e4       	ldi	r21, 0x47	; 71
    7566:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    756a:	18 16       	cp	r1, r24
    756c:	4c f5       	brge	.+82     	; 0x75c0 <ADCS_Runnable+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    756e:	6d a9       	ldd	r22, Y+53	; 0x35
    7570:	7e a9       	ldd	r23, Y+54	; 0x36
    7572:	8f a9       	ldd	r24, Y+55	; 0x37
    7574:	98 ad       	ldd	r25, Y+56	; 0x38
    7576:	20 e0       	ldi	r18, 0x00	; 0
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	40 e2       	ldi	r20, 0x20	; 32
    757c:	51 e4       	ldi	r21, 0x41	; 65
    757e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7582:	dc 01       	movw	r26, r24
    7584:	cb 01       	movw	r24, r22
    7586:	bc 01       	movw	r22, r24
    7588:	cd 01       	movw	r24, r26
    758a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    758e:	dc 01       	movw	r26, r24
    7590:	cb 01       	movw	r24, r22
    7592:	98 ab       	std	Y+48, r25	; 0x30
    7594:	8f a7       	std	Y+47, r24	; 0x2f
    7596:	0f c0       	rjmp	.+30     	; 0x75b6 <ADCS_Runnable+0x298>
    7598:	88 ec       	ldi	r24, 0xC8	; 200
    759a:	90 e0       	ldi	r25, 0x00	; 0
    759c:	9e a7       	std	Y+46, r25	; 0x2e
    759e:	8d a7       	std	Y+45, r24	; 0x2d
    75a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    75a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    75a4:	01 97       	sbiw	r24, 0x01	; 1
    75a6:	f1 f7       	brne	.-4      	; 0x75a4 <ADCS_Runnable+0x286>
    75a8:	9e a7       	std	Y+46, r25	; 0x2e
    75aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    75ae:	98 a9       	ldd	r25, Y+48	; 0x30
    75b0:	01 97       	sbiw	r24, 0x01	; 1
    75b2:	98 ab       	std	Y+48, r25	; 0x30
    75b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    75b8:	98 a9       	ldd	r25, Y+48	; 0x30
    75ba:	00 97       	sbiw	r24, 0x00	; 0
    75bc:	69 f7       	brne	.-38     	; 0x7598 <ADCS_Runnable+0x27a>
    75be:	14 c0       	rjmp	.+40     	; 0x75e8 <ADCS_Runnable+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75c0:	69 a9       	ldd	r22, Y+49	; 0x31
    75c2:	7a a9       	ldd	r23, Y+50	; 0x32
    75c4:	8b a9       	ldd	r24, Y+51	; 0x33
    75c6:	9c a9       	ldd	r25, Y+52	; 0x34
    75c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75cc:	dc 01       	movw	r26, r24
    75ce:	cb 01       	movw	r24, r22
    75d0:	98 ab       	std	Y+48, r25	; 0x30
    75d2:	8f a7       	std	Y+47, r24	; 0x2f
    75d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    75d6:	98 a9       	ldd	r25, Y+48	; 0x30
    75d8:	9c a7       	std	Y+44, r25	; 0x2c
    75da:	8b a7       	std	Y+43, r24	; 0x2b
    75dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    75de:	9c a5       	ldd	r25, Y+44	; 0x2c
    75e0:	01 97       	sbiw	r24, 0x01	; 1
    75e2:	f1 f7       	brne	.-4      	; 0x75e0 <ADCS_Runnable+0x2c2>
    75e4:	9c a7       	std	Y+44, r25	; 0x2c
    75e6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		SRV_Motor_Start(Door_close);
    75e8:	88 e2       	ldi	r24, 0x28	; 40
    75ea:	0e 94 37 18 	call	0x306e	; 0x306e <SRV_Motor_Start>
		LCD_Clear();
    75ee:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
    75f2:	77 c1       	rjmp	.+750    	; 0x78e2 <ADCS_Runnable+0x5c4>
	}
	else
	{
		pass_trails++;
    75f4:	80 91 4a 03 	lds	r24, 0x034A
    75f8:	8f 5f       	subi	r24, 0xFF	; 255
    75fa:	80 93 4a 03 	sts	0x034A, r24
		LCD_Clear();
    75fe:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <LCD_Clear>
		LCD_WriteString("Wrong Password !");
    7602:	80 e6       	ldi	r24, 0x60	; 96
    7604:	92 e0       	ldi	r25, 0x02	; 2
    7606:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_WriteString>
    760a:	80 e0       	ldi	r24, 0x00	; 0
    760c:	90 e0       	ldi	r25, 0x00	; 0
    760e:	aa ef       	ldi	r26, 0xFA	; 250
    7610:	b3 e4       	ldi	r27, 0x43	; 67
    7612:	8f a3       	std	Y+39, r24	; 0x27
    7614:	98 a7       	std	Y+40, r25	; 0x28
    7616:	a9 a7       	std	Y+41, r26	; 0x29
    7618:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    761a:	6f a1       	ldd	r22, Y+39	; 0x27
    761c:	78 a5       	ldd	r23, Y+40	; 0x28
    761e:	89 a5       	ldd	r24, Y+41	; 0x29
    7620:	9a a5       	ldd	r25, Y+42	; 0x2a
    7622:	20 e0       	ldi	r18, 0x00	; 0
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	4a ef       	ldi	r20, 0xFA	; 250
    7628:	54 e4       	ldi	r21, 0x44	; 68
    762a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    762e:	dc 01       	movw	r26, r24
    7630:	cb 01       	movw	r24, r22
    7632:	8b a3       	std	Y+35, r24	; 0x23
    7634:	9c a3       	std	Y+36, r25	; 0x24
    7636:	ad a3       	std	Y+37, r26	; 0x25
    7638:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    763a:	6b a1       	ldd	r22, Y+35	; 0x23
    763c:	7c a1       	ldd	r23, Y+36	; 0x24
    763e:	8d a1       	ldd	r24, Y+37	; 0x25
    7640:	9e a1       	ldd	r25, Y+38	; 0x26
    7642:	20 e0       	ldi	r18, 0x00	; 0
    7644:	30 e0       	ldi	r19, 0x00	; 0
    7646:	40 e8       	ldi	r20, 0x80	; 128
    7648:	5f e3       	ldi	r21, 0x3F	; 63
    764a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    764e:	88 23       	and	r24, r24
    7650:	2c f4       	brge	.+10     	; 0x765c <ADCS_Runnable+0x33e>
		__ticks = 1;
    7652:	81 e0       	ldi	r24, 0x01	; 1
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	9a a3       	std	Y+34, r25	; 0x22
    7658:	89 a3       	std	Y+33, r24	; 0x21
    765a:	3f c0       	rjmp	.+126    	; 0x76da <ADCS_Runnable+0x3bc>
	else if (__tmp > 65535)
    765c:	6b a1       	ldd	r22, Y+35	; 0x23
    765e:	7c a1       	ldd	r23, Y+36	; 0x24
    7660:	8d a1       	ldd	r24, Y+37	; 0x25
    7662:	9e a1       	ldd	r25, Y+38	; 0x26
    7664:	20 e0       	ldi	r18, 0x00	; 0
    7666:	3f ef       	ldi	r19, 0xFF	; 255
    7668:	4f e7       	ldi	r20, 0x7F	; 127
    766a:	57 e4       	ldi	r21, 0x47	; 71
    766c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    7670:	18 16       	cp	r1, r24
    7672:	4c f5       	brge	.+82     	; 0x76c6 <ADCS_Runnable+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7674:	6f a1       	ldd	r22, Y+39	; 0x27
    7676:	78 a5       	ldd	r23, Y+40	; 0x28
    7678:	89 a5       	ldd	r24, Y+41	; 0x29
    767a:	9a a5       	ldd	r25, Y+42	; 0x2a
    767c:	20 e0       	ldi	r18, 0x00	; 0
    767e:	30 e0       	ldi	r19, 0x00	; 0
    7680:	40 e2       	ldi	r20, 0x20	; 32
    7682:	51 e4       	ldi	r21, 0x41	; 65
    7684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7688:	dc 01       	movw	r26, r24
    768a:	cb 01       	movw	r24, r22
    768c:	bc 01       	movw	r22, r24
    768e:	cd 01       	movw	r24, r26
    7690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7694:	dc 01       	movw	r26, r24
    7696:	cb 01       	movw	r24, r22
    7698:	9a a3       	std	Y+34, r25	; 0x22
    769a:	89 a3       	std	Y+33, r24	; 0x21
    769c:	0f c0       	rjmp	.+30     	; 0x76bc <ADCS_Runnable+0x39e>
    769e:	88 ec       	ldi	r24, 0xC8	; 200
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	98 a3       	std	Y+32, r25	; 0x20
    76a4:	8f 8f       	std	Y+31, r24	; 0x1f
    76a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76a8:	98 a1       	ldd	r25, Y+32	; 0x20
    76aa:	01 97       	sbiw	r24, 0x01	; 1
    76ac:	f1 f7       	brne	.-4      	; 0x76aa <ADCS_Runnable+0x38c>
    76ae:	98 a3       	std	Y+32, r25	; 0x20
    76b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b2:	89 a1       	ldd	r24, Y+33	; 0x21
    76b4:	9a a1       	ldd	r25, Y+34	; 0x22
    76b6:	01 97       	sbiw	r24, 0x01	; 1
    76b8:	9a a3       	std	Y+34, r25	; 0x22
    76ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76bc:	89 a1       	ldd	r24, Y+33	; 0x21
    76be:	9a a1       	ldd	r25, Y+34	; 0x22
    76c0:	00 97       	sbiw	r24, 0x00	; 0
    76c2:	69 f7       	brne	.-38     	; 0x769e <ADCS_Runnable+0x380>
    76c4:	14 c0       	rjmp	.+40     	; 0x76ee <ADCS_Runnable+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76c6:	6b a1       	ldd	r22, Y+35	; 0x23
    76c8:	7c a1       	ldd	r23, Y+36	; 0x24
    76ca:	8d a1       	ldd	r24, Y+37	; 0x25
    76cc:	9e a1       	ldd	r25, Y+38	; 0x26
    76ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76d2:	dc 01       	movw	r26, r24
    76d4:	cb 01       	movw	r24, r22
    76d6:	9a a3       	std	Y+34, r25	; 0x22
    76d8:	89 a3       	std	Y+33, r24	; 0x21
    76da:	89 a1       	ldd	r24, Y+33	; 0x21
    76dc:	9a a1       	ldd	r25, Y+34	; 0x22
    76de:	9e 8f       	std	Y+30, r25	; 0x1e
    76e0:	8d 8f       	std	Y+29, r24	; 0x1d
    76e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    76e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    76e6:	01 97       	sbiw	r24, 0x01	; 1
    76e8:	f1 f7       	brne	.-4      	; 0x76e6 <ADCS_Runnable+0x3c8>
    76ea:	9e 8f       	std	Y+30, r25	; 0x1e
    76ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		if(pass_trails==3)
    76ee:	80 91 4a 03 	lds	r24, 0x034A
    76f2:	83 30       	cpi	r24, 0x03	; 3
    76f4:	09 f0       	breq	.+2      	; 0x76f8 <ADCS_Runnable+0x3da>
    76f6:	f5 c0       	rjmp	.+490    	; 0x78e2 <ADCS_Runnable+0x5c4>
		{
			while(1)
			{
				DIO_WritePin(led,HIGH);
    76f8:	8f e0       	ldi	r24, 0x0F	; 15
    76fa:	61 e0       	ldi	r22, 0x01	; 1
    76fc:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
				DIO_WritePin(buzzer,HIGH);
    7700:	86 e1       	ldi	r24, 0x16	; 22
    7702:	61 e0       	ldi	r22, 0x01	; 1
    7704:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    7708:	80 e0       	ldi	r24, 0x00	; 0
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	a8 e4       	ldi	r26, 0x48	; 72
    770e:	b3 e4       	ldi	r27, 0x43	; 67
    7710:	89 8f       	std	Y+25, r24	; 0x19
    7712:	9a 8f       	std	Y+26, r25	; 0x1a
    7714:	ab 8f       	std	Y+27, r26	; 0x1b
    7716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7718:	69 8d       	ldd	r22, Y+25	; 0x19
    771a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    771c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    771e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7720:	20 e0       	ldi	r18, 0x00	; 0
    7722:	30 e0       	ldi	r19, 0x00	; 0
    7724:	4a ef       	ldi	r20, 0xFA	; 250
    7726:	54 e4       	ldi	r21, 0x44	; 68
    7728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    772c:	dc 01       	movw	r26, r24
    772e:	cb 01       	movw	r24, r22
    7730:	8d 8b       	std	Y+21, r24	; 0x15
    7732:	9e 8b       	std	Y+22, r25	; 0x16
    7734:	af 8b       	std	Y+23, r26	; 0x17
    7736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7738:	6d 89       	ldd	r22, Y+21	; 0x15
    773a:	7e 89       	ldd	r23, Y+22	; 0x16
    773c:	8f 89       	ldd	r24, Y+23	; 0x17
    773e:	98 8d       	ldd	r25, Y+24	; 0x18
    7740:	20 e0       	ldi	r18, 0x00	; 0
    7742:	30 e0       	ldi	r19, 0x00	; 0
    7744:	40 e8       	ldi	r20, 0x80	; 128
    7746:	5f e3       	ldi	r21, 0x3F	; 63
    7748:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    774c:	88 23       	and	r24, r24
    774e:	2c f4       	brge	.+10     	; 0x775a <ADCS_Runnable+0x43c>
		__ticks = 1;
    7750:	81 e0       	ldi	r24, 0x01	; 1
    7752:	90 e0       	ldi	r25, 0x00	; 0
    7754:	9c 8b       	std	Y+20, r25	; 0x14
    7756:	8b 8b       	std	Y+19, r24	; 0x13
    7758:	3f c0       	rjmp	.+126    	; 0x77d8 <ADCS_Runnable+0x4ba>
	else if (__tmp > 65535)
    775a:	6d 89       	ldd	r22, Y+21	; 0x15
    775c:	7e 89       	ldd	r23, Y+22	; 0x16
    775e:	8f 89       	ldd	r24, Y+23	; 0x17
    7760:	98 8d       	ldd	r25, Y+24	; 0x18
    7762:	20 e0       	ldi	r18, 0x00	; 0
    7764:	3f ef       	ldi	r19, 0xFF	; 255
    7766:	4f e7       	ldi	r20, 0x7F	; 127
    7768:	57 e4       	ldi	r21, 0x47	; 71
    776a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    776e:	18 16       	cp	r1, r24
    7770:	4c f5       	brge	.+82     	; 0x77c4 <ADCS_Runnable+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7772:	69 8d       	ldd	r22, Y+25	; 0x19
    7774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    777a:	20 e0       	ldi	r18, 0x00	; 0
    777c:	30 e0       	ldi	r19, 0x00	; 0
    777e:	40 e2       	ldi	r20, 0x20	; 32
    7780:	51 e4       	ldi	r21, 0x41	; 65
    7782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7786:	dc 01       	movw	r26, r24
    7788:	cb 01       	movw	r24, r22
    778a:	bc 01       	movw	r22, r24
    778c:	cd 01       	movw	r24, r26
    778e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7792:	dc 01       	movw	r26, r24
    7794:	cb 01       	movw	r24, r22
    7796:	9c 8b       	std	Y+20, r25	; 0x14
    7798:	8b 8b       	std	Y+19, r24	; 0x13
    779a:	0f c0       	rjmp	.+30     	; 0x77ba <ADCS_Runnable+0x49c>
    779c:	88 ec       	ldi	r24, 0xC8	; 200
    779e:	90 e0       	ldi	r25, 0x00	; 0
    77a0:	9a 8b       	std	Y+18, r25	; 0x12
    77a2:	89 8b       	std	Y+17, r24	; 0x11
    77a4:	89 89       	ldd	r24, Y+17	; 0x11
    77a6:	9a 89       	ldd	r25, Y+18	; 0x12
    77a8:	01 97       	sbiw	r24, 0x01	; 1
    77aa:	f1 f7       	brne	.-4      	; 0x77a8 <ADCS_Runnable+0x48a>
    77ac:	9a 8b       	std	Y+18, r25	; 0x12
    77ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77b0:	8b 89       	ldd	r24, Y+19	; 0x13
    77b2:	9c 89       	ldd	r25, Y+20	; 0x14
    77b4:	01 97       	sbiw	r24, 0x01	; 1
    77b6:	9c 8b       	std	Y+20, r25	; 0x14
    77b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77ba:	8b 89       	ldd	r24, Y+19	; 0x13
    77bc:	9c 89       	ldd	r25, Y+20	; 0x14
    77be:	00 97       	sbiw	r24, 0x00	; 0
    77c0:	69 f7       	brne	.-38     	; 0x779c <ADCS_Runnable+0x47e>
    77c2:	14 c0       	rjmp	.+40     	; 0x77ec <ADCS_Runnable+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77c4:	6d 89       	ldd	r22, Y+21	; 0x15
    77c6:	7e 89       	ldd	r23, Y+22	; 0x16
    77c8:	8f 89       	ldd	r24, Y+23	; 0x17
    77ca:	98 8d       	ldd	r25, Y+24	; 0x18
    77cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    77d0:	dc 01       	movw	r26, r24
    77d2:	cb 01       	movw	r24, r22
    77d4:	9c 8b       	std	Y+20, r25	; 0x14
    77d6:	8b 8b       	std	Y+19, r24	; 0x13
    77d8:	8b 89       	ldd	r24, Y+19	; 0x13
    77da:	9c 89       	ldd	r25, Y+20	; 0x14
    77dc:	98 8b       	std	Y+16, r25	; 0x10
    77de:	8f 87       	std	Y+15, r24	; 0x0f
    77e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    77e2:	98 89       	ldd	r25, Y+16	; 0x10
    77e4:	01 97       	sbiw	r24, 0x01	; 1
    77e6:	f1 f7       	brne	.-4      	; 0x77e4 <ADCS_Runnable+0x4c6>
    77e8:	98 8b       	std	Y+16, r25	; 0x10
    77ea:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				DIO_WritePin(led,LOW);
    77ec:	8f e0       	ldi	r24, 0x0F	; 15
    77ee:	60 e0       	ldi	r22, 0x00	; 0
    77f0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
				DIO_WritePin(buzzer,LOW);
    77f4:	86 e1       	ldi	r24, 0x16	; 22
    77f6:	60 e0       	ldi	r22, 0x00	; 0
    77f8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_WritePin>
    77fc:	80 e0       	ldi	r24, 0x00	; 0
    77fe:	90 e0       	ldi	r25, 0x00	; 0
    7800:	a8 e4       	ldi	r26, 0x48	; 72
    7802:	b3 e4       	ldi	r27, 0x43	; 67
    7804:	8b 87       	std	Y+11, r24	; 0x0b
    7806:	9c 87       	std	Y+12, r25	; 0x0c
    7808:	ad 87       	std	Y+13, r26	; 0x0d
    780a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    780c:	6b 85       	ldd	r22, Y+11	; 0x0b
    780e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7810:	8d 85       	ldd	r24, Y+13	; 0x0d
    7812:	9e 85       	ldd	r25, Y+14	; 0x0e
    7814:	20 e0       	ldi	r18, 0x00	; 0
    7816:	30 e0       	ldi	r19, 0x00	; 0
    7818:	4a ef       	ldi	r20, 0xFA	; 250
    781a:	54 e4       	ldi	r21, 0x44	; 68
    781c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7820:	dc 01       	movw	r26, r24
    7822:	cb 01       	movw	r24, r22
    7824:	8f 83       	std	Y+7, r24	; 0x07
    7826:	98 87       	std	Y+8, r25	; 0x08
    7828:	a9 87       	std	Y+9, r26	; 0x09
    782a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    782c:	6f 81       	ldd	r22, Y+7	; 0x07
    782e:	78 85       	ldd	r23, Y+8	; 0x08
    7830:	89 85       	ldd	r24, Y+9	; 0x09
    7832:	9a 85       	ldd	r25, Y+10	; 0x0a
    7834:	20 e0       	ldi	r18, 0x00	; 0
    7836:	30 e0       	ldi	r19, 0x00	; 0
    7838:	40 e8       	ldi	r20, 0x80	; 128
    783a:	5f e3       	ldi	r21, 0x3F	; 63
    783c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    7840:	88 23       	and	r24, r24
    7842:	2c f4       	brge	.+10     	; 0x784e <ADCS_Runnable+0x530>
		__ticks = 1;
    7844:	81 e0       	ldi	r24, 0x01	; 1
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	9e 83       	std	Y+6, r25	; 0x06
    784a:	8d 83       	std	Y+5, r24	; 0x05
    784c:	3f c0       	rjmp	.+126    	; 0x78cc <ADCS_Runnable+0x5ae>
	else if (__tmp > 65535)
    784e:	6f 81       	ldd	r22, Y+7	; 0x07
    7850:	78 85       	ldd	r23, Y+8	; 0x08
    7852:	89 85       	ldd	r24, Y+9	; 0x09
    7854:	9a 85       	ldd	r25, Y+10	; 0x0a
    7856:	20 e0       	ldi	r18, 0x00	; 0
    7858:	3f ef       	ldi	r19, 0xFF	; 255
    785a:	4f e7       	ldi	r20, 0x7F	; 127
    785c:	57 e4       	ldi	r21, 0x47	; 71
    785e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    7862:	18 16       	cp	r1, r24
    7864:	4c f5       	brge	.+82     	; 0x78b8 <ADCS_Runnable+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7866:	6b 85       	ldd	r22, Y+11	; 0x0b
    7868:	7c 85       	ldd	r23, Y+12	; 0x0c
    786a:	8d 85       	ldd	r24, Y+13	; 0x0d
    786c:	9e 85       	ldd	r25, Y+14	; 0x0e
    786e:	20 e0       	ldi	r18, 0x00	; 0
    7870:	30 e0       	ldi	r19, 0x00	; 0
    7872:	40 e2       	ldi	r20, 0x20	; 32
    7874:	51 e4       	ldi	r21, 0x41	; 65
    7876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    787a:	dc 01       	movw	r26, r24
    787c:	cb 01       	movw	r24, r22
    787e:	bc 01       	movw	r22, r24
    7880:	cd 01       	movw	r24, r26
    7882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7886:	dc 01       	movw	r26, r24
    7888:	cb 01       	movw	r24, r22
    788a:	9e 83       	std	Y+6, r25	; 0x06
    788c:	8d 83       	std	Y+5, r24	; 0x05
    788e:	0f c0       	rjmp	.+30     	; 0x78ae <ADCS_Runnable+0x590>
    7890:	88 ec       	ldi	r24, 0xC8	; 200
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	9c 83       	std	Y+4, r25	; 0x04
    7896:	8b 83       	std	Y+3, r24	; 0x03
    7898:	8b 81       	ldd	r24, Y+3	; 0x03
    789a:	9c 81       	ldd	r25, Y+4	; 0x04
    789c:	01 97       	sbiw	r24, 0x01	; 1
    789e:	f1 f7       	brne	.-4      	; 0x789c <ADCS_Runnable+0x57e>
    78a0:	9c 83       	std	Y+4, r25	; 0x04
    78a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78a4:	8d 81       	ldd	r24, Y+5	; 0x05
    78a6:	9e 81       	ldd	r25, Y+6	; 0x06
    78a8:	01 97       	sbiw	r24, 0x01	; 1
    78aa:	9e 83       	std	Y+6, r25	; 0x06
    78ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78ae:	8d 81       	ldd	r24, Y+5	; 0x05
    78b0:	9e 81       	ldd	r25, Y+6	; 0x06
    78b2:	00 97       	sbiw	r24, 0x00	; 0
    78b4:	69 f7       	brne	.-38     	; 0x7890 <ADCS_Runnable+0x572>
    78b6:	20 cf       	rjmp	.-448    	; 0x76f8 <ADCS_Runnable+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78b8:	6f 81       	ldd	r22, Y+7	; 0x07
    78ba:	78 85       	ldd	r23, Y+8	; 0x08
    78bc:	89 85       	ldd	r24, Y+9	; 0x09
    78be:	9a 85       	ldd	r25, Y+10	; 0x0a
    78c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    78c4:	dc 01       	movw	r26, r24
    78c6:	cb 01       	movw	r24, r22
    78c8:	9e 83       	std	Y+6, r25	; 0x06
    78ca:	8d 83       	std	Y+5, r24	; 0x05
    78cc:	8d 81       	ldd	r24, Y+5	; 0x05
    78ce:	9e 81       	ldd	r25, Y+6	; 0x06
    78d0:	9a 83       	std	Y+2, r25	; 0x02
    78d2:	89 83       	std	Y+1, r24	; 0x01
    78d4:	89 81       	ldd	r24, Y+1	; 0x01
    78d6:	9a 81       	ldd	r25, Y+2	; 0x02
    78d8:	01 97       	sbiw	r24, 0x01	; 1
    78da:	f1 f7       	brne	.-4      	; 0x78d8 <ADCS_Runnable+0x5ba>
    78dc:	9a 83       	std	Y+2, r25	; 0x02
    78de:	89 83       	std	Y+1, r24	; 0x01
    78e0:	0b cf       	rjmp	.-490    	; 0x76f8 <ADCS_Runnable+0x3da>
				_delay_ms(200);
			}
		}
	}
}
    78e2:	c6 5b       	subi	r28, 0xB6	; 182
    78e4:	df 4f       	sbci	r29, 0xFF	; 255
    78e6:	0f b6       	in	r0, 0x3f	; 63
    78e8:	f8 94       	cli
    78ea:	de bf       	out	0x3e, r29	; 62
    78ec:	0f be       	out	0x3f, r0	; 63
    78ee:	cd bf       	out	0x3d, r28	; 61
    78f0:	cf 91       	pop	r28
    78f2:	df 91       	pop	r29
    78f4:	1f 91       	pop	r17
    78f6:	0f 91       	pop	r16
    78f8:	08 95       	ret

000078fa <main>:
extern u8 mode_flag;

void Admin_Mode_Activate (void);

int main(void)
{
    78fa:	df 93       	push	r29
    78fc:	cf 93       	push	r28
    78fe:	cd b7       	in	r28, 0x3d	; 61
    7900:	de b7       	in	r29, 0x3e	; 62
	SH_init();
    7902:	0e 94 18 29 	call	0x5230	; 0x5230 <SH_init>
	EXTI2_SetCallBack(Admin_Mode_Activate);
    7906:	8a e8       	ldi	r24, 0x8A	; 138
    7908:	9c e3       	ldi	r25, 0x3C	; 60
    790a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <EXTI2_SetCallBack>

	while (1)
	{
		SH_Runnable();
    790e:	0e 94 43 29 	call	0x5286	; 0x5286 <SH_Runnable>
    7912:	fd cf       	rjmp	.-6      	; 0x790e <main+0x14>

00007914 <Admin_Mode_Activate>:
	}
}

void Admin_Mode_Activate (void)
{
    7914:	df 93       	push	r29
    7916:	cf 93       	push	r28
    7918:	cd b7       	in	r28, 0x3d	; 61
    791a:	de b7       	in	r29, 0x3e	; 62
	mode_flag = admin_mode;
    791c:	81 e0       	ldi	r24, 0x01	; 1
    791e:	80 93 4b 03 	sts	0x034B, r24
}
    7922:	cf 91       	pop	r28
    7924:	df 91       	pop	r29
    7926:	08 95       	ret

00007928 <__mulsi3>:
    7928:	62 9f       	mul	r22, r18
    792a:	d0 01       	movw	r26, r0
    792c:	73 9f       	mul	r23, r19
    792e:	f0 01       	movw	r30, r0
    7930:	82 9f       	mul	r24, r18
    7932:	e0 0d       	add	r30, r0
    7934:	f1 1d       	adc	r31, r1
    7936:	64 9f       	mul	r22, r20
    7938:	e0 0d       	add	r30, r0
    793a:	f1 1d       	adc	r31, r1
    793c:	92 9f       	mul	r25, r18
    793e:	f0 0d       	add	r31, r0
    7940:	83 9f       	mul	r24, r19
    7942:	f0 0d       	add	r31, r0
    7944:	74 9f       	mul	r23, r20
    7946:	f0 0d       	add	r31, r0
    7948:	65 9f       	mul	r22, r21
    794a:	f0 0d       	add	r31, r0
    794c:	99 27       	eor	r25, r25
    794e:	72 9f       	mul	r23, r18
    7950:	b0 0d       	add	r27, r0
    7952:	e1 1d       	adc	r30, r1
    7954:	f9 1f       	adc	r31, r25
    7956:	63 9f       	mul	r22, r19
    7958:	b0 0d       	add	r27, r0
    795a:	e1 1d       	adc	r30, r1
    795c:	f9 1f       	adc	r31, r25
    795e:	bd 01       	movw	r22, r26
    7960:	cf 01       	movw	r24, r30
    7962:	11 24       	eor	r1, r1
    7964:	08 95       	ret

00007966 <__udivmodqi4>:
    7966:	99 1b       	sub	r25, r25
    7968:	79 e0       	ldi	r23, 0x09	; 9
    796a:	04 c0       	rjmp	.+8      	; 0x7974 <__udivmodqi4_ep>

0000796c <__udivmodqi4_loop>:
    796c:	99 1f       	adc	r25, r25
    796e:	96 17       	cp	r25, r22
    7970:	08 f0       	brcs	.+2      	; 0x7974 <__udivmodqi4_ep>
    7972:	96 1b       	sub	r25, r22

00007974 <__udivmodqi4_ep>:
    7974:	88 1f       	adc	r24, r24
    7976:	7a 95       	dec	r23
    7978:	c9 f7       	brne	.-14     	; 0x796c <__udivmodqi4_loop>
    797a:	80 95       	com	r24
    797c:	08 95       	ret

0000797e <__udivmodhi4>:
    797e:	aa 1b       	sub	r26, r26
    7980:	bb 1b       	sub	r27, r27
    7982:	51 e1       	ldi	r21, 0x11	; 17
    7984:	07 c0       	rjmp	.+14     	; 0x7994 <__udivmodhi4_ep>

00007986 <__udivmodhi4_loop>:
    7986:	aa 1f       	adc	r26, r26
    7988:	bb 1f       	adc	r27, r27
    798a:	a6 17       	cp	r26, r22
    798c:	b7 07       	cpc	r27, r23
    798e:	10 f0       	brcs	.+4      	; 0x7994 <__udivmodhi4_ep>
    7990:	a6 1b       	sub	r26, r22
    7992:	b7 0b       	sbc	r27, r23

00007994 <__udivmodhi4_ep>:
    7994:	88 1f       	adc	r24, r24
    7996:	99 1f       	adc	r25, r25
    7998:	5a 95       	dec	r21
    799a:	a9 f7       	brne	.-22     	; 0x7986 <__udivmodhi4_loop>
    799c:	80 95       	com	r24
    799e:	90 95       	com	r25
    79a0:	bc 01       	movw	r22, r24
    79a2:	cd 01       	movw	r24, r26
    79a4:	08 95       	ret

000079a6 <__divmodhi4>:
    79a6:	97 fb       	bst	r25, 7
    79a8:	09 2e       	mov	r0, r25
    79aa:	07 26       	eor	r0, r23
    79ac:	0a d0       	rcall	.+20     	; 0x79c2 <__divmodhi4_neg1>
    79ae:	77 fd       	sbrc	r23, 7
    79b0:	04 d0       	rcall	.+8      	; 0x79ba <__divmodhi4_neg2>
    79b2:	e5 df       	rcall	.-54     	; 0x797e <__udivmodhi4>
    79b4:	06 d0       	rcall	.+12     	; 0x79c2 <__divmodhi4_neg1>
    79b6:	00 20       	and	r0, r0
    79b8:	1a f4       	brpl	.+6      	; 0x79c0 <__divmodhi4_exit>

000079ba <__divmodhi4_neg2>:
    79ba:	70 95       	com	r23
    79bc:	61 95       	neg	r22
    79be:	7f 4f       	sbci	r23, 0xFF	; 255

000079c0 <__divmodhi4_exit>:
    79c0:	08 95       	ret

000079c2 <__divmodhi4_neg1>:
    79c2:	f6 f7       	brtc	.-4      	; 0x79c0 <__divmodhi4_exit>
    79c4:	90 95       	com	r25
    79c6:	81 95       	neg	r24
    79c8:	9f 4f       	sbci	r25, 0xFF	; 255
    79ca:	08 95       	ret

000079cc <__udivmodsi4>:
    79cc:	a1 e2       	ldi	r26, 0x21	; 33
    79ce:	1a 2e       	mov	r1, r26
    79d0:	aa 1b       	sub	r26, r26
    79d2:	bb 1b       	sub	r27, r27
    79d4:	fd 01       	movw	r30, r26
    79d6:	0d c0       	rjmp	.+26     	; 0x79f2 <__udivmodsi4_ep>

000079d8 <__udivmodsi4_loop>:
    79d8:	aa 1f       	adc	r26, r26
    79da:	bb 1f       	adc	r27, r27
    79dc:	ee 1f       	adc	r30, r30
    79de:	ff 1f       	adc	r31, r31
    79e0:	a2 17       	cp	r26, r18
    79e2:	b3 07       	cpc	r27, r19
    79e4:	e4 07       	cpc	r30, r20
    79e6:	f5 07       	cpc	r31, r21
    79e8:	20 f0       	brcs	.+8      	; 0x79f2 <__udivmodsi4_ep>
    79ea:	a2 1b       	sub	r26, r18
    79ec:	b3 0b       	sbc	r27, r19
    79ee:	e4 0b       	sbc	r30, r20
    79f0:	f5 0b       	sbc	r31, r21

000079f2 <__udivmodsi4_ep>:
    79f2:	66 1f       	adc	r22, r22
    79f4:	77 1f       	adc	r23, r23
    79f6:	88 1f       	adc	r24, r24
    79f8:	99 1f       	adc	r25, r25
    79fa:	1a 94       	dec	r1
    79fc:	69 f7       	brne	.-38     	; 0x79d8 <__udivmodsi4_loop>
    79fe:	60 95       	com	r22
    7a00:	70 95       	com	r23
    7a02:	80 95       	com	r24
    7a04:	90 95       	com	r25
    7a06:	9b 01       	movw	r18, r22
    7a08:	ac 01       	movw	r20, r24
    7a0a:	bd 01       	movw	r22, r26
    7a0c:	cf 01       	movw	r24, r30
    7a0e:	08 95       	ret

00007a10 <__divmodsi4>:
    7a10:	97 fb       	bst	r25, 7
    7a12:	09 2e       	mov	r0, r25
    7a14:	05 26       	eor	r0, r21
    7a16:	0e d0       	rcall	.+28     	; 0x7a34 <__divmodsi4_neg1>
    7a18:	57 fd       	sbrc	r21, 7
    7a1a:	04 d0       	rcall	.+8      	; 0x7a24 <__divmodsi4_neg2>
    7a1c:	d7 df       	rcall	.-82     	; 0x79cc <__udivmodsi4>
    7a1e:	0a d0       	rcall	.+20     	; 0x7a34 <__divmodsi4_neg1>
    7a20:	00 1c       	adc	r0, r0
    7a22:	38 f4       	brcc	.+14     	; 0x7a32 <__divmodsi4_exit>

00007a24 <__divmodsi4_neg2>:
    7a24:	50 95       	com	r21
    7a26:	40 95       	com	r20
    7a28:	30 95       	com	r19
    7a2a:	21 95       	neg	r18
    7a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    7a30:	5f 4f       	sbci	r21, 0xFF	; 255

00007a32 <__divmodsi4_exit>:
    7a32:	08 95       	ret

00007a34 <__divmodsi4_neg1>:
    7a34:	f6 f7       	brtc	.-4      	; 0x7a32 <__divmodsi4_exit>
    7a36:	90 95       	com	r25
    7a38:	80 95       	com	r24
    7a3a:	70 95       	com	r23
    7a3c:	61 95       	neg	r22
    7a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a40:	8f 4f       	sbci	r24, 0xFF	; 255
    7a42:	9f 4f       	sbci	r25, 0xFF	; 255
    7a44:	08 95       	ret

00007a46 <__prologue_saves__>:
    7a46:	2f 92       	push	r2
    7a48:	3f 92       	push	r3
    7a4a:	4f 92       	push	r4
    7a4c:	5f 92       	push	r5
    7a4e:	6f 92       	push	r6
    7a50:	7f 92       	push	r7
    7a52:	8f 92       	push	r8
    7a54:	9f 92       	push	r9
    7a56:	af 92       	push	r10
    7a58:	bf 92       	push	r11
    7a5a:	cf 92       	push	r12
    7a5c:	df 92       	push	r13
    7a5e:	ef 92       	push	r14
    7a60:	ff 92       	push	r15
    7a62:	0f 93       	push	r16
    7a64:	1f 93       	push	r17
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    7a6a:	cd b7       	in	r28, 0x3d	; 61
    7a6c:	de b7       	in	r29, 0x3e	; 62
    7a6e:	ca 1b       	sub	r28, r26
    7a70:	db 0b       	sbc	r29, r27
    7a72:	0f b6       	in	r0, 0x3f	; 63
    7a74:	f8 94       	cli
    7a76:	de bf       	out	0x3e, r29	; 62
    7a78:	0f be       	out	0x3f, r0	; 63
    7a7a:	cd bf       	out	0x3d, r28	; 61
    7a7c:	09 94       	ijmp

00007a7e <__epilogue_restores__>:
    7a7e:	2a 88       	ldd	r2, Y+18	; 0x12
    7a80:	39 88       	ldd	r3, Y+17	; 0x11
    7a82:	48 88       	ldd	r4, Y+16	; 0x10
    7a84:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a86:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a88:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a90:	b9 84       	ldd	r11, Y+9	; 0x09
    7a92:	c8 84       	ldd	r12, Y+8	; 0x08
    7a94:	df 80       	ldd	r13, Y+7	; 0x07
    7a96:	ee 80       	ldd	r14, Y+6	; 0x06
    7a98:	fd 80       	ldd	r15, Y+5	; 0x05
    7a9a:	0c 81       	ldd	r16, Y+4	; 0x04
    7a9c:	1b 81       	ldd	r17, Y+3	; 0x03
    7a9e:	aa 81       	ldd	r26, Y+2	; 0x02
    7aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    7aa2:	ce 0f       	add	r28, r30
    7aa4:	d1 1d       	adc	r29, r1
    7aa6:	0f b6       	in	r0, 0x3f	; 63
    7aa8:	f8 94       	cli
    7aaa:	de bf       	out	0x3e, r29	; 62
    7aac:	0f be       	out	0x3f, r0	; 63
    7aae:	cd bf       	out	0x3d, r28	; 61
    7ab0:	ed 01       	movw	r28, r26
    7ab2:	08 95       	ret

00007ab4 <_exit>:
    7ab4:	f8 94       	cli

00007ab6 <__stop_program>:
    7ab6:	ff cf       	rjmp	.-2      	; 0x7ab6 <__stop_program>
